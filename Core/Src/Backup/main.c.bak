/* USER CODE BEGIN Header */
/*
  TODO:
  UART Control
  Change ADC to Phy conversion ratio -> use 1~4k array to store data
  SDMMC Log
  SDMMC with FATFS and MDMA
  OCP OTP Encoder Error
  RTC
  DONE:
  SDMMC Test with FATFS without MDMA
  ADC DMA
  Bypass SD Card detetion in BSP_PlatformIsDetected
  Invalidate DCache after ACD finish conversion

*/
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "fatfs.h"
#include "fdcan.h"
#include "i2c.h"
#include "mdma.h"
#include "memorymap.h"
#include "rtc.h"
#include "sdmmc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
// #include "usbd_cdc_if.h"
#include "string.h"
// #include "as5048a.h"
#include "pid.h"
#include "lowpass_filter.h"
#include "current_sense.h"
#include "inverter_state.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#ifndef M_PI
  #define M_PI 3.14159265358979323846
#endif
#define MAX_ANGLE_VALUE 4096
#define CAL_ZERO_ANGLE 1
#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
float MCU_MapValue(uint16_t in_value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max);
float MCU_TemperatureCalculate(uint16_t ts_data);
void Enter_ERROR_State(void);
void Config_Fdcan1(void);
void CAN_Send_State(int16_t RPM, int16_t torque, uint16_t DCV, int16_t DCA);
void CAN_Send_Status(void);
void CAN_Send_Temp(void);
void CAN_Send_Heartbeat(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char data[500];
__attribute__((section("._RAM_Area"))) static char tdata[500];
extern char write_buffer[200000];

__attribute__((section("._RAM_Area"))) FATFS SDFatFS_RAM;  /* File system object for SD card logical drive */
__attribute__((section("._RAM_Area"))) FIL MyFile;     /* File object */
// char SDPath[4]; /* SD card logical drive path */
// static uint8_t buffer[_MAX_SS]; /* a work buffer for the f_mkfs() */

//FOC variables
float open_loop_timestamp=0;
float zero_electric_angle=0;
float shaft_angle=0;
float voltage_limit=24;
float voltage_power_supply=24;
int period=2596; // period for the PWM
int dir=1; // anti clockwise direction is 1 , clockwise is -1
int pole_pairs=1;


int indexLED=0;
int indexHeartbeat=0;
int indexStatus=0;
int indexTimer = 0;
int prevSD = 0;

uint16_t raw1,raw2,raw3;
float motor_target= M_PI/6;
float Ts=(float)1/10000;
float Kp=0.167f;
float angle_prev=-1.0f;
float target_vel=5;
const float torque_constant = 0.492f; //Nm/A
const float max_torque = 25;
float percent_torque_requested = 0.04f;
uint16_t ADC_VAL[3];
uint16_t current_offset[3];
double current_phase[3];
// const int adc_range=4095;
// const double Vref=3.3;    // Voltage
// const double Rsense=0.33; // Ohm
const float MotCPLSB = 10.0f;
const float InvCPLSB = 10.0f;
const float Mot_Conv[1024] = {0};
const float Inv_Conv[1024] = {-75,-69.64903937599115,-60.857663115199415,-55.348127365247535,-51.25824640416121,-47.97526579164037,-45.2171313263421,-42.82952142721777,-40.71838000457137,-38.82195168892332,-37.09741095820172,-35.51378772874955,-34.047928696041765,-32.68205068537182,-31.402185945153377,-30.1971546175088,-29.057862886345475,-27.976809954137536,-26.947733249204816,-25.965347682618074,-25.025150450024228,-24.123272489919515,-23.256363783234974,-22.42150361510309,-21.616129529911404,-20.83798047792135,-20.085050870667317,-19.355553117487574,-18.647886824799997,-17.96061327998663,-17.292434164049297,-16.642173675981894,-16.008763430695637,-15.391229627736834,-14.788682091511816,-14.200304863520557,-13.625348089138868,-13.063120990105347,-12.51298575224888,-11.974352188504497,-11.446673061677302,-10.929439971069371,-10.422179723002273,-9.92445111822775,-9.435842099831461,-8.95596721396106,-8.484465342926399,-8.0209976762103,-7.565245889923858,-7.116910509423633,-6.675709433325721,-6.241376600117064,-5.813660781079875,-5.392324485377912,-4.977142964976224,-4.567903308621567,-4.164403615447327,-3.7664522399167026,-3.3738671008089227,-2.9864750478116093,-2.6041112800275528,-2.2266188113512726,-1.8538479782343416,-1.4856559858533274,-1.12190648912474,-0.762469205391767,-0.40721955593977555,-0.056038333793765105,0.2911886044920493,0.6345706251101433,0.9742125831962767,1.3102150706203588,1.6426746468849842,1.9716840544998036,2.297332420074099,2.619705442253405,2.9388855675236982,3.2549521548159532,3.567981629759629,3.878047629359912,4.185221137806309,4.489570614060256,4.791162111813833,5.090059392363685,5.386324030897413,5.680015516651565,5.97119134736181,6.259907118392675,6.546216606904409,6.8301718513866945,7.111823226862214,7.391219516042156,7.668407976693231,7.943434405456458,8.216343198340951,8.487177408099512,8.755978798676779,9.022787896910188,9.287644041646388,9.550585430430147,9.811649163906623,10.07087128807217,10.328286834497476,10.583929858639465,10.837833476349886,11.090029898683156,11.340550465096442,11.589425675131906,11.836685218663717,12.082358004787466,12.326472189424123,12.569055201708125,12.810133769222887,13.049733942143575,13.287881116344238,13.52460005552257,13.75991491239131,13.993849248984304,14.226426056121056,14.457667772071432,14.687596300459575,14.916233027445116,15.143598838214984,15.369714132820548,15.594598841389939,15.818272438745396,16.040753958454275,16.262062006338454,16.482214773468456,16.701230048664968,16.919125230530824,17.135917339033597,17.35162302665998,17.566258589160157,17.779839975900018,17.992382799839618,18.203902347152336,18.41441358650144,18.623931177988254,18.832469481785836,19.040042566471186,19.246664217069565,19.45234794282112,19.657106984683082,19.86095432257713,20.06390268239295,20.26596454275699,20.4671521415774,20.667477482371964,20.866952340389332,21.065588268530917,21.263396603081333,21.460388469254497,21.656574786563226,21.85196627401865,22.046573455165344,22.240406662959515,22.433476044495364,22.625791565585473,22.81736301520033,23.00820000977319,23.19831199737365,23.387708261756018,23.576397926286518,23.76438995775328,23.951693170064345,24.138316227836242,24.324267649878436,24.509555812576252,24.694188953176194,24.878175172977024,25.06152244043011,25.24423859415151,25.42633134584952,25.60780828316979,25.78867687246145,25.968944461466776,26.148618281936365,26.327705452173063,26.506212979506472,26.684147762700547,26.861516594296006,27.03832616289094,27.21458305535947,27.390293759012877,27.5654646637027,27.74010206386987,27.91421216053942,28.087801063264408,28.260874792019195,28.433439279044364,28.605500370644677,28.77706382894138,28.94813533358041,29.118720483397453,29.288824798041958,29.458453719560225,29.627612613940073,29.796306772616674,29.964541413942698,30.132321684621388,30.299652661106336,30.466539350966457,30.6329866942188,30.79899956462964,30.964582770984407,31.129741058327852,31.29447910917503,31.45880154469421,31.62271292586189,31.786217754591462,31.949320474835645,32.112025473663834,32.27433708231473,32.43625957722537,32.597797181036526,32.75895406357591,32.91973434281891,33.08014208582881,33.24018130967511,33.3998559823321,33.55917002355818,33.71812730575533,33.87673165480982,34.0349868509154,34.192896629378254,34.350464681404844,34.507694654872864,34.66459015508599,34.821154745512445,34.97739194850857,35.133305246026055,35.288898080306126,35.444173854557675,35.599135933622506,35.75378764462624,35.90813227761657,36.062173086187556,36.21591328809211,36.369356065841885,36.52250456729456,36.67536190623048,36.8279311629164,36.98021538465946,37.13221758634887,37.28394075098828,37.435387830216655,37.58656174481939,37.737465385229655,37.88810161201991,38.03847325638384,38.18858312060934,38.338433978542184,38.48802857604119,38.63736963142446,38.78645983590758,38.93530185403307,39.08389832409267,39.232251858540735,39.380365044401,39.52824044366514,39.67588059368421,39.823288007553174,39.97046517448808,40.11741456019678,40.26413860724267,40.410639735401844,40.55692034201445,40.702982802329075,40.84882946984135,40.99446267662677,41.139884733667316,41.285097931172345,41.430104538894625,41.5749068064398,41.719506963571234,41.863907220509645,42.00810976822714,42.15211677873668,42.295930405376225,42.43955278308874,42.58298602869678,42.72623224117274,42.869293501904906,43.01217187495865,43.15486940733342,43.29738812921585,43.439730054228164,43.58189717967298,43.72389148677388,43.86571494091237,44.00736949186063,44.148857074011005,44.29017960660133,44.43133899393706,44.572337125610034,44.71317587671308,44.853857108051955,44.994382666353886,45.134754384472615,45.27497408159013,45.415043563416134,45.55496462238358,45.694739037841316,45.83436857624463,45.97385499134191,46.11320002435883,46.25240540418031,46.39147284752903,46.5304040591418,46.66920073194291,46.80786454721533,46.946397174769345,47.08480027310844,47.223075489593214,47.36122446060256,47.499248811692894,47.63715015775466,47.77493010316732,47.91259024195119,48.050132157918256,48.187557424819886,48.32486760649323,48.46206425700501,48.59914892079394,48.73612313281069,48.87298841865629,49.00974629471841,49.1463982683058,49.28294583778154,49.41939049269348,49.555733713903805,49.691976973716635,49.82812173600382,49.964169456329216,50.10012158207155,50.23597955254496,50.37174479911948,50.507418745337986,50.643002807033724,50.77849839244453,50.9139069023272,51.049229730069214,51.18446826179991,51.31962387649975,51.45469794610858,51.589691835632664,51.72460690324999,51.85944450041478,51.9942059719603,52.12889265620129,52.26350588503402,52.39804698403617,52.532517272565144,52.66691806385529,52.80125066511391,52.935516377616636,53.06971649680105,53.20385231235986,53.337925108332854,53.4719361631976,53.60588674995944,53.739778136240716,53.87361158436846,54.00738835146143,54.141109689516554,54.27477684549416,54.40839106140186,54.54195357437874,54.67546561677756,54.80892841624666,54.94234319581125,55.07571117395315,55.209033564690515,55.34231157765646,55.47554641817669,55.60873928734708,55.74189138210966,55.87500389532846,56.008078015864726,56.14111492865072,56.27411581476383,56.407081851499356,56.54001421244277,56.67291406754134,56.80578258317547,56.938620922228836,57.071430244158364,57.20421170506347,57.33696645775473,57.46969565182201,57.60240043370197,57.73508194674514,57.867741331282446,58.00037972469107,58.13299826145993,58.265598073254694,58.398180288982246,58.53074603485453,58.66329643445238,58.79583260878826,58.928355676368994,59.06086675325815,59.1933669531374,59.32585738736816,59.45833916505251,59.59081339309341,59.72328117625523,59.855743617223254,59.98820181666298,60.12065687327947,60.253109883875595,60.38556194341078,60.51801414505849,60.650467580264205,60.782923338802675,60.915382508834796,61.047846176964526,61.180315428295046,61.31279134648503,61.44527501380429,61.57776751118968,61.7102699182999,61.84278331357103,61.9753087742709,62.107847376553764,62.24040019551467,62.372968305243376,62.505552778878496,62.63815468866056,62.770775105986104,62.90341510146044,63.03607574495078,63.168758105639256,63.30146325207528,63.434192252228286,63.56694617353992,63.69972608297627,63.83253304707989,63.96536813202147,64.09823240365188,64.23112692755353,64.36405276909181,64.49701099346674,64.6300026657637,64.76302885100517,64.89609061420117,65.02918902040051,65.16232513474165,65.29550002250323,65.42871474915506,65.56197038040841,65.69526798226678,65.8286086210764,65.96199336357654,66.09542327694999,66.22889942887332,66.36242288756745,66.49599472184747,66.62961600117364,66.76328779570088,66.8970111763295,67.03078721475532,67.16461698351992,67.29850155606096,67.43244200676219,67.56643941100413,67.70049484521411,67.83460938691684,67.96878411478451,68.10302010868747,68.23731844974463,68.371680220374,68.50610650434334,68.64059838682061,68.77515695442526,68.9097832952782,69.04447849905347,69.1792436570289,69.3140798621373,69.44898820901756,69.58396979406587,69.71902571548759,69.85415707334823,69.9893649696254,70.12465050826063,70.26001479521142,70.39545893850277,70.53098404828023,70.6665912368615,70.8022816187896,70.93805631088532,71.07391643230005,71.20986310456897,71.34589745166448,71.48202060004911,71.61823367872995,71.75453781931196,71.89093415605208,72.02742382591384,72.16400796862166,72.30068772671558,72.4374642456064,72.57433867363073,72.71131216210671,72.84838586538956,72.9855609409276,73.12283854931877,73.26021985436682,73.39770602313837,73.53529822602019,73.67299763677624,73.81080543260578,73.94872279420122,74.08675090580647,74.22489095527573,74.3631441341326,74.50151163762928,74.63999466480624,74.77859441855247,74.91731210566587,75.05614893691393,75.19510612709513,75.3341848951003,75.47338646397458,75.61271206098007,75.7521629176581,75.89174026989292,76.03144535797509,76.17127942666525,76.3112437252592,76.45133950765228,76.59156803240506,76.731930562809,76.87242836695299,77.01306271778998,77.15383489320442,77.29474617607985,77.43579785436748,77.57699122115463,77.71832757473476,77.8598082186765,78.00143446189469,78.14320761872125,78.28512900897653,78.42719995804174,78.5694217969313,78.71179586236661,78.85432349684936,78.99700604873686,79.13984487231613,79.28284132788082,79.4259967818067,79.56931260662935,79.71279018112165,79.85643089037211,80.00023612586432,80.14420728555638,80.2883457739618,80.43265300223044,80.57713038823061,80.72177935663188,80.86660133898852,81.01159777382361,81.15677010671425,81.30211979037756,81.44764828475678,81.59335705710936,81.73924758209489,81.88532134186431,82.03157982615005,82.17802453235669,82.32465696565305,82.47147863906446,82.6184910735667,82.76569579818045,82.91309435006656,83.0606882746228,83.20847912558088,83.3564684651052,83.50465786389225,83.65304890127061,83.80164316530289,83.95044225288802,84.09944776986498,84.24866133111738,84.39808456067908,84.54771909184149,84.69756656726133,84.84762863906997,84.99790696898378,85.14840322841559,85.29911909858771,85.45005627064575,85.60121644577418,85.7526013353123,85.90421266087304,86.05605215446093,86.20812155859375,86.36042262642349,86.51295712186004,86.66572681969564,86.8187335057309,86.97197897690245,87.1254650414117,87.27919351885515,87.43316624035674,87.58738504870087,87.74185179846785,87.89656835617006,88.05153660039053,88.2067584219227,88.36223572391185,88.51797042199843,88.67396444446291,88.83021973237254,88.98673823972939,89.14352193362134,89.3005727943733,89.45789281570183,89.61548400487032,89.77334838284725,89.93148798446526,90.08990485858368,90.24860106825122,90.40757869087219,90.56683981837415,90.72638655737796,90.88622102936961,91.04634537087429,91.20676173363336,91.36747228478237,91.52847920703266,91.68978469885406,91.851390974661,92.01330026500045,92.17551481674218,92.33803689327226,92.50086877468806,92.66401275799672,92.8274711573157,92.99124630407601,93.1553405472286,93.31975625345291,93.48449580736855,93.64956161174962,93.81495608774213,93.98068167508433,94.14674083232984,94.31313603707383,94.47986978618275,94.64694459602623,94.81436300271349,94.98212756233164,95.15024085118836,95.31870546605734,95.48752402442739,95.65669916475474,95.82623354671944,95.99612985148462,96.16639078196022,96.33701906306965,96.50801744202096,96.67938868858118,96.85113559535534,97.02326097806878,97.19576767585392,97.36865855154144,97.54193649195457,97.71560440820923,97.88966523601727,98.06412193599459,98.23897749397435,98.41423492132344,98.58989725526504,98.76596755920531,98.9424489230646,99.11934446361465,99.29665732481953,99.47439067818277,99.65254772309925,99.8311316872124,100.0101458267768,100.18959342702686,100.36947780255008,100.54980229766704,100.7305702868166,100.91178517494751,101.09345039791543,101.27556942288686,101.45814574874885,101.6411829065255,101.82468445980044,102.00865400514664,102.19309517256232,102.3780116259145,102.56340706338887,102.74928521794726,102.93564985779255,103.12250478684052,103.30985384519988,103.4977009096595,103.68604989418412,103.87490475041795,104.06426946819579,104.25414807606381,104.44454464180751,104.6354632729898,104.82690811749677,105.01888336409303,105.21139324298639,105.40444202640191,105.59803402916526,105.79217360929664,105.98686516861386,106.18211315334605,106.37792205475807,106.57429640978512,106.77124080167829,106.96875986066152,107.16685826459963,107.36554073967773,107.56481206109282,107.76467705375734,107.96514059301484,108.16620760536807,108.36788306922057,108.57017201563059,108.7730795290787,108.97661074824924,109.18077086682536,109.38556513429859,109.59099885679262,109.79707739790251,110.00380617954875,110.21119068284628,110.41923644899077,110.62794908015968,110.83733424043089,111.04739765671746,111.25814511972055,111.46958248489915,111.68171567345865,111.89455067335734,112.10809354033239,112.3223503989442,112.53732744364203,112.75303093984803,112.96946722506374,113.18664270999602,113.40456387970619,113.62323729478038,113.84266959252238,114.0628674881707,114.28383777613806,114.50558733127593,114.72812311016406,114.95145215242462,115.17558158206305,115.40051860883528,115.62627052964268,115.85284472995392,116.08024868525638,116.30848996253661,116.5375762217904,116.76751521756421,116.99831480052757,117.22998291907766,117.46252762097754,117.69595705502758,117.93027947277187,118.16550323024029,118.40163678972652,118.63868872160424,118.87666770618074,119.11558253559019,119.35544211572739,119.5962554682223,119.83803173245741,120.080780167628,120.32451015484747,120.56923119929775,120.81495293242739,121.06168511419708,121.3094376353746,121.55822051988093,121.80804392718801,122.05891815476923,122.31085364060658,122.56386096575181,122.81795085694705,123.07313418930386,123.32942198904391,123.58682543630164,123.84535586799154,124.10502478074176,124.36584383389504,124.62782485258026,124.89097983085463,125.15532093492106,125.42086050641996,125.6876110657999,125.95558531576813,126.22479614482364,126.49525663087468,126.76698004494438,127.039979854965,127.31426972966591,127.58986354255518,127.86677537599985,128.1450195254073,128.4246105035093,128.70556304475372,128.98789210980573,129.27161289016226,129.55674081288367,129.8432915454449,130.131281000711,130.4207253420401,130.71164098851807,131.00404462032856,131.29795318426335,131.59338389937625,131.8903542627864,132.18888205563445,132.4889853491972,132.79068251116564,133.093992212091,133.39893343200578,133.70552546722269,134.01378793732044,134.32374079232045,134.63540432006096,134.94879915377533,135.26394627988202,135.58086704599202,135.89958316914112,136.2201167442566,136.54249025286282,136.8667265720374,137.19284898362412,137.52088118371194,137.8508472923906,138.18277186379038,138.51667989641794,138.85259684379707,139.19054862542578,139.53056163806184,139.87266276734675,140.21687939978227,140.5632394350701,140.91177129883016,141.26250395571049,141.61546692290148,141.97069028407316,142.32820470374736,142.6880414421238,143.05023237037614,143.41480998643573,143.7818074312823,144.1512585057605,144.52319768794285,144.8976601510608,145.27468178202503,145.65429920055948,146.0365497789727,146.42147166259224,146.80910379088806,147.1994859193146,147.59265864189786,147.98866341460126,148.38754257949938,148.78933938979594,149.19409803571847,149.60186367132866,150.0126824422868,150.42660151460962,150.84366910446545,151.26393450905243,151.68744813860343,152.11426154957127,152.54442747904352,152.97799988044255,153.415033960568,153.85558621804233,154.2997144832238,154.74747795965186,155.19893726709955,155.65415448630205,156.11319320544516,156.57611856849275,157.04299732544234,157.51389788460057,157.98889036697636,158.46804666289285,158.95144049092966,159.43914745930738,159.9312451298386,160.42781308457103,160.9289329952623,161.4346886958263,161.94516625790868,162.46045406974912,162.98064291850437,163.50582607621368,164.03609938960005,164.57156137391212,165.1123133110259,165.65845935203714,166.21010662459292,166.7673653452223,167.33034893694946,167.8991741524831,168.4739612033032,169.0548338949825,169.64191976910337,170.2353502521583,170.83526081184476,171.44179112119588,172.0550852310194,172.67529175114987,173.3025640410542,173.93706041037126,174.57894433000826,175.2283846544599,175.88555585606747,176.55063827199177,177.22381836472312,177.90528899702673,178.5952497222795,179.2939070912385,180.0014749763551,180.71817491484626,181.44423647182174,182.17989762488293,182.92540517171716,183.68101516234066,184.44699335778728,185.22361571718739,186.01116891534883,186.80995089314564,187.62027144321092,188.44245283366354,189.27683047284228,190.12375361829214,190.98358613355242,191.85670729662814,192.74351266439595,193.64441499760875,194.55984525161762,195.49025363843708,196.43611076634983,197.39790886387254,198.3761630956168,199.37141297836348,200.38422390655984,201.41518879743933,202.46492986708512,203.53410055001734,204.62338757630607,205.73351322182032,206.86523774904475,208.01936205795965,209.19673056883215,210.39823436143928,211.62481459830371,212.87746626301504,214.1572422487169,215.46525783645012,216.80269560834944,218.17081084681172,219.57093747785677,221.00449462513285,222.47299385060825,223.97804716917022,225.52137593746164,227.10482073265985,228.73035235501624,230.40008410939942,232.11628554646018,233.88139787427082,235.69805128738682,237.569084503569,239.4975668505407,241.4868233081853,243.5404629881608,245.66241162633673,247.85694877802678,250.12875054721997,252.48293885600242,254.92513847847658,257.4615433369313,260.09899390305895,262.8450679852665,265.708187743792,268.6977464979444,271.8242598286745,275.09954670996,278.53694802934046,282.1515920302321,285.9607191397022,289.9840826447961,294.2444472041798,298.7682149111256,303.5862195941339,308.73474585425333,314.25685251956133,320.2041148174733,326.63895233816595,333.6377921523343,341.2954480543656,349.7313134566987,359.09833344493916,369.59637020050184,381.49276902205816,395.1552374423885,411.1068727427247,430.12355530831337,453.41881781719667,483.0279250206503,522.7090686372512,580.4611500765536,677.8106041234253,909.2260359314913,};
const float DCVPLSB = 0.02271f;     // DCVPLSB = 451*3.3/adc3_range 
const float DCAPLSB = 0.0402930f;   // DCAPLSB = 3.3/20e-3/adc1_range 
const float ACAPLSB = 0.0515718f;   // ACAPLSB = 3.3/15.626e-3/adc1_range

int max_time = 0;
int min_time = INT16_MAX;
int prev_time = 0;
int max_btw = 0;
int max_sprint = 0;
int max_sdwrite = 0;
int sd_td;

INV_Statustypedef inverter_state = STATE_INIT;
__attribute__((section("._ADC1_Area"))) uint16_t ADC1_arr[4] = {0};
__attribute__((section("._ADC2_Area"))) uint16_t ADC2_arr[4] = {0};
__attribute__((section("._ADC3_Area"))) uint16_t ADC3_arr[6] = {0};
// __attribute__((section("._ADC1_Area"))) uint16_t tmp_ADC1_arr[4] = {0};
// __attribute__((section("._ADC2_Area"))) uint16_t tmp_ADC2_arr[4] = {0};
// __attribute__((section("._ADC3_Area"))) uint16_t tmp_ADC3_arr[6] = {0};
// uint16_t ADC1_arr[4] = {0};
// uint16_t ADC2_arr[4] = {0};
// uint16_t ADC3_arr[6] = {0};

// CAN Headers
FDCAN_TxHeaderTypeDef HeartBeatHeader = { .Identifier = CAN_ID_HEARTBEAT+MOT_ID,.IdType = FDCAN_STANDARD_ID,.TxFrameType = FDCAN_DATA_FRAME,
                                          .DataLength = FDCAN_DLC_BYTES_1,.ErrorStateIndicator = FDCAN_ESI_ACTIVE,.BitRateSwitch = FDCAN_BRS_OFF,
                                          .FDFormat = FDCAN_CLASSIC_CAN,.TxEventFifoControl = FDCAN_STORE_TX_EVENTS,.MessageMarker = 0x01};
FDCAN_TxHeaderTypeDef TempHeader      = { .Identifier = CAN_ID_TEMPERATURE+MOT_ID,.IdType = FDCAN_STANDARD_ID,.TxFrameType = FDCAN_DATA_FRAME,
                                          .DataLength = FDCAN_DLC_BYTES_2,.ErrorStateIndicator = FDCAN_ESI_ACTIVE,.BitRateSwitch = FDCAN_BRS_OFF,
                                          .FDFormat = FDCAN_CLASSIC_CAN,.TxEventFifoControl = FDCAN_STORE_TX_EVENTS,.MessageMarker = 0x02};
FDCAN_TxHeaderTypeDef StateHeader     = { .Identifier = CAN_ID_STATE+MOT_ID,.IdType = FDCAN_STANDARD_ID,.TxFrameType = FDCAN_DATA_FRAME,
                                          .DataLength = FDCAN_DLC_BYTES_8,.ErrorStateIndicator = FDCAN_ESI_ACTIVE,.BitRateSwitch = FDCAN_BRS_OFF,
                                          .FDFormat = FDCAN_CLASSIC_CAN,.TxEventFifoControl = FDCAN_STORE_TX_EVENTS,.MessageMarker = 0x03};
FDCAN_TxHeaderTypeDef StatusHeader    = { .Identifier = CAN_ID_STATUS+MOT_ID,.IdType = FDCAN_STANDARD_ID,.TxFrameType = FDCAN_DATA_FRAME,
                                          .DataLength = FDCAN_DLC_BYTES_4,.ErrorStateIndicator = FDCAN_ESI_ACTIVE,.BitRateSwitch = FDCAN_BRS_OFF,
                                          .FDFormat = FDCAN_CLASSIC_CAN,.TxEventFifoControl = FDCAN_STORE_TX_EVENTS,.MessageMarker = 0x04};
FDCAN_RxHeaderTypeDef RxHeader1;

int isSent = 1;
uint16_t control;
int CAN_Timer = 0;
//const double KV= 2375.0/12.0; //KV number (RPM is 2149 - 2375, when operating voltage is 12V)

const char TestFPath[] = {"Test.txt"};
const char TextFPath[] = {"Text.txt"};

struct LowPassFilter filter= {.Tf=0.01,.y_prev=0.0f}; //Tf=10ms
struct LowPassFilter filter_current= {.Tf=0.05,.y_prev=0.0f}; //Tf=50ms
// limit=voltage_power_supply/2;
struct PIDController pid_controller = {.P=0.5,.I=0.1,.D=0.0,.output_ramp=100.0,.limit=6,.error_prev=0,.output_prev=0,.integral_prev=0};

struct PIDController pid_controller_current = {.P=1.0,.I=0.1,.D=0.0,.output_ramp=100.0,.limit=6,.error_prev=0,.output_prev=0,.integral_prev=0};

void UART_TX_Send(UART_HandleTypeDef *huart,const char *format,...)
{
  va_list list;
  va_start(list,format);  
  vsnprintf(tdata,sizeof(tdata),format,list);
  if(isSent)
  {
    HAL_UART_Transmit_DMA(huart,(const uint8_t*)tdata,sizeof(tdata));
    isSent = 0;
  }
  va_end(list);
}

void CAN1_SetMsg(FDCAN_TxHeaderTypeDef *pTxHeader, const uint8_t *pTxData)
{
    HAL_FDCAN_AddMessageToTxBuffer(&hfdcan1, pTxHeader, pTxData, FDCAN_TX_BUFFER0);
    /* 启动FDCAN模块 */
    HAL_FDCAN_Start(&hfdcan1);
    /* 发送缓冲区消息 */
    HAL_FDCAN_EnableTxBufferRequest(&hfdcan1, FDCAN_TX_BUFFER0);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  volatile FRESULT res;                                 /* FatFs function common result code */
	uint32_t byteswritten, bytesread;                     /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs\n"; /* File write buffer */
  // uint8_t wlooptext[] = "This is STM32 working with FatFs in main loop\n"; /* File write buffer */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_MDMA_Init();
  MX_TIM2_Init();
  MX_ADC1_Init();
  MX_FDCAN1_Init();
  MX_USART1_UART_Init();
  MX_ADC3_Init();
  MX_TIM1_Init();
  MX_ADC2_Init();
  MX_I2C2_Init();
  MX_TIM5_Init();
  MX_SPI4_Init();
  MX_RTC_Init();
  MX_SDMMC1_SD_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LED_T_GPIO_Port,LED_T_Pin,GPIO_PIN_SET);

  // Calibrate ADC
  HAL_Delay(100);
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET_LINEARITY,ADC_SINGLE_ENDED);
  HAL_ADCEx_Calibration_Start(&hadc2,ADC_CALIB_OFFSET_LINEARITY,ADC_SINGLE_ENDED);
  HAL_ADCEx_Calibration_Start(&hadc3,ADC_CALIB_OFFSET_LINEARITY,ADC_SINGLE_ENDED);
  HAL_Delay(100);

  HAL_TIM_Base_Start(&htim5);

  //Init SD files
  BSP_SD_Init();
  HAL_SD_InitCard(&hsd1);
  // volatile int res_bsp = BSP_SD_IsDetected();
  HAL_Delay(1);
  // while(1)
  // {
  //   int sdcard_status = HAL_SD_GetCardState(&hsd1);
  //   HAL_GPIO_TogglePin(LED_T_GPIO_Port,LED_T_Pin);
  //   HAL_Delay(100);
  // }
  volatile int sdcard_status = HAL_SD_GetCardState(&hsd1);
  if(sdcard_status == HAL_SD_CARD_TRANSFER)
  {
    res = f_mount(&SDFatFS_RAM,(TCHAR const*)SDPath,1);
    // res = f_mount(&SDFatFS,"0",0);
    if (res != FR_OK)
    {
      Error_Handler();
    }
    else
    {
      res = f_open(&MyFile,"Test.txt",FA_CREATE_ALWAYS | FA_WRITE);
      if (res != FR_OK)
      {
        Error_Handler();
      }
      else
      {
        f_write(&MyFile,wtext,sizeof(wtext),(void *)&byteswritten);
        res = f_close(&MyFile);
        if(res!=FR_OK)
        {
          Error_Handler();
        }
      }
    }
  }

  // Init ADC DMA
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_arr,4);
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)ADC2_arr,4);
  HAL_ADC_Start_DMA(&hadc3,(uint32_t*)ADC3_arr,6);
  // HAL_MDMA_Start_IT(&hmdma_mdma_channel0_dma1_stream2_tc_0,(uint32_t)tmp_ADC1_arr,(uint32_t)ADC1_arr,8,1);
  // HAL_MDMA_Start_IT(&hmdma_mdma_channel1_dma1_stream1_tc_0,(uint32_t)tmp_ADC2_arr,(uint32_t)ADC2_arr,8,1);
  // HAL_MDMA_Start_IT(&hmdma_mdma_channel2_dma1_stream4_tc_0,(uint32_t)tmp_ADC3_arr,(uint32_t)ADC3_arr,12,1);
  // HAL_ADC_Start_IT(&hadc3);

  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  calibrateOffsets(current_offset,ADC1_arr);
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port,Motor_Enable_Pin,GPIO_PIN_RESET);
  if(CAL_ZERO_ANGLE)
  {
    HAL_GPIO_WritePin(Motor_Enable_GPIO_Port,Motor_Enable_Pin,GPIO_PIN_SET);
    setPhaseVoltage(3,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
    HAL_Delay(3000);
    // uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
    float raw_angle;
    Get_Encoder_Angle(ADC2_arr,&raw_angle);
    zero_electric_angle=_electricalAngle(raw_angle,pole_pairs);
    setPhaseVoltage(0,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
    HAL_GPIO_WritePin(Motor_Enable_GPIO_Port,Motor_Enable_Pin,GPIO_PIN_RESET);
  }

  inverter_state = STATE_READY;
  UART_TX_Send(&huart1,"zero_electric_angle: %i \n",(int) floor(zero_electric_angle/M_PI*180));
  HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
  Config_Fdcan1();
  prev_time = 0;
  HAL_TIM_Base_Start_IT(&htim2); 
  f_open(&MyFile,"Text.txt",FA_CREATE_ALWAYS|FA_WRITE);
  f_close(&MyFile);
  f_open(&MyFile,"Text.txt",FA_OPEN_APPEND|FA_WRITE);
  prevSD = __HAL_TIM_GET_COUNTER(&htim5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    int sd_now = __HAL_TIM_GET_COUNTER(&htim5);
    if (sd_now - prevSD >= 5000000)
    {
      f_write(&MyFile,write_buffer,sizeof(write_buffer),(void *)&byteswritten);
      // f_sync(&MyFile);
      sd_td = __HAL_TIM_GET_COUNTER(&htim5) - sd_now;
      if (max_sdwrite < sd_td)
      {
        max_sdwrite = sd_td;
      }
      
      prevSD = sd_now;
    }
    
    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 3;
  RCC_OscInitStruct.PLL.PLLN = 360;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInitStruct.PLL2.PLL2M = 3;
  PeriphClkInitStruct.PLL2.PLL2N = 300;
  PeriphClkInitStruct.PLL2.PLL2P = 8;
  PeriphClkInitStruct.PLL2.PLL2Q = 20;
  PeriphClkInitStruct.PLL2.PLL2R = 4;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
// void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
//   if(hadc->Instance == hadc3.Instance) {
//     volatile uint32_t adc_val = HAL_ADC_GetValue(hadc);
//     volatile int a = 0;
//   }
// }


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
  {
    
    uint32_t sprint_start,sprint_end;
    uint32_t tick_start = __HAL_TIM_GET_COUNTER(&htim5); 

    indexLED++;
    indexHeartbeat++;
    indexStatus++;
    CAN_Timer++;

    float angle_now;
    Get_Encoder_Angle(ADC2_arr,&angle_now);

    float angular_vel=cal_angular_vel(angle_now);
    float filtered_vel=LowPassFilter_operator(angular_vel,&filter);
    float target_torque = max_torque*percent_torque_requested;
    float target_Iq = target_torque/torque_constant;
    for (int i=0;i<3;i++){
       	current_phase[i] =(float)  (ADC1_arr[i]-current_offset[i])*ACAPLSB;
        //OCP
        if (current_phase[i] > ACAOCP||current_phase[i] < -ACAOCP)
        {
          Enter_ERROR_State();
        }
    }

    float Iq=cal_Iq(current_phase, _electricalAngle(angle_now, pole_pairs));
    float filtered_Iq=LowPassFilter_operator(Iq,&filter_current);
    float Id=cal_Id(current_phase, _electricalAngle(angle_now,pole_pairs));
    float filtered_Id=LowPassFilter_operator(Id,&filter_current);

    float current_controller_output=PID_operator(target_Iq-filtered_Iq,&pid_controller_current);
    float Id_controller_output=PID_operator(0-filtered_Id,&pid_controller_current);

    setPhaseVoltage(_constrain(current_controller_output,-voltage_power_supply/2,voltage_power_supply/2),  _constrain(Id_controller_output,-voltage_power_supply/2,voltage_power_supply/2), _electricalAngle(angle_now, pole_pairs),TIM8);

    // f_write(&TestFile,wtext,sizeof(wtext),(void *)&byteswritten);
    // sprintf(data, "angle_now : %i \t angle_prev : %i \n", (int) floor(angle_now/M_PI*180), (int) floor(angle_prev/M_PI*180));
    // CDC_Transmit_FS((uint8_t*) data, strlen(data));
    // sprintf(data, "angular_vel : %i \n", (int) floor(angular_vel/M_PI*180));
    // sprintf(data, "filtered_vel : %i \n", (int) floor(filtered_vel/M_PI*180)); 
    // sprintf(data, "target_torque : %i \n", (int) floor(target_torque));
    // sprintf(data, "real_torque : %i \n", (int) floor(filtered_Iq*torque_constant));   
    // CDC_Transmit_FS((uint8_t*) data, strlen(data));
//    sprintf(data, "open loop control \n");
//    sprintf(data, "angle: %u \n", read_raw);
//    CDC_Transmit_FS((uint8_t*) data, strlen(data));
//    sprintf(data, "angle_now : %i \n", (int) floor(angle_now*180/M_PI));
//        CDC_Transmit_FS((uint8_t*) data, strlen(data));


    if (indexLED == 5000)
    {
    	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
    	HAL_GPIO_TogglePin(LED_T_GPIO_Port, LED_T_Pin);
      UART_TX_Send(&huart1,"ping");
    	indexLED=0;
    }

    if (indexHeartbeat == 1000)
    {
      CAN_Send_Heartbeat();
      CAN_Send_Temp();
      indexHeartbeat = 0;
    }

    if (indexStatus == 100)
    {
      float Ia = sqrt(filtered_Id*filtered_Id+filtered_Iq*filtered_Iq);
      int16_t report_RPM = (int16_t) roundf(filtered_vel/2/M_PI*60);
      int16_t report_torque = (int16_t) roundf(Ia*torque_constant/max_torque*1000);
      uint16_t report_DCV = (uint16_t) roundf(ADC3_arr[0]*DCVPLSB*100);
      int16_t report_DCA = (int16_t) roundf(ADC1_arr[3]*DCAPLSB*100);
      CAN_Send_State(report_RPM,report_torque,report_DCV,report_DCA);
      CAN_Send_Status();
      indexStatus = 0;
    }

    // fault detect
    if(CAN_Timer == 10000 && inverter_state == STATE_RUNNING)
    {
      HAL_GPIO_WritePin(Motor_Enable_GPIO_Port,Motor_Enable_Pin,GPIO_PIN_RESET);
      inverter_state = STATE_READY;
    }
    uint32_t loop_time = __HAL_TIM_GET_COUNTER(&htim5)-tick_start;
    if (loop_time > max_time)
    {
      max_time = loop_time;
    }
    if (loop_time < min_time)
    {
      min_time = loop_time;
    }
    int btw_time = tick_start - prev_time;
    if (btw_time > max_btw)
    {
      max_btw = btw_time;
    }
    prev_time = tick_start;
    if (indexTimer == 100000)
    {
      max_time = 0;
      min_time = INT16_MAX;
      max_btw = 0;
      indexTimer = 0;
      max_sdwrite = 0;
      // f_puts()
    }
    // int sprint_tim = sprint_end-sprint_start;
    // if (sprint_tim > max_sprint)
    // {
    //   max_sprint = sprint_tim;
    // }
    indexTimer++;
  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	isSent = 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
  if(hadc == &hadc1)
  {
    SCB_InvalidateDCache_by_Addr(ADC1_arr,sizeof(ADC1_arr));
  }
  if(hadc == &hadc2)
  {
    SCB_InvalidateDCache_by_Addr(ADC2_arr,sizeof(ADC2_arr));
  }
  if(hadc == &hadc2)
  {
    SCB_InvalidateDCache_by_Addr(ADC3_arr,sizeof(ADC3_arr));
  }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)!=0)
  {
    uint8_t RxData1[4];
    HAL_FDCAN_GetRxMessage(hfdcan,FDCAN_RX_FIFO0,&RxHeader1,RxData1);
    if(hfdcan->Instance == FDCAN1)
    {
      int16_t torque_command;
      control = RxData1[0] | (uint16_t)RxData1[1] << 8;
      // enable
      if(control & CTRL_ENABLE && inverter_state == STATE_READY)
      {
        inverter_state = STATE_RUNNING;
        percent_torque_requested = 0;
        HAL_GPIO_WritePin(Motor_Enable_GPIO_Port,Motor_Enable_Pin,GPIO_PIN_SET);
      // disable
      }else if(!(control & CTRL_ENABLE) && inverter_state == STATE_RUNNING) 
      {
        inverter_state = STATE_READY;
        percent_torque_requested = 0;
        HAL_GPIO_WritePin(Motor_Enable_GPIO_Port,Motor_Enable_Pin,GPIO_PIN_RESET);
      }
      // fault reset
      if(CTRL_FAULT_RESET && !(control & CTRL_FAULT_RESET) && inverter_state == STATE_ERROR) 
      {
        inverter_state = STATE_READY;
      }
      torque_command = data[2] | data[3] << 8;
      percent_torque_requested = (float)torque_command/1000;
      CAN_Timer = 0;
    }
  }
}

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
  if(hfdcan->Instance == FDCAN1)
  {
    MX_FDCAN1_Init();
    Config_Fdcan1();
  }
}

void Config_Fdcan1(void)
{
  FDCAN_FilterTypeDef CAN1RxFilterConfig;
  CAN1RxFilterConfig.IdType = FDCAN_STANDARD_ID;
  CAN1RxFilterConfig.FilterIndex = 0;
  CAN1RxFilterConfig.FilterType = FDCAN_FILTER_DUAL;
  CAN1RxFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  CAN1RxFilterConfig.FilterID1 = CAN_ID_CONTROL+MOT_ID;
  CAN1RxFilterConfig.FilterID2 = 0x7FF;
  CAN1RxFilterConfig.RxBufferIndex = 0;
  if (HAL_FDCAN_ConfigFilter(&hfdcan1,&CAN1RxFilterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,FDCAN_REJECT,FDCAN_REJECT,ENABLE,ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1,FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1,FDCAN_IT_BUS_OFF,0) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_FDCAN_Start(&hfdcan1);
}

void Enter_ERROR_State(void)
{
  inverter_state = STATE_ERROR;
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port,Motor_Enable_Pin,GPIO_PIN_RESET);
}

float MCU_MapValue(uint16_t in_value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
  return (float)(in_value - in_min) / (in_max - in_min) * (out_max - out_min) + out_min;
}
 
float MCU_TemperatureCalculate(uint16_t ts_data)
{
  /* 0x1FF1E820 Calibration ADC value at 30 °C = 0x2fc0, 12224 */
  uint16_t ts_cal1 = *(uint16_t*) (TEMPSENSOR_CAL1_ADDR);
  /* 0x1FF1E840 Calibration ADC value at 110 °C = 0x3cb4, 15540 */
  uint16_t ts_cal2 = *(uint16_t*) (TEMPSENSOR_CAL2_ADDR);
 
//  return (80 * (ts_data - ts_cal1)) / (ts_cal2 - ts_cal1) + 30;
 
  return MCU_MapValue(ts_data, ts_cal1, ts_cal2, TEMPSENSOR_CAL1_TEMP, TEMPSENSOR_CAL2_TEMP);
}

void CAN_Send_State(int16_t RPM, int16_t torque, uint16_t DCV, int16_t DCA)
{
  uint8_t StateData[8];
  StateData[0] = RPM;
  StateData[1] = RPM >> 8;
  StateData[2] = torque;
  StateData[3] = torque >> 8;
  StateData[4] = DCV;
  StateData[5] = DCV >> 8;
  StateData[6] = DCA;
  StateData[7] = DCA >> 8;
  CAN1_SetMsg(&StateHeader,StateData);
}

void CAN_Send_Status(void)
{
  uint16_t report_status = 0;
  if(inverter_state == STATE_READY) 
  {
    report_status |= REPORT_STATUS_READY;
  }else if(inverter_state == STATE_RUNNING)
  {
    report_status |= REPORT_STATUS_ENABLED;
  }else if(inverter_state == STATE_ERROR)
  {
    report_status |= REPORT_STATUS_FAULT;
  }
  if(ADC3_arr[0]*DCVPLSB > 60)
  {
    report_status |= REPORT_STATUS_HV;
  }
  uint8_t StatusData[4];
  StatusData[0] = report_status;
  StatusData[1] = report_status>>8;
  StatusData[2] = ((int16_t)percent_torque_requested*10);
  StatusData[3] = ((int16_t)percent_torque_requested*10)>>8;
  CAN1_SetMsg(&StatusHeader,StatusData);
}

void CAN_Send_Temp(void)
{
  uint8_t TempData[2];
  float T_Mot = (float) ADC3_arr[2]*MotCPLSB;
  TempData[1] = (uint8_t) round(T_Mot/0.5);
  // volatile float T_MCU = (float)MCU_TemperatureCalculate(ADC3_arr[1]<<4);
  float T_MCU = (float)MCU_TemperatureCalculate(ADC3_arr[1]);
  float T_U = Inv_Conv[ADC3_arr[3]>>6];
  float T_V = Inv_Conv[ADC3_arr[4]>>6];
  float T_W = Inv_Conv[ADC3_arr[5]>>6];
  float T_Report = fmax(fmax(T_MCU,T_U),fmax(T_V,T_W));
  //OTP
  if(fmax(T_Report,T_MCU) > OTP)
  {
    Enter_ERROR_State();
  }
  TempData[0] = (uint8_t) round(T_Report/0.5);
  CAN1_SetMsg(&TempHeader,TempData);
}

void CAN_Send_Heartbeat(void)
{
  uint8_t HBData = 0x7f;
  CAN1_SetMsg(&HeartBeatHeader,&HBData);
}

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x24000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
