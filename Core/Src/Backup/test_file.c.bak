__attribute__((section("._RAM_Area")))  char write_buffer[200000] = {"You Only Look Once:\n Unified, Real-Time Object Detection\n Joseph Redmon , Santosh Divvala , Ross Girshick , Ali Farhadi\n University of Washington , Allen Institute for AI , Facebook AI Research\n http://pjreddie.com/yolo/\n Abstract\n arXiv:1506.02640v5  [cs.CV]  9 May 2016\n We present YOLO, a new approach to object detection.\n Prior work onobject detection repurposes classifiers to per\nform detection. Instead, we frame object detection as a re\ngression problem to spatially separated bounding boxes and\n associated class probabilities. A single neural network pre\ndicts bounding boxes and class probabilities directly from\n full images in one evaluation. Since the whole detection\n pipeline is a single network, it can be optimized end-to-end\n directly on detection performance.\n 1. Resize image.\n 2. Run convolutional network.\n 3. Non-max suppression.\n Person: 0.64\n Horse: 0.28\n Dog: 0.30\n Figure 1: The YOLO Detection System. Processing images\n with YOLO is simple and straightforward. Our system (1) resizes\n the input image to 448 448, (2) runs a single convolutional net\nwork on the image, and (3) thresholds the resulting detections by\n the model’s confidence.\n Our unified architecture is extremely fast. Our base\n YOLO model processes images in real-time at 45 frames\n per second. A smaller version of the network, Fast YOLO,\n processes an astounding 155 frames per second while\n still achieving double the mAP of other real-time detec\ntors. Compared to state-of-the-art detection systems, YOLO\n makes more localization errors but is less likely to predict\n false positives on background. Finally, YOLO learns very\n general representations of objects. It outperforms other de\ntection methods, including DPM and R-CNN, when gener\nalizing from natural images to other domains like artwork.\n 1. Introduction\n Humans glance at an image and instantly know what ob\njects are in the image, where they are, and how they inter\nact. The human visual system is fast and accurate, allow\ning us to perform complex tasks like driving with little con\nscious thought. Fast, accurate algorithms for object detec\ntion would allow computers to drive cars without special\nized sensors, enable assistive devices to convey real-time\n scene information to human users, and unlock the potential\n for general purpose, responsive robotic systems.\n Current detection systems repurpose classifiers to per\nform detection. To detect an object, these systems take a\n classifier for that object and evaluate it at various locations\n and scales in a test image. Systems like deformable parts\n models (DPM) use a sliding window approach where the\n classifier is run at evenly spaced locations over the entire\n image [10].\n Morerecent approaches like R-CNN use region proposal\n methods to first generate potential bounding boxes in an im\nage and then run a classifier on these proposed boxes. After\n classification, post-processing is used to refine the bound\ning boxes, eliminate duplicate detections, and rescore the\n boxes based on other objects in the scene [13]. These com\nplex pipelines are slow and hard to optimize because each\n individual component must be trained separately.\n Wereframe object detection as a single regression prob\nlem, straight from image pixels to bounding box coordi\nnates and class probabilities. Using our system, you only\n look once (YOLO) at an image to predict what objects are\n present and where they are.\n YOLO is refreshingly simple: see Figure 1. A sin\ngle convolutional network simultaneously predicts multi\nple bounding boxes and class probabilities for those boxes.\n YOLO trains on full images and directly optimizes detec\ntion performance. This unified model has several benefits\n over traditional methods of object detection.\n First, YOLO is extremely fast. Since we frame detection\n as a regression problem we don’t need a complex pipeline.\n We simply run our neural network on a new image at test\n time to predict detections. Our base network runs at 45\n frames per second with no batch processing on a Titan X\n GPU and a fast version runs at more than 150 fps. This\n means we can process streaming video in real-time with\n less than 25 milliseconds of latency. Furthermore, YOLO\n achieves more than twice the mean average precision of\n other real-time systems. For a demo of our system running\n in real-time on a webcam please see our project webpage:\n http://pjreddie.com/yolo/.\n Second, YOLO reasons globally about the image when\n 1\nmaking predictions. Unlike sliding window and region\n proposal-based techniques, YOLO sees the entire image\n during training and test time so it implicitly encodes contex\ntual information about classes as well as their appearance.\n Fast R-CNN, a top detection method [14], mistakes back\nground patches in an image for objects because it can’t see\n the larger context. YOLO makes less than half the number\n of background errors compared to Fast R-CNN.\n Third, YOLO learns generalizable representations of ob\njects. When trained on natural images and tested on art\nwork, YOLO outperforms top detection methods like DPM\n and R-CNN by a wide margin. Since YOLO is highly gen\neralizable it is less likely to break down when applied to\n new domains or unexpected inputs.\n YOLOstilllags behind state-of-the-art detection systems\n in accuracy. While it can quickly identify objects in im\nages it struggles to precisely localize some objects, espe\ncially small ones. We examine these tradeoffs further in our\n experiments.\n All of our training and testing code is open source. A\n variety of pretrained models are also available to download.\n 2. Unified Detection\n We unify the separate components of object detection\n into a single neural network. Our network uses features\n from the entire image to predict each bounding box. It also\n predicts all bounding boxes across all classes for an im\nage simultaneously. This means our network reasons glob\nally about the full image and all the objects in the image.\n The YOLO design enables end-to-end training and real\ntime speeds while maintaining high average precision.\n Our system divides the input image into an S S grid.\n If the center of an object falls into a grid cell, that grid cell\n is responsible for detecting that object.\n Each grid cell predicts B bounding boxes and confidence\n scores for those boxes. These confidence scores reflect how\n confident the model is that the box contains an object and\n also how accurate it thinks the box is that it predicts. For\nmally we define confidence as Pr(Object) IOUtruth\n pred . If no\n object exists in that cell, the confidence scores should be\n zero. Otherwise we want the confidence score to equal the\n intersection over union (IOU) between the predicted box\n and the ground truth.\n Each bounding box consists of 5 predictions: x, y, w, h,\n and confidence. The (xy) coordinates represent the center\n of the box relative to the bounds of the grid cell. The width\n and height are predicted relative to the whole image. Finally\n the confidence prediction represents the IOU between the\n predicted box and any ground truth box.\n Each grid cell also predicts C conditional class proba\nbilities, Pr(ClassiObject). These probabilities are condi\ntioned on the grid cell containing an object. We only predict\n one set of class probabilities per grid cell, regardless of the\n number of boxes B.\n At test time we multiply the conditional class probabili\nties and the individual box confidence predictions,\n Pr(ClassiObject) Pr(Object) IOU truth\n pred = Pr(Classi) IOU truth\n pred\n (1)\n which gives us class-specific confidence scores for each\n box. These scores encode both the probability of that class\n appearing in the box and how well the predicted box fits the\n object.\n S × S grid on input\n Bounding boxes + confidence\n Class probability map\n Final detections\n Figure 2: The Model. Our system models detection as a regres\nsion problem. It divides the image into an S S grid and for each\n grid cell predicts B bounding boxes, confidence for those boxes,\n and C class probabilities. These predictions are encoded as an\n S S (B 5+C)tensor.\n For evaluating YOLO on PASCAL VOC, we use S = 7,\n B =2. PASCAL VOC has 20 labelled classes so C = 20.\n Our final prediction is a 7 7 30 tensor.\n 2.1. Network Design\n We implement this model as a convolutional neural net\nwork and evaluate it on the PASCAL VOC detection dataset\n [9]. The initial convolutional layers of the network extract\n features from the image while the fully connected layers\n predict the output probabilities and coordinates.\n Our network architecture is inspired by the GoogLeNet\n model for image classification [34]. Our network has 24\n convolutional layers followed by 2 fully connected layers.\n Instead of the inception modules used by GoogLeNet, we\n simply use 1 1reduction layers followed by 3 3 convo\nlutional layers, similar to Lin et al [22]. The full network is\n shown in Figure 3.\n We also train a fast version of YOLO designed to push\n the boundaries of fast object detection. Fast YOLO uses a\n neural network with fewer convolutional layers (9 instead\n of 24) and fewer filters in those layers. Other than the size\n of the network, all training and testing parameters are the\n same between YOLO and Fast YOLO.\n448\n 7\n 7\n 448\n 112\n 3\n 3\n 3\n 112\n 192\n Conv. Layer\n 7x7x64-s-2\n Maxpool Layer\n 2x2-s-2\n 56\n 3\n 3\n 56\n Conv. Layer\n 3x3x192\n Maxpool Layer\n 2x2-s-2\n 256\n 28\n 3\n 3\n 28\n Conv. Layers\n 1x1x128\n 3x3x256\n 1x1x256\n 3x3x512\n Maxpool Layer\n 2x2-s-2\n 512\n 14\n 3\n 3\n 14\n Conv. Layers\n 1x1x256\n 3x3x512\n 1x1x512\n 1024\n 7\n 3\n 3\n 7\n 1024\n Conv. Layers\n 1x1x512\n 3x3x1024\n 3x3x1024\n 3x3x1024-s-2\n 7\n 7\n Conv. Layers\n 3x3x1024\n 3x3x1024\n 1024\n 4096\n Conn. Layer\n 7\n 7\n 30\n Conn. Layer\n } \n× 4\n 3x3x1024\n Maxpool Layer\n 2x2-s-2\n } \n× 2\n Figure 3: The Architecture. Our detection network has 24 convolutional layers followed by 2 fully connected layers. Alternating 1 1\n convolutional layers reduce the features space from preceding layers. We pretrain the convolutional layers on the ImageNet classification\n task at half the resolution (224 224 input image) and then double the resolution for detection.\n The final output of our network is the 7 7 30 tensor\n of predictions.\n 2.2. Training\n We pretrain our convolutional layers on the ImageNet\n 1000-class competition dataset [30]. For pretraining we use\n the first 20 convolutional layers from Figure 3 followed by a\n average-pooling layer and a fully connected layer. We train\n this network for approximately a week and achieve a single\n crop top-5 accuracy of 88% on the ImageNet 2012 valida\ntion set, comparable to the GoogLeNet models in Caffe’s\n Model Zoo [24]. We use the Darknet framework for all\n training and inference [26].\n We then convert the model to perform detection. Ren et\n al. show that adding both convolutional and connected lay\ners to pretrained networks can improve performance [29].\n Following their example, we add four convolutional lay\ners and two fully connected layers with randomly initialized\n weights. Detection often requires fine-grained visual infor\nmation so we increase the input resolution of the network\n from 224 224to 448 448.\n Our final layer predicts both class probabilities and\n bounding box coordinates. We normalize the bounding box\n width and height by the image width and height so that they\n fall between 0 and 1. We parametrize the bounding box x\n and y coordinates to be offsets of a particular grid cell loca\ntion so they are also bounded between 0 and 1.\n Weuse alinear activation function for the final layer and\n all other layers use the following leaky rectified linear acti\nvation:\n (x) = x\n if x > 0\n 01x otherwise\n (2)\n model. We use sum-squared error because it is easy to op\ntimize, however it does not perfectly align with our goal of\n maximizing average precision. It weights localization er\nror equally with classification error which may not be ideal.\n Also, in every image many grid cells do not contain any\n object. This pushes the “confidence” scores of those cells\n towards zero, often overpowering the gradient from cells\n that do contain objects. This can lead to model instability,\n causing training to diverge early on.\n To remedy this, we increase the loss from bounding box\n coordinate predictions and decrease the loss from confi\ndence predictions for boxes that don’t contain objects. We\n use two parameters, coord and noobj to accomplish this. We\n set coord = 5 and noobj = 5.\n Sum-squared error also equally weights errors in large\n boxes and small boxes. Our error metric should reflect that\n small deviations in large boxes matter less than in small\n boxes. To partially address this we predict the square root\n of the bounding box width and height instead of the width\n and height directly.\n YOLO predicts multiple bounding boxes per grid cell.\n At training time we only want one bounding box predictor\n to be responsible for each object. We assign one predictor\n to be “responsible” for predicting an object based on which\n prediction has the highest current IOU with the ground\n truth. This leads to specialization between the bounding box\n predictors. Each predictor gets better at predicting certain\n sizes, aspect ratios, or classes of object, improving overall\n recall.\n During training we optimize the following, multi-part\n We optimize for sum-squared error in the output of our\nlossfunction:\n coord\n S2\n i=0\n B\n j=0\n 1obj\n ij (xi xi)2+(yi yi)2\n + coord\n S2\n i=0\n B\n j=0\n 1obj\n ij wi wi\n 2+ hi hi\n 2\n +\n S2\n i=0\n B\n j=0\n 1obj\n ij Ci Ci\n 2\n + noobj\n S2\n i=0\n B\n j=0\n 1noobj\n ij Ci Ci\n 2\n +\n S2\n i=0\n 1obj\n i\n c classes\n (pi(c) pi(c))2 (3)\n where1obj\n i denotes ifobjectappears incell iand1obj\n ij de\nnotes that thejthboundingboxpredictor incell i is“re\nsponsible”forthatprediction.\n Notethat thelossfunctiononlypenalizesclassification\n errorifanobjectispresentinthatgridcell(hencethecon\nditionalclassprobabilitydiscussedearlier). Italsoonlype\nnalizesboundingboxcoordinateerror if thatpredictor is\n “responsible”forthegroundtruthbox(i.e. hasthehighest\n IOUofanypredictorinthatgridcell).\n Wetrainthenetworkforabout135epochsonthetrain\ningandvalidationdatasetsfromPASCALVOC2007and\n 2012.Whentestingon2012wealsoincludetheVOC2007\n testdatafor training. Throughout trainingweuseabatch\n sizeof64,amomentumof09andadecayof00005.\n Our learningrateschedule isas follows: For thefirst\n epochsweslowlyraisethelearningratefrom10 3to10 2.\n Ifwestartatahighlearningrateourmodeloftendiverges\n duetounstablegradients.Wecontinuetrainingwith10 2\n for75epochs, then10 3 for30epochs, andfinally10 4\n for30epochs.\n Toavoidoverfittingweusedropoutandextensivedata\n augmentation.Adropout layerwithrate=.5afterthefirst\n connectedlayerpreventsco-adaptationbetweenlayers[18].\n For dataaugmentationwe introduce randomscalingand\n translationsofupto20%of theoriginal imagesize. We\n alsorandomlyadjusttheexposureandsaturationoftheim\nagebyuptoafactorof15intheHSVcolorspace.\n 2.3.Inference\n Justlikeintraining,predictingdetectionsforatestimage\n onlyrequiresonenetworkevaluation.OnPASCALVOCthe\n networkpredicts98boundingboxesper imageandclass\n probabilitiesforeachbox. YOLOisextremelyfastat test\n timesinceitonlyrequiresasinglenetworkevaluation,un\nlikeclassifier-basedmethods.\n Thegriddesignenforcesspatialdiversityinthebound\ningboxpredictions. Often it isclearwhichgridcell an\n objectfallsintoandthenetworkonlypredictsoneboxfor\n eachobject. However, somelargeobjectsorobjectsnear\n theborderofmultiplecellscanbewelllocalizedbymulti\nplecells.Non-maximalsuppressioncanbeusedtofixthese\n multipledetections.Whilenotcritical toperformanceasit\n isforR-CNNorDPM,non-maximal suppressionadds2\n3%inmAP.\n 2.4.LimitationsofYOLO\n YOLOimposesstrongspatial constraintsonbounding\n boxpredictionssinceeachgridcellonlypredictstwoboxes\n andcanonlyhaveoneclass. Thisspatial constraint lim\nits thenumberofnearbyobjects thatourmodel canpre\ndict.Ourmodelstruggleswithsmallobjectsthatappearin\n groups,suchasflocksofbirds.\n Sinceourmodel learnstopredictboundingboxesfrom\n data, itstrugglestogeneralizetoobjectsinneworunusual\n aspect ratiosorconfigurations. Ourmodelalsousesrela\ntivelycoarsefeaturesforpredictingboundingboxessince\n ourarchitecturehasmultipledownsamplinglayersfromthe\n inputimage.\n Finally,whilewetrainonalossfunctionthatapproxi\nmatesdetectionperformance,ourlossfunctiontreatserrors\n thesame insmallboundingboxesversus largebounding\n boxes.Asmallerrorinalargeboxisgenerallybenignbuta\n smallerrorinasmallboxhasamuchgreatereffectonIOU.\n Ourmainsourceoferrorisincorrectlocalizations.\n 3.ComparisontoOtherDetectionSystems\n Objectdetectionisacoreproblemincomputervision.\n Detectionpipelinesgenerallystart byextractinga set of\n robust features frominput images (Haar [25], SIFT[23],\n HOG[4], convolutional features [6]). Then, classifiers\n [36, 21, 13, 10]or localizers [1, 32]areusedtoidentify\n objectsinthefeaturespace. Theseclassifiersor localizers\n areruneitherinslidingwindowfashionoverthewholeim\nageoronsomesubsetofregionsintheimage[35,15,39].\n WecomparetheYOLOdetectionsystemtoseveraltopde\ntectionframeworks,highlightingkeysimilaritiesanddiffer\nences.\n Deformablepartsmodels. Deformablepartsmodels\n (DPM)useaslidingwindowapproachtoobjectdetection\n [10].DPMusesadisjointpipelinetoextractstaticfeatures,\n classifyregions, predictboundingboxes forhighscoring\n regions,etc.Oursystemreplacesallofthesedisparateparts\n withasingleconvolutionalneuralnetwork. Thenetwork\n performsfeatureextraction,boundingboxprediction,non\nmaximalsuppression,andcontextualreasoningallconcur\nrently. Insteadofstaticfeatures, thenetworktrainsthefea\nturesin-lineandoptimizesthemforthedetectiontask.Our\n unifiedarchitectureleadstoafaster,moreaccuratemodel\n thanDPM.\n R-CNN.R-CNNanditsvariantsuseregionproposalsin\nsteadofslidingwindowstofindobjectsinimages.Selective\nSearch [35] generates potential bounding boxes, a convolu\ntional network extracts features, an SVM scores the boxes, a\n linear model adjusts the bounding boxes, and non-max sup\npression eliminates duplicate detections. Each stage of this\n complex pipeline must be precisely tuned independently\n and the resulting system is very slow, taking more than 40\n seconds per image at test time [14].\n YOLO shares some similarities with R-CNN. Each grid\n cell proposes potential bounding boxes and scores those\n boxes using convolutional features. However, our system\n puts spatial constraints on the grid cell proposals which\n helps mitigate multiple detections of the same object. Our\n system also proposes far fewer bounding boxes, only 98\n per image compared to about 2000 from Selective Search.\n Finally, our system combines these individual components\n into a single, jointly optimized model.\n Other Fast Detectors Fast and Faster R-CNN focus on\n speeding up the R-CNN framework by sharing computa\ntion and using neural networks to propose regions instead\n of Selective Search [14] [28]. While they offer speed and\n accuracy improvements over R-CNN, both still fall short of\n real-time performance.\n Many research efforts focus on speeding up the DPM\n pipeline [31] [38] [5]. They speed up HOG computation,\n use cascades, and push computation to GPUs. However,\n only 30Hz DPM [31] actually runs in real-time.\n Instead of trying to optimize individual components of\n a large detection pipeline, YOLO throws out the pipeline\n entirely and is fast by design.\n Detectors for single classes like faces or people can be\n highly optimized since they have to deal with much less\n variation [37]. YOLO is a general purpose detector that\n learns to detect a variety of objects simultaneously.\n Deep MultiBox. Unlike R-CNN, Szegedy et al. train a\n convolutional neural network to predict regions of interest\n [8] instead of using Selective Search. MultiBox can also\n perform single object detection by replacing the confidence\n prediction with a single class prediction. However, Multi\nBox cannot perform general object detection and is still just\n a piece in a larger detection pipeline, requiring further im\nage patch classification. Both YOLO and MultiBox use a\n convolutional network to predict bounding boxes in an im\nage but YOLO is a complete detection system.\n OverFeat. Sermanet et al. train a convolutional neural\n network to perform localization and adapt that localizer to\n perform detection [32]. OverFeat efficiently performs slid\ning window detection but it is still a disjoint system. Over\nFeat optimizes for localization, not detection performance.\n Like DPM, the localizer only sees local information when\n making a prediction. OverFeat cannot reason about global\n context and thus requires significant post-processing to pro\nduce coherent detections.\n MultiGrasp. Our work is similar in design to work on\n grasp detection by Redmon et al [27]. Our grid approach to\n bounding box prediction is based on the MultiGrasp system\n for regression to grasps. However, grasp detection is a much\n simpler task than object detection. MultiGrasp only needs\n to predict a single graspable region for an image containing\n one object. It doesn’t have to estimate the size, location,\n or boundaries of the object or predict it’s class, only find a\n region suitable for grasping. YOLO predicts both bounding\n boxes and class probabilities for multiple objects of multi\nple classes in an image.\n 4. Experiments\n First we compare YOLO with other real-time detection\n systems on PASCAL VOC 2007. To understand the differ\nences between YOLO and R-CNN variants we explore the\n errors on VOC 2007 made by YOLO and Fast R-CNN, one\n of the highest performing versions of R-CNN [14]. Based\n on the different error profiles we show that YOLO can be\n used to rescore Fast R-CNN detections and reduce the er\nrors from background false positives, giving a significant\n performance boost. We also present VOC 2012 results and\n compare mAP to current state-of-the-art methods. Finally,\n weshowthat YOLOgeneralizes to new domains better than\n other detectors on two artwork datasets.\n 4.1. Comparison to Other Real-Time Systems\n Many research efforts in object detection focus on mak\ning standard detection pipelines fast. [5] [38] [31] [14] [17]\n [28] However, only Sadeghi et al. actually produce a de\ntection system that runs in real-time (30 frames per second\n or better) [31]. We compare YOLO to their GPU imple\nmentation of DPM which runs either at 30Hz or 100Hz.\n While the other efforts don’t reach the real-time milestone\n we also compare their relative mAP and speed to examine\n the accuracy-performance tradeoffs available in object de\ntection systems.\n Fast YOLO is the fastest object detection method on\n PASCAL; as far as we know, it is the fastest extant object\n detector. With 527% mAP, it is more than twice as accurate\n as prior work on real-time detection. YOLO pushes mAP to\n 634%while still maintaining real-time performance.\n Wealso train YOLO using VGG-16. This model is more\n accurate but also significantly slower than YOLO. It is use\nful for comparison to other detection systems that rely on\n VGG-16 but since it is slower than real-time the rest of the\n paper focuses on our faster models.\n Fastest DPM effectively speeds up DPM without sacri\nf\n icing much mAP but it still misses real-time performance\n by a factor of 2 [38]. It also is limited by DPM’s relatively\n low accuracy on detection compared to neural network ap\nproaches.\n R-CNN minus R replaces Selective Search with static\n bounding box proposals [20]. While it is much faster than\nReal-TimeDetectors Train mAP FPS\n 100HzDPM[31] 2007 16.0 100\n 30HzDPM[31] 2007 26.1 30\n FastYOLO 2007+2012 52.7 155\n YOLO 2007+2012 63.4 45\n LessThanReal-Time\n FastestDPM[38] 2007 30.4 15\n R-CNNMinusR[20] 2007 53.5 6\n FastR-CNN[14] 2007+2012 70.0 0.5\n FasterR-CNNVGG-16[28] 2007+2012 73.2 7\n FasterR-CNNZF[28] 2007+2012 62.1 18\n YOLOVGG-16 2007+2012 66.4 21\n Table1:Real-TimeSystemsonPASCALVOC2007.Compar\ningtheperformanceandspeedof fastdetectors. FastYOLOis\n thefastestdetectoronrecordforPASCALVOCdetectionandis\n still twiceasaccurateasanyother real-timedetector. YOLOis\n 10mAPmoreaccuratethanthefastversionwhilestillwellabove\n real-timeinspeed.\n R-CNN,itstillfallsshortofreal-timeandtakesasignificant\n accuracyhitfromnothavinggoodproposals.\n FastR-CNNspeedsuptheclassificationstageofR-CNN\n but itstillreliesonselectivesearchwhichcantakearound\n 2secondsper imagetogenerateboundingboxproposals.\n ThusithashighmAPbutat05fpsit isstillfarfromreal\ntime.\n TherecentFasterR-CNNreplacesselectivesearchwith\n aneural network toproposeboundingboxes, similar to\n Szegedyetal. [8] Inour tests, theirmostaccuratemodel\n achieves7fpswhileasmaller, lessaccurateone runsat\n 18fps. TheVGG-16versionofFasterR-CNNis10mAP\n higherbut isalso6timesslower thanYOLO.TheZeiler\nFergusFasterR-CNNisonly2.5timesslowerthanYOLO\n butisalsolessaccurate.\n 4.2.VOC2007ErrorAnalysis\n TofurtherexaminethedifferencesbetweenYOLOand\n state-of-the-artdetectors,welookatadetailedbreakdown\n of resultsonVOC2007. WecompareYOLOtoFastR\nCNNsinceFastR-CNNisoneof thehighestperforming\n detectorsonPASCALandit’sdetectionsarepubliclyavail\nable.\n WeusethemethodologyandtoolsofHoiemetal. [19]\n Foreachcategoryat test timewelookat thetopNpredic\ntionsforthatcategory. Eachpredictioniseithercorrector\n itisclassifiedbasedonthetypeoferror:\n Correct:correctclassandIOU>5\n Localization:correctclass, 1<IOU<5\n Similar:classissimilar,IOU>1\n Correct: 71.6% Correct: 65.5%\n Loc: 8.6%\n Sim: 4.3%\n Other: 1.9%\n Background: 13.6%\n Loc: 19.0%\n Sim: 6.75%\n Other: 4.0%\n Background: 4.75%\n Fast R-CNN YOLO\n Figure4: ErrorAnalysis: FastR-CNNvs. YOLOThese\n chartsshowthepercentageoflocalizationandbackgrounderrors\n inthetopNdetectionsforvariouscategories(N=#objectsinthat\n category).\n Other:classiswrong,IOU>1\n Background: IOU<1foranyobject\n Figure4showsthebreakdownofeacherror typeaver\nagedacrossall20classes.\n YOLOstrugglestolocalizeobjectscorrectly. Localiza\ntionerrorsaccountformoreofYOLO’serrorsthanallother\n sourcescombined. FastR-CNNmakesmuchfewer local\nizationerrorsbut farmorebackgrounderrors. 13.6%of\n it’stopdetectionsarefalsepositivesthatdon’tcontainany\n objects. FastR-CNNisalmost3xmore likelytopredict\n backgrounddetectionsthanYOLO.\n 4.3.CombiningFastR-CNNandYOLO\n YOLOmakesfarfewerbackgroundmistakesthanFast\n R-CNN.ByusingYOLOtoeliminatebackgrounddetec\ntionsfromFastR-CNNwegetasignificantboostinperfor\nmance. ForeveryboundingboxthatR-CNNpredictswe\n checktoseeifYOLOpredictsasimilarbox. Ifitdoes,we\n give thatpredictionaboostbasedontheprobabilitypre\ndictedbyYOLOandtheoverlapbetweenthetwoboxes.\n ThebestFastR-CNNmodelachievesamAPof71.8%\n ontheVOC2007testset.WhencombinedwithYOLO,its\n mAP Combined Gain\n FastR-CNN 71.8-\nFastR-CNN(2007data) 66.9 72.4 .6\n FastR-CNN(VGG-M) 59.2 72.4 .6\n FastR-CNN(CaffeNet) 57.1 72.1 .3\n YOLO 63.4 75.0 3.2\n Table2:ModelcombinationexperimentsonVOC2007.We\n examinetheeffectofcombiningvariousmodelswiththebestver\nsionofFastR-CNN.OtherversionsofFastR-CNNprovideonly\n asmallbenefitwhileYOLOprovidesasignificantperformance\n boost.\nVOC2012test mAP aero bike bird boat bottle bus car cat chair cow table dog horse mbikepersonplant sheep sofa train tv\n MR CNN MORE DATA[11] 73.9 85.5 82.9 76.6 57.8 62.7 79.4 77.2 86.6 55.0 79.1 62.2 87.0 83.4 84.7 78.9 45.3 73.4 65.8 80.3 74.0\n HyperNet VGG\n HyperNet SP\n 71.4 84.2 78.5 73.6 55.6 53.7 78.7 79.8 87.7 49.6 74.9 52.1 86.0 81.7 83.3 81.8 48.6 73.5 59.4 79.9 65.7\n 71.3 84.1 78.3 73.3 55.5 53.6 78.6 79.6 87.5 49.5 74.9 52.1 85.6 81.6 83.2 81.6 48.4 73.2 59.3 79.7 65.6\n Fast R-CNN + YOLO\n 70.7\n MR CNN\n S\n 83.4\n 78.5\n 73.5\n 55.8\n 43.4\n 79.1\n 73.1\n 89.4\n 49.4\n 75.5\n 57.0\n 87.5\n 80.9\n 81.0\n 74.7\n 41.8\n 71.5\n 68.5\n 82.1\n 67.2\n CNN[11] 70.7 85.0 79.6 71.5 55.3 57.7 76.0 73.9 84.6 50.5 74.3 61.7 85.5 79.9 81.7 76.4 41.0 69.0 61.2 77.7 72.1\n Faster R-CNN [28] 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\n DEEP ENS COCO 70.1 84.0 79.4 71.6 51.9 51.1 74.1 72.1 88.6 48.3 73.4 57.8 86.1 80.0 80.7 70.4 46.6 69.6 68.8 75.9 71.4\n NoC[29] 68.8 82.8 79.0 71.6 52.3 53.7 74.1 69.0 84.9 46.9 74.3 53.1 85.0 81.3 79.5 72.2 38.9 72.4 59.5 76.7 68.1\n Fast R-CNN [14] 68.4 82.3 78.4 70.8 52.3 38.7 77.8 71.6 89.3 44.2 73.0 55.0 87.5 80.5 80.8 72.0 35.1 68.3 65.7 80.4 64.2\n UMICH FGS STRUCT 66.4 82.9 76.1 64.1 44.6 49.4 70.3 71.2 84.6 42.7 68.6 55.8 82.7 77.1 79.9 68.7 41.4 69.0 60.0 72.0 66.2\n NUS NIN C2000[7] 63.8 80.2 73.8 61.9 43.7 43.0 70.3 67.6 80.7 41.9 69.7 51.7 78.2 75.2 76.9 65.1 38.6 68.3 58.0 68.7 63.3\n BabyLearning [7] 63.2 78.0 74.2 61.3 45.7 42.7 68.2 66.8 80.2 40.6 70.0 49.8 79.0 74.5 77.9 64.0 35.3 67.9 55.7 68.7 62.6\n NUS NIN 62.4 77.9 73.1 62.6 39.5 43.3 69.1 66.4 78.9 39.1 68.1 50.0 77.2 71.3 76.1 64.7 38.4 66.9 56.2 66.9 62.7\n R-CNN VGGBB[13] 62.4 79.6 72.7 61.9 41.2 41.9 65.9 66.4 84.6 38.5 67.2 46.7 82.0 74.8 76.0 65.2 35.6 65.4 54.2 67.4 60.3\n R-CNN VGG[13] 59.2 76.8 70.9 56.6 37.5 36.9 62.9 63.6 81.1 35.7 64.3 43.9 80.4 71.6 74.0 60.0 30.8 63.4 52.0 63.5 58.7\n YOLO 57.9 77.0 67.2\n 57.7\n 38.3\n 22.7\n 68.3\n 55.9\n 81.4\n 36.2\n 60.8\n 48.5\n 77.2\n 72.3\n 71.3\n 63.5\n 28.9\n 50.8\n Feature Edit [33] 56.3 74.6 69.1 54.4 39.1 33.1 65.2 62.7 69.7 30.8 56.0 44.6 70.0 64.4 71.1 60.2 33.3 61.3 46.4 61.7 57.8\n R-CNN BB[13] 53.3 71.8 65.8 52.0 34.1 32.6 59.6 60.0 69.8 27.6 52.0 41.7 69.6 61.3 68.3 57.8 29.6 57.8 40.9 59.3 54.1\n SDS [16] 50.7 69.7 58.4 48.5 28.3 28.8 61.3 57.5 70.8 24.1 50.7 35.9 64.9 59.1 65.8 57.1 26.0 58.8 38.6 58.9 50.7\n R-CNN [13] 49.6 68.1 63.8 46.1 29.4 27.9 56.6 57.0 65.9 26.5 48.7 39.5 66.2 57.3 65.4 53.2 26.2 54.5 38.1 50.6 51.6\n 52.2\n 54.8\n 73.9\n Table 3: PASCAL VOC 2012 Leaderboard. YOLO compared with the full comp4 (outside data allowed) public leaderboard as of\n November 6th, 2015. Mean average precision and per-class average precision are shown for a variety of detection methods. YOLO is the\n only real-time detector. Fast R-CNN + YOLO is the forth highest scoring method, with a 2.3% boost over Fast R-CNN.\n mAPincreases by 3.2% to 75.0%. We also tried combining\n the top Fast R-CNN model with several other versions of\n Fast R-CNN. Those ensembles produced small increases in\n mAPbetween .3 and .6%, see Table 2 for details.\n The boost from YOLO is not simply a byproduct of\n model ensembling since there is little benefit from combin\ning different versions of Fast R-CNN. Rather, it is precisely\n because YOLO makes different kinds of mistakes at test\n time that it is so effective at boosting Fast R-CNN’s per\nformance.\n Unfortunately, this combination doesn’t benefit from the\n speed of YOLO since we run each model seperately and\n then combine the results. However, since YOLO is so fast\n it doesn’t add any significant computational time compared\n to Fast R-CNN.\n 4.4. VOC 2012 Results\n On the VOC 2012 test set, YOLO scores 57.9% mAP.\n This is lower than the current state of the art, closer to\n the original R-CNN using VGG-16, see Table 3. Our sys\ntem struggles with small objects compared to its closest\n competitors. On categories like bottle, sheep, and\n tv/monitor YOLO scores 8-10% lower than R-CNN or\n Feature Edit. However, on other categories like cat and\n train YOLOachieves higher performance.\n Our combined Fast R-CNN + YOLOmodelisoneof the\n highest performing detection methods. Fast R-CNN gets\n a 2.3% improvement from the combination with YOLO,\n boosting it 5 spots up on the public leaderboard.\n 4.5. Generalizability: Person Detection in Artwork\n Academic datasets for object detection draw the training\n and testing data from the same distribution. In real-world\n applications it is hard to predict all possible use cases and\n the test data can diverge from what the system has seen be\nfore [3]. We compare YOLO to other detection systems on\n the Picasso Dataset [12] and the People-Art Dataset [3], two\n datasets for testing person detection on artwork.\n Figure 5 shows comparative performance between\n YOLOandother detection methods. For reference, we give\n VOC 2007 detection AP on person where all models are\n trained only on VOC 2007 data. On Picasso models are\n trained on VOC 2012 while on People-Art they are trained\n on VOC2010.\n R-CNN has high AP on VOC 2007. However, R-CNN\n drops off considerably when applied to artwork. R-CNN\n uses Selective Search for bounding box proposals which is\n tuned for natural images. The classifier step in R-CNN only\n sees small regions and needs good proposals.\n DPM maintains its AP well when applied to artwork.\n Prior work theorizes that DPM performs well because it has\n strong spatial models of the shape and layout of objects.\n Though DPM doesn’t degrade as much as R-CNN, it starts\n from a lower AP.\n YOLO has good performance on VOC 2007 and its AP\n degrades less than other methods when applied to artwork.\n Like DPM, YOLO models the size and shape of objects,\n as well as relationships between objects and where objects\n commonly appear. Artwork and natural images are very\n different on a pixel level but they are similar in terms of\n the size and shape of objects, thus YOLO can still predict\n good bounding boxes and detections.\n 5. Real-Time Detection In The Wild\n YOLOis a fast, accurate object detector, making it ideal\n for computer vision applications. We connect YOLO to a\n webcam and verify that it maintains real-time performance,\nHumans\n YOLO\n DPM\n Poselets\n RCNN\n D&T\n (a) Picasso Dataset precision-recall curves.\n Picasso\n VOC2007\n AP AP BestF1\n People-Art\n AP\n YOLO\n R-CNN\n DPM\n Poselets [2]\n D&T[4]\n 59.2 53.3\n 54.2 10.4\n 43.2 37.8\n 36.5 17.8\n1.9\n 0.590\n 0.226\n 0.458\n 0.271\n 0.051\n 45\n 26\n 32\n (b) Quantitative results on the VOC 2007, Picasso, and People-Art Datasets.\n The Picasso Dataset evaluates on both AP and best F1 score.\n Figure 5: Generalization results on Picasso and People-Art datasets.\n Figure 6: Qualitative Results. YOLO running on sample artwork and natural images from the internet. It is mostly accurate although it\n does think one person is an airplane.\n including the time to fetch images from the camera and dis\nplay the detections.\n The resulting system is interactive and engaging. While\n YOLO processes images individually, when attached to a\n webcam it functions like a tracking system, detecting ob\njects as they move around and change in appearance. A\n demo of the system and the source code can be found on\n our project website: http://pjreddie.com/yolo/.\n 6. Conclusion\n We introduce YOLO, a unified model for object detec\ntion. Our model is simple to construct and can be trained\n directly on full images. Unlike classifier-based approaches,\n YOLOistrainedonalossfunction that directly corresponds\n to detection performance and the entire model is trained\n jointly.\n Fast YOLO is the fastest general-purpose object detec\ntor in the literature and YOLO pushes the state-of-the-art in\n real-time object detection. YOLO also generalizes well to\n new domains making it ideal for applications that rely on\n fast, robust object detection.\n Acknowledgements: This work is partially supported by\n ONRN00014-13-1-0720, NSFIIS-1338054, and The Allen\n Distinguished Investigator Award.\nReferences\n [1] M. B. Blaschko and C. H. Lampert. Learning to localize ob\njects with structured output regression. In Computer Vision\nECCV2008, pages 2–15. Springer, 2008. 4\n [2] L. Bourdev and J. Malik. Poselets: Body part detectors\n trained using 3d human pose annotations. In International\n Conference on Computer Vision (ICCV), 2009. 8\n [3] H. Cai, Q. Wu, T. Corradi, and P. Hall. The cross\ndepiction problem: Computer vision algorithms for recog\nnising objects in artwork and in photographs. arXiv preprint\n arXiv:1505.00110, 2015. 7\n [4] N. Dalal and B. Triggs. Histograms of oriented gradients for\n human detection. In Computer Vision and Pattern Recogni\ntion, 2005. CVPR 2005. IEEE Computer Society Conference\n on, volume 1, pages 886–893. IEEE, 2005. 4, 8\n [5] T. Dean, M. Ruzon, M. Segal, J. Shlens, S. Vijaya\nnarasimhan, J. Yagnik, et al. Fast, accurate detection of\n 100,000 object classes on a single machine. In Computer\n Vision and Pattern Recognition (CVPR), 2013 IEEE Confer\nence on, pages 1814–1821. IEEE, 2013. 5\n [6] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang,\n E. Tzeng, and T. Darrell. Decaf: A deep convolutional acti\nvation feature for generic visual recognition. arXiv preprint\n arXiv:1310.1531, 2013. 4\n [7] J. Dong, Q. Chen, S. Yan, and A. Yuille. Towards unified\n object detection and semantic segmentation. In Computer\n Vision–ECCV 2014, pages 299–314. Springer, 2014. 7\n [8] D. Erhan, C. Szegedy, A. Toshev, and D. Anguelov. Scalable\n object detection using deep neural networks. In Computer\n Vision and Pattern Recognition (CVPR), 2014 IEEE Confer\nence on, pages 2155–2162. IEEE, 2014. 5, 6\n [9] M. Everingham, S. M. A. Eslami, L. Van Gool, C. K. I.\n Williams, J. Winn, and A. Zisserman. The pascal visual ob\nject classes challenge: A retrospective. International Journal\n of Computer Vision, 111(1):98–136, Jan. 2015. 2\n [10] P.F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ra\nmanan. Object detection with discriminatively trained part\n based models. IEEE Transactions on Pattern Analysis and\n Machine Intelligence, 32(9):1627–1645, 2010. 1, 4\n [11] S. Gidaris and N. Komodakis. Object detection via a multi\nregion & semantic segmentation-aware CNN model. CoRR,\n abs/1505.01749, 2015. 7\n [12] S. Ginosar, D. Haas, T. Brown, and J. Malik. Detecting peo\nple in cubist art. In Computer Vision-ECCV 2014 Workshops,\n pages 101–116. Springer, 2014. 7\n [13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea\nture hierarchies for accurate object detection and semantic\n segmentation. In Computer Vision and Pattern Recognition\n (CVPR), 2014 IEEE Conference on, pages 580–587. IEEE,\n 2014. 1, 4, 7\n [14] R. B. Girshick. Fast R-CNN. CoRR, abs/1504.08083, 2015.\n 2, 5, 6, 7\n [15] S. Gould, T. Gao, and D. Koller. Region-based segmenta\ntion and object detection. In Advances in neural information\n processing systems, pages 655–663, 2009. 4\n [16] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Simul\ntaneous detection and segmentation. In Computer Vision\nECCV2014, pages 297–312. Springer, 2014. 7\n [17] K.He,X.Zhang,S.Ren,andJ.Sun. Spatialpyramidpooling\n in deep convolutional networks for visual recognition. arXiv\n preprint arXiv:1406.4729, 2014. 5\n [18] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\n R. R. Salakhutdinov. Improving neural networks by pre\nventing co-adaptation of feature detectors. arXiv preprint\n arXiv:1207.0580, 2012. 4\n [19] D.Hoiem,Y.Chodpathumwan,andQ.Dai. Diagnosingerror\n in object detectors. In Computer Vision–ECCV 2012, pages\n 340–353. Springer, 2012. 6\n [20] K. Lenc and A. Vedaldi. R-cnn minus r. arXiv preprint\n arXiv:1506.06981, 2015. 5, 6\n [21] R. Lienhart and J. Maydt. An extended set of haar-like fea\ntures for rapid object detection. In Image Processing. 2002.\n Proceedings. 2002 International Conference on, volume 1,\n pages I–900. IEEE, 2002. 4\n [22] M. Lin, Q. Chen, and S. Yan. Network in network. CoRR,\n abs/1312.4400, 2013. 2\n [23] D. G. Lowe. Object recognition from local scale-invariant\n features. In Computer vision, 1999. The proceedings of the\n seventh IEEE international conference on, volume 2, pages\n 1150–1157. Ieee, 1999. 4\n [24] D. Mishkin.\n val.\n Models accuracy on imagenet 2012\n https://github.com/BVLC/caffe/wiki/\n Models-accuracy-on-ImageNet-2012-val. Ac\ncessed: 2015-10-2. 3\n [25] C. P. Papageorgiou, M. Oren, and T. Poggio. A general\n framework for object detection. In Computer vision, 1998.\n sixth international conference on, pages 555–562. IEEE,\n 1998. 4\n [26] J. Redmon. Darknet: Open source neural networks in c.\n http://pjreddie.com/darknet/, 2013–2016. 3\n [27] J. RedmonandA.Angelova. Real-timegraspdetection using\n convolutional neural networks. CoRR, abs/1412.3128, 2014.\n 5\n [28] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: To\nwards real-time object detection with region proposal net\nworks. arXiv preprint arXiv:1506.01497, 2015. 5, 6, 7\n [29] S. Ren, K. He, R. B. Girshick, X. Zhang, and J. Sun. Object\n detection networks on convolutional feature maps. CoRR,\n abs/1504.06066, 2015. 3, 7\n [30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,\n S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,\n A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual\n Recognition Challenge. International Journal of Computer\n Vision (IJCV), 2015. 3\n [31] M. A. Sadeghi and D. Forsyth. 30hz object detection with\n dpm v5. In Computer Vision–ECCV 2014, pages 65–79.\n Springer, 2014. 5, 6\n [32] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,\n and Y. LeCun. Overfeat: Integrated recognition, localiza\ntion and detection using convolutional networks. CoRR,\n abs/1312.6229, 2013. 4, 5\n[33] Z.ShenandX.Xue. Domoredropoutsinpool5featuremaps\n for better object detection. arXiv preprint arXiv:1409.6911,\n 2014. 7\n [34] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,\n D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.\n Going deeper with convolutions. CoRR, abs/1409.4842,\n 2014. 2\n [35] J. R. Uijlings, K. E. van de Sande, T. Gevers, and A. W.\n Smeulders. Selective search for object recognition. Inter\nnational journal of computer vision, 104(2):154–171, 2013.\n 4\n [36] P. Viola and M. Jones. Robust real-time object detection.\n International Journal of Computer Vision, 4:34–47, 2001. 4\n [37] P. Viola and M. J. Jones. Robust real-time face detection.\n International journal of computer vision, 57(2):137–154,\n 2004. 5\n [38] J. Yan, Z. Lei, L. Wen, and S. Z. Li. The fastest deformable\n part model for object detection. In Computer Vision and Pat\ntern Recognition (CVPR), 2014 IEEE Conference on, pages\n 2497–2504. IEEE, 2014. 5, 6\n [39] C. L. Zitnick and P. Doll´ar. Edge boxes: Locating object pro\nposals from edges. In Computer Vision–ECCV 2014, pages\n 391–405. Springer, 2014. 4\nYou Only Look Once:\n Unified, Real-Time Object Detection\n Joseph Redmon , Santosh Divvala , Ross Girshick , Ali Farhadi\n University of Washington , Allen Institute for AI , Facebook AI Research\n http://pjreddie.com/yolo/\n Abstract\n arXiv:1506.02640v5  [cs.CV]  9 May 2016\n We present YOLO, a new approach to object detection.\n Prior work onobject detection repurposes classifiers to per\nform detection. Instead, we frame object detection as a re\ngression problem to spatially separated bounding boxes and\n associated class probabilities. A single neural network pre\ndicts bounding boxes and class probabilities directly from\n full images in one evaluation. Since the whole detection\n pipeline is a single network, it can be optimized end-to-end\n directly on detection performance.\n 1. Resize image.\n 2. Run convolutional network.\n 3. Non-max suppression.\n Person: 0.64\n Horse: 0.28\n Dog: 0.30\n Figure 1: The YOLO Detection System. Processing images\n with YOLO is simple and straightforward. Our system (1) resizes\n the input image to 448 448, (2) runs a single convolutional net\nwork on the image, and (3) thresholds the resulting detections by\n the model’s confidence.\n Our unified architecture is extremely fast. Our base\n YOLO model processes images in real-time at 45 frames\n per second. A smaller version of the network, Fast YOLO,\n processes an astounding 155 frames per second while\n still achieving double the mAP of other real-time detec\ntors. Compared to state-of-the-art detection systems, YOLO\n makes more localization errors but is less likely to predict\n false positives on background. Finally, YOLO learns very\n general representations of objects. It outperforms other de\ntection methods, including DPM and R-CNN, when gener\nalizing from natural images to other domains like artwork.\n 1. Introduction\n Humans glance at an image and instantly know what ob\njects are in the image, where they are, and how they inter\nact. The human visual system is fast and accurate, allow\ning us to perform complex tasks like driving with little con\nscious thought. Fast, accurate algorithms for object detec\ntion would allow computers to drive cars without special\nized sensors, enable assistive devices to convey real-time\n scene information to human users, and unlock the potential\n for general purpose, responsive robotic systems.\n Current detection systems repurpose classifiers to per\nform detection. To detect an object, these systems take a\n classifier for that object and evaluate it at various locations\n and scales in a test image. Systems like deformable parts\n models (DPM) use a sliding window approach where the\n classifier is run at evenly spaced locations over the entire\n image [10].\n Morerecent approaches like R-CNN use region proposal\n methods to first generate potential bounding boxes in an im\nage and then run a classifier on these proposed boxes. After\n classification, post-processing is used to refine the bound\ning boxes, eliminate duplicate detections, and rescore the\n boxes based on other objects in the scene [13]. These com\nplex pipelines are slow and hard to optimize because each\n individual component must be trained separately.\n Wereframe object detection as a single regression prob\nlem, straight from image pixels to bounding box coordi\nnates and class probabilities. Using our system, you only\n look once (YOLO) at an image to predict what objects are\n present and where they are.\n YOLO is refreshingly simple: see Figure 1. A sin\ngle convolutional network simultaneously predicts multi\nple bounding boxes and class probabilities for those boxes.\n YOLO trains on full images and directly optimizes detec\ntion performance. This unified model has several benefits\n over traditional methods of object detection.\n First, YOLO is extremely fast. Since we frame detection\n as a regression problem we don’t need a complex pipeline.\n We simply run our neural network on a new image at test\n time to predict detections. Our base network runs at 45\n frames per second with no batch processing on a Titan X\n GPU and a fast version runs at more than 150 fps. This\n means we can process streaming video in real-time with\n less than 25 milliseconds of latency. Furthermore, YOLO\n achieves more than twice the mean average precision of\n other real-time systems. For a demo of our system running\n in real-time on a webcam please see our project webpage:\n http://pjreddie.com/yolo/.\n Second, YOLO reasons globally about the image when\n 1\nmaking predictions. Unlike sliding window and region\n proposal-based techniques, YOLO sees the entire image\n during training and test time so it implicitly encodes contex\ntual information about classes as well as their appearance.\n Fast R-CNN, a top detection method [14], mistakes back\nground patches in an image for objects because it can’t see\n the larger context. YOLO makes less than half the number\n of background errors compared to Fast R-CNN.\n Third, YOLO learns generalizable representations of ob\njects. When trained on natural images and tested on art\nwork, YOLO outperforms top detection methods like DPM\n and R-CNN by a wide margin. Since YOLO is highly gen\neralizable it is less likely to break down when applied to\n new domains or unexpected inputs.\n YOLOstilllags behind state-of-the-art detection systems\n in accuracy. While it can quickly identify objects in im\nages it struggles to precisely localize some objects, espe\ncially small ones. We examine these tradeoffs further in our\n experiments.\n All of our training and testing code is open source. A\n variety of pretrained models are also available to download.\n 2. Unified Detection\n We unify the separate components of object detection\n into a single neural network. Our network uses features\n from the entire image to predict each bounding box. It also\n predicts all bounding boxes across all classes for an im\nage simultaneously. This means our network reasons glob\nally about the full image and all the objects in the image.\n The YOLO design enables end-to-end training and real\ntime speeds while maintaining high average precision.\n Our system divides the input image into an S S grid.\n If the center of an object falls into a grid cell, that grid cell\n is responsible for detecting that object.\n Each grid cell predicts B bounding boxes and confidence\n scores for those boxes. These confidence scores reflect how\n confident the model is that the box contains an object and\n also how accurate it thinks the box is that it predicts. For\nmally we define confidence as Pr(Object) IOUtruth\n pred . If no\n object exists in that cell, the confidence scores should be\n zero. Otherwise we want the confidence score to equal the\n intersection over union (IOU) between the predicted box\n and the ground truth.\n Each bounding box consists of 5 predictions: x, y, w, h,\n and confidence. The (xy) coordinates represent the center\n of the box relative to the bounds of the grid cell. The width\n and height are predicted relative to the whole image. Finally\n the confidence prediction represents the IOU between the\n predicted box and any ground truth box.\n Each grid cell also predicts C conditional class proba\nbilities, Pr(ClassiObject). These probabilities are condi\ntioned on the grid cell containing an object. We only predict\n one set of class probabilities per grid cell, regardless of the\n number of boxes B.\n At test time we multiply the conditional class probabili\nties and the individual box confidence predictions,\n Pr(ClassiObject) Pr(Object) IOU truth\n pred = Pr(Classi) IOU truth\n pred\n (1)\n which gives us class-specific confidence scores for each\n box. These scores encode both the probability of that class\n appearing in the box and how well the predicted box fits the\n object.\n S × S grid on input\n Bounding boxes + confidence\n Class probability map\n Final detections\n Figure 2: The Model. Our system models detection as a regres\nsion problem. It divides the image into an S S grid and for each\n grid cell predicts B bounding boxes, confidence for those boxes,\n and C class probabilities. These predictions are encoded as an\n S S (B 5+C)tensor.\n For evaluating YOLO on PASCAL VOC, we use S = 7,\n B =2. PASCAL VOC has 20 labelled classes so C = 20.\n Our final prediction is a 7 7 30 tensor.\n 2.1. Network Design\n We implement this model as a convolutional neural net\nwork and evaluate it on the PASCAL VOC detection dataset\n [9]. The initial convolutional layers of the network extract\n features from the image while the fully connected layers\n predict the output probabilities and coordinates.\n Our network architecture is inspired by the GoogLeNet\n model for image classification [34]. Our network has 24\n convolutional layers followed by 2 fully connected layers.\n Instead of the inception modules used by GoogLeNet, we\n simply use 1 1reduction layers followed by 3 3 convo\nlutional layers, similar to Lin et al [22]. The full network is\n shown in Figure 3.\n We also train a fast version of YOLO designed to push\n the boundaries of fast object detection. Fast YOLO uses a\n neural network with fewer convolutional layers (9 instead\n of 24) and fewer filters in those layers. Other than the size\n of the network, all training and testing parameters are the\n same between YOLO and Fast YOLO.\n448\n 7\n 7\n 448\n 112\n 3\n 3\n 3\n 112\n 192\n Conv. Layer\n 7x7x64-s-2\n Maxpool Layer\n 2x2-s-2\n 56\n 3\n 3\n 56\n Conv. Layer\n 3x3x192\n Maxpool Layer\n 2x2-s-2\n 256\n 28\n 3\n 3\n 28\n Conv. Layers\n 1x1x128\n 3x3x256\n 1x1x256\n 3x3x512\n Maxpool Layer\n 2x2-s-2\n 512\n 14\n 3\n 3\n 14\n Conv. Layers\n 1x1x256\n 3x3x512\n 1x1x512\n 1024\n 7\n 3\n 3\n 7\n 1024\n Conv. Layers\n 1x1x512\n 3x3x1024\n 3x3x1024\n 3x3x1024-s-2\n 7\n 7\n Conv. Layers\n 3x3x1024\n 3x3x1024\n 1024\n 4096\n Conn. Layer\n 7\n 7\n 30\n Conn. Layer\n } \n× 4\n 3x3x1024\n Maxpool Layer\n 2x2-s-2\n } \n× 2\n Figure 3: The Architecture. Our detection network has 24 convolutional layers followed by 2 fully connected layers. Alternating 1 1\n convolutional layers reduce the features space from preceding layers. We pretrain the convolutional layers on the ImageNet classification\n task at half the resolution (224 224 input image) and then double the resolution for detection.\n The final output of our network is the 7 7 30 tensor\n of predictions.\n 2.2. Training\n We pretrain our convolutional layers on the ImageNet\n 1000-class competition dataset [30]. For pretraining we use\n the first 20 convolutional layers from Figure 3 followed by a\n average-pooling layer and a fully connected layer. We train\n this network for approximately a week and achieve a single\n crop top-5 accuracy of 88% on the ImageNet 2012 valida\ntion set, comparable to the GoogLeNet models in Caffe’s\n Model Zoo [24]. We use the Darknet framework for all\n training and inference [26].\n We then convert the model to perform detection. Ren et\n al. show that adding both convolutional and connected lay\ners to pretrained networks can improve performance [29].\n Following their example, we add four convolutional lay\ners and two fully connected layers with randomly initialized\n weights. Detection often requires fine-grained visual infor\nmation so we increase the input resolution of the network\n from 224 224to 448 448.\n Our final layer predicts both class probabilities and\n bounding box coordinates. We normalize the bounding box\n width and height by the image width and height so that they\n fall between 0 and 1. We parametrize the bounding box x\n and y coordinates to be offsets of a particular grid cell loca\ntion so they are also bounded between 0 and 1.\n Weuse alinear activation function for the final layer and\n all other layers use the following leaky rectified linear acti\nvation:\n (x) = x\n if x > 0\n 01x otherwise\n (2)\n model. We use sum-squared error because it is easy to op\ntimize, however it does not perfectly align with our goal of\n maximizing average precision. It weights localization er\nror equally with classification error which may not be ideal.\n Also, in every image many grid cells do not contain any\n object. This pushes the “confidence” scores of those cells\n towards zero, often overpowering the gradient from cells\n that do contain objects. This can lead to model instability,\n causing training to diverge early on.\n To remedy this, we increase the loss from bounding box\n coordinate predictions and decrease the loss from confi\ndence predictions for boxes that don’t contain objects. We\n use two parameters, coord and noobj to accomplish this. We\n set coord = 5 and noobj = 5.\n Sum-squared error also equally weights errors in large\n boxes and small boxes. Our error metric should reflect that\n small deviations in large boxes matter less than in small\n boxes. To partially address this we predict the square root\n of the bounding box width and height instead of the width\n and height directly.\n YOLO predicts multiple bounding boxes per grid cell.\n At training time we only want one bounding box predictor\n to be responsible for each object. We assign one predictor\n to be “responsible” for predicting an object based on which\n prediction has the highest current IOU with the ground\n truth. This leads to specialization between the bounding box\n predictors. Each predictor gets better at predicting certain\n sizes, aspect ratios, or classes of object, improving overall\n recall.\n During training we optimize the following, multi-part\n We optimize for sum-squared error in the output of our\nlossfunction:\n coord\n S2\n i=0\n B\n j=0\n 1obj\n ij (xi xi)2+(yi yi)2\n + coord\n S2\n i=0\n B\n j=0\n 1obj\n ij wi wi\n 2+ hi hi\n 2\n +\n S2\n i=0\n B\n j=0\n 1obj\n ij Ci Ci\n 2\n + noobj\n S2\n i=0\n B\n j=0\n 1noobj\n ij Ci Ci\n 2\n +\n S2\n i=0\n 1obj\n i\n c classes\n (pi(c) pi(c))2 (3)\n where1obj\n i denotes ifobjectappears incell iand1obj\n ij de\nnotes that thejthboundingboxpredictor incell i is“re\nsponsible”forthatprediction.\n Notethat thelossfunctiononlypenalizesclassification\n errorifanobjectispresentinthatgridcell(hencethecon\nditionalclassprobabilitydiscussedearlier). Italsoonlype\nnalizesboundingboxcoordinateerror if thatpredictor is\n “responsible”forthegroundtruthbox(i.e. hasthehighest\n IOUofanypredictorinthatgridcell).\n Wetrainthenetworkforabout135epochsonthetrain\ningandvalidationdatasetsfromPASCALVOC2007and\n 2012.Whentestingon2012wealsoincludetheVOC2007\n testdatafor training. Throughout trainingweuseabatch\n sizeof64,amomentumof09andadecayof00005.\n Our learningrateschedule isas follows: For thefirst\n epochsweslowlyraisethelearningratefrom10 3to10 2.\n Ifwestartatahighlearningrateourmodeloftendiverges\n duetounstablegradients.Wecontinuetrainingwith10 2\n for75epochs, then10 3 for30epochs, andfinally10 4\n for30epochs.\n Toavoidoverfittingweusedropoutandextensivedata\n augmentation.Adropout layerwithrate=.5afterthefirst\n connectedlayerpreventsco-adaptationbetweenlayers[18].\n For dataaugmentationwe introduce randomscalingand\n translationsofupto20%of theoriginal imagesize. We\n alsorandomlyadjusttheexposureandsaturationoftheim\nagebyuptoafactorof15intheHSVcolorspace.\n 2.3.Inference\n Justlikeintraining,predictingdetectionsforatestimage\n onlyrequiresonenetworkevaluation.OnPASCALVOCthe\n networkpredicts98boundingboxesper imageandclass\n probabilitiesforeachbox. YOLOisextremelyfastat test\n timesinceitonlyrequiresasinglenetworkevaluation,un\nlikeclassifier-basedmethods.\n Thegriddesignenforcesspatialdiversityinthebound\ningboxpredictions. Often it isclearwhichgridcell an\n objectfallsintoandthenetworkonlypredictsoneboxfor\n eachobject. However, somelargeobjectsorobjectsnear\n theborderofmultiplecellscanbewelllocalizedbymulti\nplecells.Non-maximalsuppressioncanbeusedtofixthese\n multipledetections.Whilenotcritical toperformanceasit\n isforR-CNNorDPM,non-maximal suppressionadds2\n3%inmAP.\n 2.4.LimitationsofYOLO\n YOLOimposesstrongspatial constraintsonbounding\n boxpredictionssinceeachgridcellonlypredictstwoboxes\n andcanonlyhaveoneclass. Thisspatial constraint lim\nits thenumberofnearbyobjects thatourmodel canpre\ndict.Ourmodelstruggleswithsmallobjectsthatappearin\n groups,suchasflocksofbirds.\n Sinceourmodel learnstopredictboundingboxesfrom\n data, itstrugglestogeneralizetoobjectsinneworunusual\n aspect ratiosorconfigurations. Ourmodelalsousesrela\ntivelycoarsefeaturesforpredictingboundingboxessince\n ourarchitecturehasmultipledownsamplinglayersfromthe\n inputimage.\n Finally,whilewetrainonalossfunctionthatapproxi\nmatesdetectionperformance,ourlossfunctiontreatserrors\n thesame insmallboundingboxesversus largebounding\n boxes.Asmallerrorinalargeboxisgenerallybenignbuta\n smallerrorinasmallboxhasamuchgreatereffectonIOU.\n Ourmainsourceoferrorisincorrectlocalizations.\n 3.ComparisontoOtherDetectionSystems\n Objectdetectionisacoreproblemincomputervision.\n Detectionpipelinesgenerallystart byextractinga set of\n robust features frominput images (Haar [25], SIFT[23],\n HOG[4], convolutional features [6]). Then, classifiers\n [36, 21, 13, 10]or localizers [1, 32]areusedtoidentify\n objectsinthefeaturespace. Theseclassifiersor localizers\n areruneitherinslidingwindowfashionoverthewholeim\nageoronsomesubsetofregionsintheimage[35,15,39].\n WecomparetheYOLOdetectionsystemtoseveraltopde\ntectionframeworks,highlightingkeysimilaritiesanddiffer\nences.\n Deformablepartsmodels. Deformablepartsmodels\n (DPM)useaslidingwindowapproachtoobjectdetection\n [10].DPMusesadisjointpipelinetoextractstaticfeatures,\n classifyregions, predictboundingboxes forhighscoring\n regions,etc.Oursystemreplacesallofthesedisparateparts\n withasingleconvolutionalneuralnetwork. Thenetwork\n performsfeatureextraction,boundingboxprediction,non\nmaximalsuppression,andcontextualreasoningallconcur\nrently. Insteadofstaticfeatures, thenetworktrainsthefea\nturesin-lineandoptimizesthemforthedetectiontask.Our\n unifiedarchitectureleadstoafaster,moreaccuratemodel\n thanDPM.\n R-CNN.R-CNNanditsvariantsuseregionproposalsin\nsteadofslidingwindowstofindobjectsinimages.Selective\nSearch [35] generates potential bounding boxes, a convolu\ntional network extracts features, an SVM scores the boxes, a\n linear model adjusts the bounding boxes, and non-max sup\npression eliminates duplicate detections. Each stage of this\n complex pipeline must be precisely tuned independently\n and the resulting system is very slow, taking more than 40\n seconds per image at test time [14].\n YOLO shares some similarities with R-CNN. Each grid\n cell proposes potential bounding boxes and scores those\n boxes using convolutional features. However, our system\n puts spatial constraints on the grid cell proposals which\n helps mitigate multiple detections of the same object. Our\n system also proposes far fewer bounding boxes, only 98\n per image compared to about 2000 from Selective Search.\n Finally, our system combines these individual components\n into a single, jointly optimized model.\n Other Fast Detectors Fast and Faster R-CNN focus on\n speeding up the R-CNN framework by sharing computa\ntion and using neural networks to propose regions instead\n of Selective Search [14] [28]. While they offer speed and\n accuracy improvements over R-CNN, both still fall short of\n real-time performance.\n Many research efforts focus on speeding up the DPM\n pipeline [31] [38] [5]. They speed up HOG computation,\n use cascades, and push computation to GPUs. However,\n only 30Hz DPM [31] actually runs in real-time.\n Instead of trying to optimize individual components of\n a large detection pipeline, YOLO throws out the pipeline\n entirely and is fast by design.\n Detectors for single classes like faces or people can be\n highly optimized since they have to deal with much less\n variation [37]. YOLO is a general purpose detector that\n learns to detect a variety of objects simultaneously.\n Deep MultiBox. Unlike R-CNN, Szegedy et al. train a\n convolutional neural network to predict regions of interest\n [8] instead of using Selective Search. MultiBox can also\n perform single object detection by replacing the confidence\n prediction with a single class prediction. However, Multi\nBox cannot perform general object detection and is still just\n a piece in a larger detection pipeline, requiring further im\nage patch classification. Both YOLO and MultiBox use a\n convolutional network to predict bounding boxes in an im\nage but YOLO is a complete detection system.\n OverFeat. Sermanet et al. train a convolutional neural\n network to perform localization and adapt that localizer to\n perform detection [32]. OverFeat efficiently performs slid\ning window detection but it is still a disjoint system. Over\nFeat optimizes for localization, not detection performance.\n Like DPM, the localizer only sees local information when\n making a prediction. OverFeat cannot reason about global\n context and thus requires significant post-processing to pro\nduce coherent detections.\n MultiGrasp. Our work is similar in design to work on\n grasp detection by Redmon et al [27]. Our grid approach to\n bounding box prediction is based on the MultiGrasp system\n for regression to grasps. However, grasp detection is a much\n simpler task than object detection. MultiGrasp only needs\n to predict a single graspable region for an image containing\n one object. It doesn’t have to estimate the size, location,\n or boundaries of the object or predict it’s class, only find a\n region suitable for grasping. YOLO predicts both bounding\n boxes and class probabilities for multiple objects of multi\nple classes in an image.\n 4. Experiments\n First we compare YOLO with other real-time detection\n systems on PASCAL VOC 2007. To understand the differ\nences between YOLO and R-CNN variants we explore the\n errors on VOC 2007 made by YOLO and Fast R-CNN, one\n of the highest performing versions of R-CNN [14]. Based\n on the different error profiles we show that YOLO can be\n used to rescore Fast R-CNN detections and reduce the er\nrors from background false positives, giving a significant\n performance boost. We also present VOC 2012 results and\n compare mAP to current state-of-the-art methods. Finally,\n weshowthat YOLOgeneralizes to new domains better than\n other detectors on two artwork datasets.\n 4.1. Comparison to Other Real-Time Systems\n Many research efforts in object detection focus on mak\ning standard detection pipelines fast. [5] [38] [31] [14] [17]\n [28] However, only Sadeghi et al. actually produce a de\ntection system that runs in real-time (30 frames per second\n or better) [31]. We compare YOLO to their GPU imple\nmentation of DPM which runs either at 30Hz or 100Hz.\n While the other efforts don’t reach the real-time milestone\n we also compare their relative mAP and speed to examine\n the accuracy-performance tradeoffs available in object de\ntection systems.\n Fast YOLO is the fastest object detection method on\n PASCAL; as far as we know, it is the fastest extant object\n detector. With 527% mAP, it is more than twice as accurate\n as prior work on real-time detection. YOLO pushes mAP to\n 634%while still maintaining real-time performance.\n Wealso train YOLO using VGG-16. This model is more\n accurate but also significantly slower than YOLO. It is use\nful for comparison to other detection systems that rely on\n VGG-16 but since it is slower than real-time the rest of the\n paper focuses on our faster models.\n Fastest DPM effectively speeds up DPM without sacri\nf\n icing much mAP but it still misses real-time performance\n by a factor of 2 [38]. It also is limited by DPM’s relatively\n low accuracy on detection compared to neural network ap\nproaches.\n R-CNN minus R replaces Selective Search with static\n bounding box proposals [20]. While it is much faster than\nReal-TimeDetectors Train mAP FPS\n 100HzDPM[31] 2007 16.0 100\n 30HzDPM[31] 2007 26.1 30\n FastYOLO 2007+2012 52.7 155\n YOLO 2007+2012 63.4 45\n LessThanReal-Time\n FastestDPM[38] 2007 30.4 15\n R-CNNMinusR[20] 2007 53.5 6\n FastR-CNN[14] 2007+2012 70.0 0.5\n FasterR-CNNVGG-16[28] 2007+2012 73.2 7\n FasterR-CNNZF[28] 2007+2012 62.1 18\n YOLOVGG-16 2007+2012 66.4 21\n Table1:Real-TimeSystemsonPASCALVOC2007.Compar\ningtheperformanceandspeedof fastdetectors. FastYOLOis\n thefastestdetectoronrecordforPASCALVOCdetectionandis\n still twiceasaccurateasanyother real-timedetector. YOLOis\n 10mAPmoreaccuratethanthefastversionwhilestillwellabove\n real-timeinspeed.\n R-CNN,itstillfallsshortofreal-timeandtakesasignificant\n accuracyhitfromnothavinggoodproposals.\n FastR-CNNspeedsuptheclassificationstageofR-CNN\n but itstillreliesonselectivesearchwhichcantakearound\n 2secondsper imagetogenerateboundingboxproposals.\n ThusithashighmAPbutat05fpsit isstillfarfromreal\ntime.\n TherecentFasterR-CNNreplacesselectivesearchwith\n aneural network toproposeboundingboxes, similar to\n Szegedyetal. [8] Inour tests, theirmostaccuratemodel\n achieves7fpswhileasmaller, lessaccurateone runsat\n 18fps. TheVGG-16versionofFasterR-CNNis10mAP\n higherbut isalso6timesslower thanYOLO.TheZeiler\nFergusFasterR-CNNisonly2.5timesslowerthanYOLO\n butisalsolessaccurate.\n 4.2.VOC2007ErrorAnalysis\n TofurtherexaminethedifferencesbetweenYOLOand\n state-of-the-artdetectors,welookatadetailedbreakdown\n of resultsonVOC2007. WecompareYOLOtoFastR\nCNNsinceFastR-CNNisoneof thehighestperforming\n detectorsonPASCALandit’sdetectionsarepubliclyavail\nable.\n WeusethemethodologyandtoolsofHoiemetal. [19]\n Foreachcategoryat test timewelookat thetopNpredic\ntionsforthatcategory. Eachpredictioniseithercorrector\n itisclassifiedbasedonthetypeoferror:\n Correct:correctclassandIOU>5\n Localization:correctclass, 1<IOU<5\n Similar:classissimilar,IOU>1\n Correct: 71.6% Correct: 65.5%\n Loc: 8.6%\n Sim: 4.3%\n Other: 1.9%\n Background: 13.6%\n Loc: 19.0%\n Sim: 6.75%\n Other: 4.0%\n Background: 4.75%\n Fast R-CNN YOLO\n Figure4: ErrorAnalysis: FastR-CNNvs. YOLOThese\n chartsshowthepercentageoflocalizationandbackgrounderrors\n inthetopNdetectionsforvariouscategories(N=#objectsinthat\n category).\n Other:classiswrong,IOU>1\n Background: IOU<1foranyobject\n Figure4showsthebreakdownofeacherror typeaver\nagedacrossall20classes.\n YOLOstrugglestolocalizeobjectscorrectly. Localiza\ntionerrorsaccountformoreofYOLO’serrorsthanallother\n sourcescombined. FastR-CNNmakesmuchfewer local\nizationerrorsbut farmorebackgrounderrors. 13.6%of\n it’stopdetectionsarefalsepositivesthatdon’tcontainany\n objects. FastR-CNNisalmost3xmore likelytopredict\n backgrounddetectionsthanYOLO.\n 4.3.CombiningFastR-CNNandYOLO\n YOLOmakesfarfewerbackgroundmistakesthanFast\n R-CNN.ByusingYOLOtoeliminatebackgrounddetec\ntionsfromFastR-CNNwegetasignificantboostinperfor\nmance. ForeveryboundingboxthatR-CNNpredictswe\n checktoseeifYOLOpredictsasimilarbox. Ifitdoes,we\n give thatpredictionaboostbasedontheprobabilitypre\ndictedbyYOLOandtheoverlapbetweenthetwoboxes.\n ThebestFastR-CNNmodelachievesamAPof71.8%\n ontheVOC2007testset.WhencombinedwithYOLO,its\n mAP Combined Gain\n FastR-CNN 71.8-\nFastR-CNN(2007data) 66.9 72.4 .6\n FastR-CNN(VGG-M) 59.2 72.4 .6\n FastR-CNN(CaffeNet) 57.1 72.1 .3\n YOLO 63.4 75.0 3.2\n Table2:ModelcombinationexperimentsonVOC2007.We\n examinetheeffectofcombiningvariousmodelswiththebestver\nsionofFastR-CNN.OtherversionsofFastR-CNNprovideonly\n asmallbenefitwhileYOLOprovidesasignificantperformance\n boost.\nVOC2012test mAP aero bike bird boat bottle bus car cat chair cow table dog horse mbikepersonplant sheep sofa train tv\n MR CNN MORE DATA[11] 73.9 85.5 82.9 76.6 57.8 62.7 79.4 77.2 86.6 55.0 79.1 62.2 87.0 83.4 84.7 78.9 45.3 73.4 65.8 80.3 74.0\n HyperNet VGG\n HyperNet SP\n 71.4 84.2 78.5 73.6 55.6 53.7 78.7 79.8 87.7 49.6 74.9 52.1 86.0 81.7 83.3 81.8 48.6 73.5 59.4 79.9 65.7\n 71.3 84.1 78.3 73.3 55.5 53.6 78.6 79.6 87.5 49.5 74.9 52.1 85.6 81.6 83.2 81.6 48.4 73.2 59.3 79.7 65.6\n Fast R-CNN + YOLO\n 70.7\n MR CNN\n S\n 83.4\n 78.5\n 73.5\n 55.8\n 43.4\n 79.1\n 73.1\n 89.4\n 49.4\n 75.5\n 57.0\n 87.5\n 80.9\n 81.0\n 74.7\n 41.8\n 71.5\n 68.5\n 82.1\n 67.2\n CNN[11] 70.7 85.0 79.6 71.5 55.3 57.7 76.0 73.9 84.6 50.5 74.3 61.7 85.5 79.9 81.7 76.4 41.0 69.0 61.2 77.7 72.1\n Faster R-CNN [28] 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\n DEEP ENS COCO 70.1 84.0 79.4 71.6 51.9 51.1 74.1 72.1 88.6 48.3 73.4 57.8 86.1 80.0 80.7 70.4 46.6 69.6 68.8 75.9 71.4\n NoC[29] 68.8 82.8 79.0 71.6 52.3 53.7 74.1 69.0 84.9 46.9 74.3 53.1 85.0 81.3 79.5 72.2 38.9 72.4 59.5 76.7 68.1\n Fast R-CNN [14] 68.4 82.3 78.4 70.8 52.3 38.7 77.8 71.6 89.3 44.2 73.0 55.0 87.5 80.5 80.8 72.0 35.1 68.3 65.7 80.4 64.2\n UMICH FGS STRUCT 66.4 82.9 76.1 64.1 44.6 49.4 70.3 71.2 84.6 42.7 68.6 55.8 82.7 77.1 79.9 68.7 41.4 69.0 60.0 72.0 66.2\n NUS NIN C2000[7] 63.8 80.2 73.8 61.9 43.7 43.0 70.3 67.6 80.7 41.9 69.7 51.7 78.2 75.2 76.9 65.1 38.6 68.3 58.0 68.7 63.3\n BabyLearning [7] 63.2 78.0 74.2 61.3 45.7 42.7 68.2 66.8 80.2 40.6 70.0 49.8 79.0 74.5 77.9 64.0 35.3 67.9 55.7 68.7 62.6\n NUS NIN 62.4 77.9 73.1 62.6 39.5 43.3 69.1 66.4 78.9 39.1 68.1 50.0 77.2 71.3 76.1 64.7 38.4 66.9 56.2 66.9 62.7\n R-CNN VGGBB[13] 62.4 79.6 72.7 61.9 41.2 41.9 65.9 66.4 84.6 38.5 67.2 46.7 82.0 74.8 76.0 65.2 35.6 65.4 54.2 67.4 60.3\n R-CNN VGG[13] 59.2 76.8 70.9 56.6 37.5 36.9 62.9 63.6 81.1 35.7 64.3 43.9 80.4 71.6 74.0 60.0 30.8 63.4 52.0 63.5 58.7\n YOLO 57.9 77.0 67.2\n 57.7\n 38.3\n 22.7\n 68.3\n 55.9\n 81.4\n 36.2\n 60.8\n 48.5\n 77.2\n 72.3\n 71.3\n 63.5\n 28.9\n 50.8\n Feature Edit [33] 56.3 74.6 69.1 54.4 39.1 33.1 65.2 62.7 69.7 30.8 56.0 44.6 70.0 64.4 71.1 60.2 33.3 61.3 46.4 61.7 57.8\n R-CNN BB[13] 53.3 71.8 65.8 52.0 34.1 32.6 59.6 60.0 69.8 27.6 52.0 41.7 69.6 61.3 68.3 57.8 29.6 57.8 40.9 59.3 54.1\n SDS [16] 50.7 69.7 58.4 48.5 28.3 28.8 61.3 57.5 70.8 24.1 50.7 35.9 64.9 59.1 65.8 57.1 26.0 58.8 38.6 58.9 50.7\n R-CNN [13] 49.6 68.1 63.8 46.1 29.4 27.9 56.6 57.0 65.9 26.5 48.7 39.5 66.2 57.3 65.4 53.2 26.2 54.5 38.1 50.6 51.6\n 52.2\n 54.8\n 73.9\n Table 3: PASCAL VOC 2012 Leaderboard. YOLO compared with the full comp4 (outside data allowed) public leaderboard as of\n November 6th, 2015. Mean average precision and per-class average precision are shown for a variety of detection methods. YOLO is the\n only real-time detector. Fast R-CNN + YOLO is the forth highest scoring method, with a 2.3% boost over Fast R-CNN.\n mAPincreases by 3.2% to 75.0%. We also tried combining\n the top Fast R-CNN model with several other versions of\n Fast R-CNN. Those ensembles produced small increases in\n mAPbetween .3 and .6%, see Table 2 for details.\n The boost from YOLO is not simply a byproduct of\n model ensembling since there is little benefit from combin\ning different versions of Fast R-CNN. Rather, it is precisely\n because YOLO makes different kinds of mistakes at test\n time that it is so effective at boosting Fast R-CNN’s per\nformance.\n Unfortunately, this combination doesn’t benefit from the\n speed of YOLO since we run each model seperately and\n then combine the results. However, since YOLO is so fast\n it doesn’t add any significant computational time compared\n to Fast R-CNN.\n 4.4. VOC 2012 Results\n On the VOC 2012 test set, YOLO scores 57.9% mAP.\n This is lower than the current state of the art, closer to\n the original R-CNN using VGG-16, see Table 3. Our sys\ntem struggles with small objects compared to its closest\n competitors. On categories like bottle, sheep, and\n tv/monitor YOLO scores 8-10% lower than R-CNN or\n Feature Edit. However, on other categories like cat and\n train YOLOachieves higher performance.\n Our combined Fast R-CNN + YOLOmodelisoneof the\n highest performing detection methods. Fast R-CNN gets\n a 2.3% improvement from the combination with YOLO,\n boosting it 5 spots up on the public leaderboard.\n 4.5. Generalizability: Person Detection in Artwork\n Academic datasets for object detection draw the training\n and testing data from the same distribution. In real-world\n applications it is hard to predict all possible use cases and\n the test data can diverge from what the system has seen be\nfore [3]. We compare YOLO to other detection systems on\n the Picasso Dataset [12] and the People-Art Dataset [3], two\n datasets for testing person detection on artwork.\n Figure 5 shows comparative performance between\n YOLOandother detection methods. For reference, we give\n VOC 2007 detection AP on person where all models are\n trained only on VOC 2007 data. On Picasso models are\n trained on VOC 2012 while on People-Art they are trained\n on VOC2010.\n R-CNN has high AP on VOC 2007. However, R-CNN\n drops off considerably when applied to artwork. R-CNN\n uses Selective Search for bounding box proposals which is\n tuned for natural images. The classifier step in R-CNN only\n sees small regions and needs good proposals.\n DPM maintains its AP well when applied to artwork.\n Prior work theorizes that DPM performs well because it has\n strong spatial models of the shape and layout of objects.\n Though DPM doesn’t degrade as much as R-CNN, it starts\n from a lower AP.\n YOLO has good performance on VOC 2007 and its AP\n degrades less than other methods when applied to artwork.\n Like DPM, YOLO models the size and shape of objects,\n as well as relationships between objects and where objects\n commonly appear. Artwork and natural images are very\n different on a pixel level but they are similar in terms of\n the size and shape of objects, thus YOLO can still predict\n good bounding boxes and detections.\n 5. Real-Time Detection In The Wild\n YOLOis a fast, accurate object detector, making it ideal\n for computer vision applications. We connect YOLO to a\n webcam and verify that it maintains real-time performance,\nHumans\n YOLO\n DPM\n Poselets\n RCNN\n D&T\n (a) Picasso Dataset precision-recall curves.\n Picasso\n VOC2007\n AP AP BestF1\n People-Art\n AP\n YOLO\n R-CNN\n DPM\n Poselets [2]\n D&T[4]\n 59.2 53.3\n 54.2 10.4\n 43.2 37.8\n 36.5 17.8\n1.9\n 0.590\n 0.226\n 0.458\n 0.271\n 0.051\n 45\n 26\n 32\n (b) Quantitative results on the VOC 2007, Picasso, and People-Art Datasets.\n The Picasso Dataset evaluates on both AP and best F1 score.\n Figure 5: Generalization results on Picasso and People-Art datasets.\n Figure 6: Qualitative Results. YOLO running on sample artwork and natural images from the internet. It is mostly accurate although it\n does think one person is an airplane.\n including the time to fetch images from the camera and dis\nplay the detections.\n The resulting system is interactive and engaging. While\n YOLO processes images individually, when attached to a\n webcam it functions like a tracking system, detecting ob\njects as they move around and change in appearance. A\n demo of the system and the source code can be found on\n our project website: http://pjreddie.com/yolo/.\n 6. Conclusion\n We introduce YOLO, a unified model for object detec\ntion. Our model is simple to construct and can be trained\n directly on full images. Unlike classifier-based approaches,\n YOLOistrainedonalossfunction that directly corresponds\n to detection performance and the entire model is trained\n jointly.\n Fast YOLO is the fastest general-purpose object detec\ntor in the literature and YOLO pushes the state-of-the-art in\n real-time object detection. YOLO also generalizes well to\n new domains making it ideal for applications that rely on\n fast, robust object detection.\n Acknowledgements: This work is partially supported by\n ONRN00014-13-1-0720, NSFIIS-1338054, and The Allen\n Distinguished Investigator Award.\nReferences\n [1] M. B. Blaschko and C. H. Lampert. Learning to localize ob\njects with structured output regression. In Computer Vision\nECCV2008, pages 2–15. Springer, 2008. 4\n [2] L. Bourdev and J. Malik. Poselets: Body part detectors\n trained using 3d human pose annotations. In International\n Conference on Computer Vision (ICCV), 2009. 8\n [3] H. Cai, Q. Wu, T. Corradi, and P. Hall. The cross\ndepiction problem: Computer vision algorithms for recog\nnising objects in artwork and in photographs. arXiv preprint\n arXiv:1505.00110, 2015. 7\n [4] N. Dalal and B. Triggs. Histograms of oriented gradients for\n human detection. In Computer Vision and Pattern Recogni\ntion, 2005. CVPR 2005. IEEE Computer Society Conference\n on, volume 1, pages 886–893. IEEE, 2005. 4, 8\n [5] T. Dean, M. Ruzon, M. Segal, J. Shlens, S. Vijaya\nnarasimhan, J. Yagnik, et al. Fast, accurate detection of\n 100,000 object classes on a single machine. In Computer\n Vision and Pattern Recognition (CVPR), 2013 IEEE Confer\nence on, pages 1814–1821. IEEE, 2013. 5\n [6] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang,\n E. Tzeng, and T. Darrell. Decaf: A deep convolutional acti\nvation feature for generic visual recognition. arXiv preprint\n arXiv:1310.1531, 2013. 4\n [7] J. Dong, Q. Chen, S. Yan, and A. Yuille. Towards unified\n object detection and semantic segmentation. In Computer\n Vision–ECCV 2014, pages 299–314. Springer, 2014. 7\n [8] D. Erhan, C. Szegedy, A. Toshev, and D. Anguelov. Scalable\n object detection using deep neural networks. In Computer\n Vision and Pattern Recognition (CVPR), 2014 IEEE Confer\nence on, pages 2155–2162. IEEE, 2014. 5, 6\n [9] M. Everingham, S. M. A. Eslami, L. Van Gool, C. K. I.\n Williams, J. Winn, and A. Zisserman. The pascal visual ob\nject classes challenge: A retrospective. International Journal\n of Computer Vision, 111(1):98–136, Jan. 2015. 2\n [10] P.F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ra\nmanan. Object detection with discriminatively trained part\n based models. IEEE Transactions on Pattern Analysis and\n Machine Intelligence, 32(9):1627–1645, 2010. 1, 4\n [11] S. Gidaris and N. Komodakis. Object detection via a multi\nregion & semantic segmentation-aware CNN model. CoRR,\n abs/1505.01749, 2015. 7\n [12] S. Ginosar, D. Haas, T. Brown, and J. Malik. Detecting peo\nple in cubist art. In Computer Vision-ECCV 2014 Workshops,\n pages 101–116. Springer, 2014. 7\n [13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea\nture hierarchies for accurate object detection and semantic\n segmentation. In Computer Vision and Pattern Recognition\n (CVPR), 2014 IEEE Conference on, pages 580–587. IEEE,\n 2014. 1, 4, 7\n [14] R. B. Girshick. Fast R-CNN. CoRR, abs/1504.08083, 2015.\n 2, 5, 6, 7\n [15] S. Gould, T. Gao, and D. Koller. Region-based segmenta\ntion and object detection. In Advances in neural information\n processing systems, pages 655–663, 2009. 4\n [16] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Simul\ntaneous detection and segmentation. In Computer Vision\nECCV2014, pages 297–312. Springer, 2014. 7\n [17] K.He,X.Zhang,S.Ren,andJ.Sun. Spatialpyramidpooling\n in deep convolutional networks for visual recognition. arXiv\n preprint arXiv:1406.4729, 2014. 5\n [18] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\n R. R. Salakhutdinov. Improving neural networks by pre\nventing co-adaptation of feature detectors. arXiv preprint\n arXiv:1207.0580, 2012. 4\n [19] D.Hoiem,Y.Chodpathumwan,andQ.Dai. Diagnosingerror\n in object detectors. In Computer Vision–ECCV 2012, pages\n 340–353. Springer, 2012. 6\n [20] K. Lenc and A. Vedaldi. R-cnn minus r. arXiv preprint\n arXiv:1506.06981, 2015. 5, 6\n [21] R. Lienhart and J. Maydt. An extended set of haar-like fea\ntures for rapid object detection. In Image Processing. 2002.\n Proceedings. 2002 International Conference on, volume 1,\n pages I–900. IEEE, 2002. 4\n [22] M. Lin, Q. Chen, and S. Yan. Network in network. CoRR,\n abs/1312.4400, 2013. 2\n [23] D. G. Lowe. Object recognition from local scale-invariant\n features. In Computer vision, 1999. The proceedings of the\n seventh IEEE international conference on, volume 2, pages\n 1150–1157. Ieee, 1999. 4\n [24] D. Mishkin.\n val.\n Models accuracy on imagenet 2012\n https://github.com/BVLC/caffe/wiki/\n Models-accuracy-on-ImageNet-2012-val. Ac\ncessed: 2015-10-2. 3\n [25] C. P. Papageorgiou, M. Oren, and T. Poggio. A general\n framework for object detection. In Computer vision, 1998.\n sixth international conference on, pages 555–562. IEEE,\n 1998. 4\n [26] J. Redmon. Darknet: Open source neural networks in c.\n http://pjreddie.com/darknet/, 2013–2016. 3\n [27] J. RedmonandA.Angelova. Real-timegraspdetection using\n convolutional neural networks. CoRR, abs/1412.3128, 2014.\n 5\n [28] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: To\nwards real-time object detection with region proposal net\nworks. arXiv preprint arXiv:1506.01497, 2015. 5, 6, 7\n [29] S. Ren, K. He, R. B. Girshick, X. Zhang, and J. Sun. Object\n detection networks on convolutional feature maps. CoRR,\n abs/1504.06066, 2015. 3, 7\n [30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,\n S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,\n A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual\n Recognition Challenge. International Journal of Computer\n Vision (IJCV), 2015. 3\n [31] M. A. Sadeghi and D. Forsyth. 30hz object detection with\n dpm v5. In Computer Vision–ECCV 2014, pages 65–79.\n Springer, 2014. 5, 6\n [32] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,\n and Y. LeCun. Overfeat: Integrated recognition, localiza\ntion and detection using convolutional networks. CoRR,\n abs/1312.6229, 2013. 4, 5\n[33] Z.ShenandX.Xue. Domoredropoutsinpool5featuremaps\n for better object detection. arXiv preprint arXiv:1409.6911,\n 2014. 7\n [34] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,\n D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.\n Going deeper with convolutions. CoRR, abs/1409.4842,\n 2014. 2\n [35] J. R. Uijlings, K. E. van de Sande, T. Gevers, and A. W.\n Smeulders. Selective search for object recognition. Inter\nnational journal of computer vision, 104(2):154–171, 2013.\n 4\n [36] P. Viola and M. Jones. Robust real-time object detection.\n International Journal of Computer Vision, 4:34–47, 2001. 4\n [37] P. Viola and M. J. Jones. Robust real-time face detection.\n International journal of computer vision, 57(2):137–154,\n 2004. 5\n [38] J. Yan, Z. Lei, L. Wen, and S. Z. Li. The fastest deformable\n part model for object detection. In Computer Vision and Pat\ntern Recognition (CVPR), 2014 IEEE Conference on, pages\n 2497–2504. IEEE, 2014. 5, 6\n [39] C. L. Zitnick and P. Doll´ar. Edge boxes: Locating object pro\nposals from edges. In Computer Vision–ECCV 2014, pages\n 391–405. Springer, 2014. 4\nYou Only Look Once:\n Unified, Real-Time Object Detection\n Joseph Redmon , Santosh Divvala , Ross Girshick , Ali Farhadi\n University of Washington , Allen Institute for AI , Facebook AI Research\n http://pjreddie.com/yolo/\n Abstract\n arXiv:1506.02640v5  [cs.CV]  9 May 2016\n We present YOLO, a new approach to object detection.\n Prior work onobject detection repurposes classifiers to per\nform detection. Instead, we frame object detection as a re\ngression problem to spatially separated bounding boxes and\n associated class probabilities. A single neural network pre\ndicts bounding boxes and class probabilities directly from\n full images in one evaluation. Since the whole detection\n pipeline is a single network, it can be optimized end-to-end\n directly on detection performance.\n 1. Resize image.\n 2. Run convolutional network.\n 3. Non-max suppression.\n Person: 0.64\n Horse: 0.28\n Dog: 0.30\n Figure 1: The YOLO Detection System. Processing images\n with YOLO is simple and straightforward. Our system (1) resizes\n the input image to 448 448, (2) runs a single convolutional net\nwork on the image, and (3) thresholds the resulting detections by\n the model’s confidence.\n Our unified architecture is extremely fast. Our base\n YOLO model processes images in real-time at 45 frames\n per second. A smaller version of the network, Fast YOLO,\n processes an astounding 155 frames per second while\n still achieving double the mAP of other real-time detec\ntors. Compared to state-of-the-art detection systems, YOLO\n makes more localization errors but is less likely to predict\n false positives on background. Finally, YOLO learns very\n general representations of objects. It outperforms other de\ntection methods, including DPM and R-CNN, when gener\nalizing from natural images to other domains like artwork.\n 1. Introduction\n Humans glance at an image and instantly know what ob\njects are in the image, where they are, and how they inter\nact. The human visual system is fast and accurate, allow\ning us to perform complex tasks like driving with little con\nscious thought. Fast, accurate algorithms for object detec\ntion would allow computers to drive cars without special\nized sensors, enable assistive devices to convey real-time\n scene information to human users, and unlock the potential\n for general purpose, responsive robotic systems.\n Current detection systems repurpose classifiers to per\nform detection. To detect an object, these systems take a\n classifier for that object and evaluate it at various locations\n and scales in a test image. Systems like deformable parts\n models (DPM) use a sliding window approach where the\n classifier is run at evenly spaced locations over the entire\n image [10].\n Morerecent approaches like R-CNN use region proposal\n methods to first generate potential bounding boxes in an im\nage and then run a classifier on these proposed boxes. After\n classification, post-processing is used to refine the bound\ning boxes, eliminate duplicate detections, and rescore the\n boxes based on other objects in the scene [13]. These com\nplex pipelines are slow and hard to optimize because each\n individual component must be trained separately.\n Wereframe object detection as a single regression prob\nlem, straight from image pixels to bounding box coordi\nnates and class probabilities. Using our system, you only\n look once (YOLO) at an image to predict what objects are\n present and where they are.\n YOLO is refreshingly simple: see Figure 1. A sin\ngle convolutional network simultaneously predicts multi\nple bounding boxes and class probabilities for those boxes.\n YOLO trains on full images and directly optimizes detec\ntion performance. This unified model has several benefits\n over traditional methods of object detection.\n First, YOLO is extremely fast. Since we frame detection\n as a regression problem we don’t need a complex pipeline.\n We simply run our neural network on a new image at test\n time to predict detections. Our base network runs at 45\n frames per second with no batch processing on a Titan X\n GPU and a fast version runs at more than 150 fps. This\n means we can process streaming video in real-time with\n less than 25 milliseconds of latency. Furthermore, YOLO\n achieves more than twice the mean average precision of\n other real-time systems. For a demo of our system running\n in real-time on a webcam please see our project webpage:\n http://pjreddie.com/yolo/.\n Second, YOLO reasons globally about the image when\n 1\nmaking predictions. Unlike sliding window and region\n proposal-based techniques, YOLO sees the entire image\n during training and test time so it implicitly encodes contex\ntual information about classes as well as their appearance.\n Fast R-CNN, a top detection method [14], mistakes back\nground patches in an image for objects because it can’t see\n the larger context. YOLO makes less than half the number\n of background errors compared to Fast R-CNN.\n Third, YOLO learns generalizable representations of ob\njects. When trained on natural images and tested on art\nwork, YOLO outperforms top detection methods like DPM\n and R-CNN by a wide margin. Since YOLO is highly gen\neralizable it is less likely to break down when applied to\n new domains or unexpected inputs.\n YOLOstilllags behind state-of-the-art detection systems\n in accuracy. While it can quickly identify objects in im\nages it struggles to precisely localize some objects, espe\ncially small ones. We examine these tradeoffs further in our\n experiments.\n All of our training and testing code is open source. A\n variety of pretrained models are also available to download.\n 2. Unified Detection\n We unify the separate components of object detection\n into a single neural network. Our network uses features\n from the entire image to predict each bounding box. It also\n predicts all bounding boxes across all classes for an im\nage simultaneously. This means our network reasons glob\nally about the full image and all the objects in the image.\n The YOLO design enables end-to-end training and real\ntime speeds while maintaining high average precision.\n Our system divides the input image into an S S grid.\n If the center of an object falls into a grid cell, that grid cell\n is responsible for detecting that object.\n Each grid cell predicts B bounding boxes and confidence\n scores for those boxes. These confidence scores reflect how\n confident the model is that the box contains an object and\n also how accurate it thinks the box is that it predicts. For\nmally we define confidence as Pr(Object) IOUtruth\n pred . If no\n object exists in that cell, the confidence scores should be\n zero. Otherwise we want the confidence score to equal the\n intersection over union (IOU) between the predicted box\n and the ground truth.\n Each bounding box consists of 5 predictions: x, y, w, h,\n and confidence. The (xy) coordinates represent the center\n of the box relative to the bounds of the grid cell. The width\n and height are predicted relative to the whole image. Finally\n the confidence prediction represents the IOU between the\n predicted box and any ground truth box.\n Each grid cell also predicts C conditional class proba\nbilities, Pr(ClassiObject). These probabilities are condi\ntioned on the grid cell containing an object. We only predict\n one set of class probabilities per grid cell, regardless of the\n number of boxes B.\n At test time we multiply the conditional class probabili\nties and the individual box confidence predictions,\n Pr(ClassiObject) Pr(Object) IOU truth\n pred = Pr(Classi) IOU truth\n pred\n (1)\n which gives us class-specific confidence scores for each\n box. These scores encode both the probability of that class\n appearing in the box and how well the predicted box fits the\n object.\n S × S grid on input\n Bounding boxes + confidence\n Class probability map\n Final detections\n Figure 2: The Model. Our system models detection as a regres\nsion problem. It divides the image into an S S grid and for each\n grid cell predicts B bounding boxes, confidence for those boxes,\n and C class probabilities. These predictions are encoded as an\n S S (B 5+C)tensor.\n For evaluating YOLO on PASCAL VOC, we use S = 7,\n B =2. PASCAL VOC has 20 labelled classes so C = 20.\n Our final prediction is a 7 7 30 tensor.\n 2.1. Network Design\n We implement this model as a convolutional neural net\nwork and evaluate it on the PASCAL VOC detection dataset\n [9]. The initial convolutional layers of the network extract\n features from the image while the fully connected layers\n predict the output probabilities and coordinates.\n Our network architecture is inspired by the GoogLeNet\n model for image classification [34]. Our network has 24\n convolutional layers followed by 2 fully connected layers.\n Instead of the inception modules used by GoogLeNet, we\n simply use 1 1reduction layers followed by 3 3 convo\nlutional layers, similar to Lin et al [22]. The full network is\n shown in Figure 3.\n We also train a fast version of YOLO designed to push\n the boundaries of fast object detection. Fast YOLO uses a\n neural network with fewer convolutional layers (9 instead\n of 24) and fewer filters in those layers. Other than the size\n of the network, all training and testing parameters are the\n same between YOLO and Fast YOLO.\n448\n 7\n 7\n 448\n 112\n 3\n 3\n 3\n 112\n 192\n Conv. Layer\n 7x7x64-s-2\n Maxpool Layer\n 2x2-s-2\n 56\n 3\n 3\n 56\n Conv. Layer\n 3x3x192\n Maxpool Layer\n 2x2-s-2\n 256\n 28\n 3\n 3\n 28\n Conv. Layers\n 1x1x128\n 3x3x256\n 1x1x256\n 3x3x512\n Maxpool Layer\n 2x2-s-2\n 512\n 14\n 3\n 3\n 14\n Conv. Layers\n 1x1x256\n 3x3x512\n 1x1x512\n 1024\n 7\n 3\n 3\n 7\n 1024\n Conv. Layers\n 1x1x512\n 3x3x1024\n 3x3x1024\n 3x3x1024-s-2\n 7\n 7\n Conv. Layers\n 3x3x1024\n 3x3x1024\n 1024\n 4096\n Conn. Layer\n 7\n 7\n 30\n Conn. Layer\n } \n× 4\n 3x3x1024\n Maxpool Layer\n 2x2-s-2\n } \n× 2\n Figure 3: The Architecture. Our detection network has 24 convolutional layers followed by 2 fully connected layers. Alternating 1 1\n convolutional layers reduce the features space from preceding layers. We pretrain the convolutional layers on the ImageNet classification\n task at half the resolution (224 224 input image) and then double the resolution for detection.\n The final output of our network is the 7 7 30 tensor\n of predictions.\n 2.2. Training\n We pretrain our convolutional layers on the ImageNet\n 1000-class competition dataset [30]. For pretraining we use\n the first 20 convolutional layers from Figure 3 followed by a\n average-pooling layer and a fully connected layer. We train\n this network for approximately a week and achieve a single\n crop top-5 accuracy of 88% on the ImageNet 2012 valida\ntion set, comparable to the GoogLeNet models in Caffe’s\n Model Zoo [24]. We use the Darknet framework for all\n training and inference [26].\n We then convert the model to perform detection. Ren et\n al. show that adding both convolutional and connected lay\ners to pretrained networks can improve performance [29].\n Following their example, we add four convolutional lay\ners and two fully connected layers with randomly initialized\n weights. Detection often requires fine-grained visual infor\nmation so we increase the input resolution of the network\n from 224 224to 448 448.\n Our final layer predicts both class probabilities and\n bounding box coordinates. We normalize the bounding box\n width and height by the image width and height so that they\n fall between 0 and 1. We parametrize the bounding box x\n and y coordinates to be offsets of a particular grid cell loca\ntion so they are also bounded between 0 and 1.\n Weuse alinear activation function for the final layer and\n all other layers use the following leaky rectified linear acti\nvation:\n (x) = x\n if x > 0\n 01x otherwise\n (2)\n model. We use sum-squared error because it is easy to op\ntimize, however it does not perfectly align with our goal of\n maximizing average precision. It weights localization er\nror equally with classification error which may not be ideal.\n Also, in every image many grid cells do not contain any\n object. This pushes the “confidence” scores of those cells\n towards zero, often overpowering the gradient from cells\n that do contain objects. This can lead to model instability,\n causing training to diverge early on.\n To remedy this, we increase the loss from bounding box\n coordinate predictions and decrease the loss from confi\ndence predictions for boxes that don’t contain objects. We\n use two parameters, coord and noobj to accomplish this. We\n set coord = 5 and noobj = 5.\n Sum-squared error also equally weights errors in large\n boxes and small boxes. Our error metric should reflect that\n small deviations in large boxes matter less than in small\n boxes. To partially address this we predict the square root\n of the bounding box width and height instead of the width\n and height directly.\n YOLO predicts multiple bounding boxes per grid cell.\n At training time we only want one bounding box predictor\n to be responsible for each object. We assign one predictor\n to be “responsible” for predicting an object based on which\n prediction has the highest current IOU with the ground\n truth. This leads to specialization between the bounding box\n predictors. Each predictor gets better at predicting certain\n sizes, aspect ratios, or classes of object, improving overall\n recall.\n During training we optimize the following, multi-part\n We optimize for sum-squared error in the output of our\nlossfunction:\n coord\n S2\n i=0\n B\n j=0\n 1obj\n ij (xi xi)2+(yi yi)2\n + coord\n S2\n i=0\n B\n j=0\n 1obj\n ij wi wi\n 2+ hi hi\n 2\n +\n S2\n i=0\n B\n j=0\n 1obj\n ij Ci Ci\n 2\n + noobj\n S2\n i=0\n B\n j=0\n 1noobj\n ij Ci Ci\n 2\n +\n S2\n i=0\n 1obj\n i\n c classes\n (pi(c) pi(c))2 (3)\n where1obj\n i denotes ifobjectappears incell iand1obj\n ij de\nnotes that thejthboundingboxpredictor incell i is“re\nsponsible”forthatprediction.\n Notethat thelossfunctiononlypenalizesclassification\n errorifanobjectispresentinthatgridcell(hencethecon\nditionalclassprobabilitydiscussedearlier). Italsoonlype\nnalizesboundingboxcoordinateerror if thatpredictor is\n “responsible”forthegroundtruthbox(i.e. hasthehighest\n IOUofanypredictorinthatgridcell).\n Wetrainthenetworkforabout135epochsonthetrain\ningandvalidationdatasetsfromPASCALVOC2007and\n 2012.Whentestingon2012wealsoincludetheVOC2007\n testdatafor training. Throughout trainingweuseabatch\n sizeof64,amomentumof09andadecayof00005.\n Our learningrateschedule isas follows: For thefirst\n epochsweslowlyraisethelearningratefrom10 3to10 2.\n Ifwestartatahighlearningrateourmodeloftendiverges\n duetounstablegradients.Wecontinuetrainingwith10 2\n for75epochs, then10 3 for30epochs, andfinally10 4\n for30epochs.\n Toavoidoverfittingweusedropoutandextensivedata\n augmentation.Adropout layerwithrate=.5afterthefirst\n connectedlayerpreventsco-adaptationbetweenlayers[18].\n For dataaugmentationwe introduce randomscalingand\n translationsofupto20%of theoriginal imagesize. We\n alsorandomlyadjusttheexposureandsaturationoftheim\nagebyuptoafactorof15intheHSVcolorspace.\n 2.3.Inference\n Justlikeintraining,predictingdetectionsforatestimage\n onlyrequiresonenetworkevaluation.OnPASCALVOCthe\n networkpredicts98boundingboxesper imageandclass\n probabilitiesforeachbox. YOLOisextremelyfastat test\n timesinceitonlyrequiresasinglenetworkevaluation,un\nlikeclassifier-basedmethods.\n Thegriddesignenforcesspatialdiversityinthebound\ningboxpredictions. Often it isclearwhichgridcell an\n objectfallsintoandthenetworkonlypredictsoneboxfor\n eachobject. However, somelargeobjectsorobjectsnear\n theborderofmultiplecellscanbewelllocalizedbymulti\nplecells.Non-maximalsuppressioncanbeusedtofixthese\n multipledetections.Whilenotcritical toperformanceasit\n isforR-CNNorDPM,non-maximal suppressionadds2\n3%inmAP.\n 2.4.LimitationsofYOLO\n YOLOimposesstrongspatial constraintsonbounding\n boxpredictionssinceeachgridcellonlypredictstwoboxes\n andcanonlyhaveoneclass. Thisspatial constraint lim\nits thenumberofnearbyobjects thatourmodel canpre\ndict.Ourmodelstruggleswithsmallobjectsthatappearin\n groups,suchasflocksofbirds.\n Sinceourmodel learnstopredictboundingboxesfrom\n data, itstrugglestogeneralizetoobjectsinneworunusual\n aspect ratiosorconfigurations. Ourmodelalsousesrela\ntivelycoarsefeaturesforpredictingboundingboxessince\n ourarchitecturehasmultipledownsamplinglayersfromthe\n inputimage.\n Finally,whilewetrainonalossfunctionthatapproxi\nmatesdetectionperformance,ourlossfunctiontreatserrors\n thesame insmallboundingboxesversus largebounding\n boxes.Asmallerrorinalargeboxisgenerallybenignbuta\n smallerrorinasmallboxhasamuchgreatereffectonIOU.\n Ourmainsourceoferrorisincorrectlocalizations.\n 3.ComparisontoOtherDetectionSystems\n Objectdetectionisacoreproblemincomputervision.\n Detectionpipelinesgenerallystart byextractinga set of\n robust features frominput images (Haar [25], SIFT[23],\n HOG[4], convolutional features [6]). Then, classifiers\n [36, 21, 13, 10]or localizers [1, 32]areusedtoidentify\n objectsinthefeaturespace. Theseclassifiersor localizers\n areruneitherinslidingwindowfashionoverthewholeim\nageoronsomesubsetofregionsintheimage[35,15,39].\n WecomparetheYOLOdetectionsystemtoseveraltopde\ntectionframeworks,highlightingkeysimilaritiesanddiffer\nences.\n Deformablepartsmodels. Deformablepartsmodels\n (DPM)useaslidingwindowapproachtoobjectdetection\n [10].DPMusesadisjointpipelinetoextractstaticfeatures,\n classifyregions, predictboundingboxes forhighscoring\n regions,etc.Oursystemreplacesallofthesedisparateparts\n withasingleconvolutionalneuralnetwork. Thenetwork\n performsfeatureextraction,boundingboxprediction,non\nmaximalsuppression,andcontextualreasoningallconcur\nrently. Insteadofstaticfeatures, thenetworktrainsthefea\nturesin-lineandoptimizesthemforthedetectiontask.Our\n unifiedarchitectureleadstoafaster,moreaccuratemodel\n thanDPM.\n R-CNN.R-CNNanditsvariantsuseregionproposalsin\nsteadofslidingwindowstofindobjectsinimages.Selective\nSearch [35] generates potential bounding boxes, a convolu\ntional network extracts features, an SVM scores the boxes, a\n linear model adjusts the bounding boxes, and non-max sup\npression eliminates duplicate detections. Each stage of this\n complex pipeline must be precisely tuned independently\n and the resulting system is very slow, taking more than 40\n seconds per image at test time [14].\n YOLO shares some similarities with R-CNN. Each grid\n cell proposes potential bounding boxes and scores those\n boxes using convolutional features. However, our system\n puts spatial constraints on the grid cell proposals which\n helps mitigate multiple detections of the same object. Our\n system also proposes far fewer bounding boxes, only 98\n per image compared to about 2000 from Selective Search.\n Finally, our system combines these individual components\n into a single, jointly optimized model.\n Other Fast Detectors Fast and Faster R-CNN focus on\n speeding up the R-CNN framework by sharing computa\ntion and using neural networks to propose regions instead\n of Selective Search [14] [28]. While they offer speed and\n accuracy improvements over R-CNN, both still fall short of\n real-time performance.\n Many research efforts focus on speeding up the DPM\n pipeline [31] [38] [5]. They speed up HOG computation,\n use cascades, and push computation to GPUs. However,\n only 30Hz DPM [31] actually runs in real-time.\n Instead of trying to optimize individual components of\n a large detection pipeline, YOLO throws out the pipeline\n entirely and is fast by design.\n Detectors for single classes like faces or people can be\n highly optimized since they have to deal with much less\n variation [37]. YOLO is a general purpose detector that\n learns to detect a variety of objects simultaneously.\n Deep MultiBox. Unlike R-CNN, Szegedy et al. train a\n convolutional neural network to predict regions of interest\n [8] instead of using Selective Search. MultiBox can also\n perform single object detection by replacing the confidence\n prediction with a single class prediction. However, Multi\nBox cannot perform general object detection and is still just\n a piece in a larger detection pipeline, requiring further im\nage patch classification. Both YOLO and MultiBox use a\n convolutional network to predict bounding boxes in an im\nage but YOLO is a complete detection system.\n OverFeat. Sermanet et al. train a convolutional neural\n network to perform localization and adapt that localizer to\n perform detection [32]. OverFeat efficiently performs slid\ning window detection but it is still a disjoint system. Over\nFeat optimizes for localization, not detection performance.\n Like DPM, the localizer only sees local information when\n making a prediction. OverFeat cannot reason about global\n context and thus requires significant post-processing to pro\nduce coherent detections.\n MultiGrasp. Our work is similar in design to work on\n grasp detection by Redmon et al [27]. Our grid approach to\n bounding box prediction is based on the MultiGrasp system\n for regression to grasps. However, grasp detection is a much\n simpler task than object detection. MultiGrasp only needs\n to predict a single graspable region for an image containing\n one object. It doesn’t have to estimate the size, location,\n or boundaries of the object or predict it’s class, only find a\n region suitable for grasping. YOLO predicts both bounding\n boxes and class probabilities for multiple objects of multi\nple classes in an image.\n 4. Experiments\n First we compare YOLO with other real-time detection\n systems on PASCAL VOC 2007. To understand the differ\nences between YOLO and R-CNN variants we explore the\n errors on VOC 2007 made by YOLO and Fast R-CNN, one\n of the highest performing versions of R-CNN [14]. Based\n on the different error profiles we show that YOLO can be\n used to rescore Fast R-CNN detections and reduce the er\nrors from background false positives, giving a significant\n performance boost. We also present VOC 2012 results and\n compare mAP to current state-of-the-art methods. Finally,\n weshowthat YOLOgeneralizes to new domains better than\n other detectors on two artwork datasets.\n 4.1. Comparison to Other Real-Time Systems\n Many research efforts in object detection focus on mak\ning standard detection pipelines fast. [5] [38] [31] [14] [17]\n [28] However, only Sadeghi et al. actually produce a de\ntection system that runs in real-time (30 frames per second\n or better) [31]. We compare YOLO to their GPU imple\nmentation of DPM which runs either at 30Hz or 100Hz.\n While the other efforts don’t reach the real-time milestone\n we also compare their relative mAP and speed to examine\n the accuracy-performance tradeoffs available in object de\ntection systems.\n Fast YOLO is the fastest object detection method on\n PASCAL; as far as we know, it is the fastest extant object\n detector. With 527% mAP, it is more than twice as accurate\n as prior work on real-time detection. YOLO pushes mAP to\n 634%while still maintaining real-time performance.\n Wealso train YOLO using VGG-16. This model is more\n accurate but also significantly slower than YOLO. It is use\nful for comparison to other detection systems that rely on\n VGG-16 but since it is slower than real-time the rest of the\n paper focuses on our faster models.\n Fastest DPM effectively speeds up DPM without sacri\nf\n icing much mAP but it still misses real-time performance\n by a factor of 2 [38]. It also is limited by DPM’s relatively\n low accuracy on detection compared to neural network ap\nproaches.\n R-CNN minus R replaces Selective Search with static\n bounding box proposals [20]. While it is much faster than\nReal-TimeDetectors Train mAP FPS\n 100HzDPM[31] 2007 16.0 100\n 30HzDPM[31] 2007 26.1 30\n FastYOLO 2007+2012 52.7 155\n YOLO 2007+2012 63.4 45\n LessThanReal-Time\n FastestDPM[38] 2007 30.4 15\n R-CNNMinusR[20] 2007 53.5 6\n FastR-CNN[14] 2007+2012 70.0 0.5\n FasterR-CNNVGG-16[28] 2007+2012 73.2 7\n FasterR-CNNZF[28] 2007+2012 62.1 18\n YOLOVGG-16 2007+2012 66.4 21\n Table1:Real-TimeSystemsonPASCALVOC2007.Compar\ningtheperformanceandspeedof fastdetectors. FastYOLOis\n thefastestdetectoronrecordforPASCALVOCdetectionandis\n still twiceasaccurateasanyother real-timedetector. YOLOis\n 10mAPmoreaccuratethanthefastversionwhilestillwellabove\n real-timeinspeed.\n R-CNN,itstillfallsshortofreal-timeandtakesasignificant\n accuracyhitfromnothavinggoodproposals.\n FastR-CNNspeedsuptheclassificationstageofR-CNN\n but itstillreliesonselectivesearchwhichcantakearound\n 2secondsper imagetogenerateboundingboxproposals.\n ThusithashighmAPbutat05fpsit isstillfarfromreal\ntime.\n TherecentFasterR-CNNreplacesselectivesearchwith\n aneural network toproposeboundingboxes, similar to\n Szegedyetal. [8] Inour tests, theirmostaccuratemodel\n achieves7fpswhileasmaller, lessaccurateone runsat\n 18fps. TheVGG-16versionofFasterR-CNNis10mAP\n higherbut isalso6timesslower thanYOLO.TheZeiler\nFergusFasterR-CNNisonly2.5timesslowerthanYOLO\n butisalsolessaccurate.\n 4.2.VOC2007ErrorAnalysis\n TofurtherexaminethedifferencesbetweenYOLOand\n state-of-the-artdetectors,welookatadetailedbreakdown\n of resultsonVOC2007. WecompareYOLOtoFastR\nCNNsinceFastR-CNNisoneof thehighestperforming\n detectorsonPASCALandit’sdetectionsarepubliclyavail\nable.\n WeusethemethodologyandtoolsofHoiemetal. [19]\n Foreachcategoryat test timewelookat thetopNpredic\ntionsforthatcategory. Eachpredictioniseithercorrector\n itisclassifiedbasedonthetypeoferror:\n Correct:correctclassandIOU>5\n Localization:correctclass, 1<IOU<5\n Similar:classissimilar,IOU>1\n Correct: 71.6% Correct: 65.5%\n Loc: 8.6%\n Sim: 4.3%\n Other: 1.9%\n Background: 13.6%\n Loc: 19.0%\n Sim: 6.75%\n Other: 4.0%\n Background: 4.75%\n Fast R-CNN YOLO\n Figure4: ErrorAnalysis: FastR-CNNvs. YOLOThese\n chartsshowthepercentageoflocalizationandbackgrounderrors\n inthetopNdetectionsforvariouscategories(N=#objectsinthat\n category).\n Other:classiswrong,IOU>1\n Background: IOU<1foranyobject\n Figure4showsthebreakdownofeacherror typeaver\nagedacrossall20classes.\n YOLOstrugglestolocalizeobjectscorrectly. Localiza\ntionerrorsaccountformoreofYOLO’serrorsthanallother\n sourcescombined. FastR-CNNmakesmuchfewer local\nizationerrorsbut farmorebackgrounderrors. 13.6%of\n it’stopdetectionsarefalsepositivesthatdon’tcontainany\n objects. FastR-CNNisalmost3xmore likelytopredict\n backgrounddetectionsthanYOLO.\n 4.3.CombiningFastR-CNNandYOLO\n YOLOmakesfarfewerbackgroundmistakesthanFast\n R-CNN.ByusingYOLOtoeliminatebackgrounddetec\ntionsfromFastR-CNNwegetasignificantboostinperfor\nmance. ForeveryboundingboxthatR-CNNpredictswe\n checktoseeifYOLOpredictsasimilarbox. Ifitdoes,we\n give thatpredictionaboostbasedontheprobabilitypre\ndictedbyYOLOandtheoverlapbetweenthetwoboxes.\n ThebestFastR-CNNmodelachievesamAPof71.8%\n ontheVOC2007testset.WhencombinedwithYOLO,its\n mAP Combined Gain\n FastR-CNN 71.8-\nFastR-CNN(2007data) 66.9 72.4 .6\n FastR-CNN(VGG-M) 59.2 72.4 .6\n FastR-CNN(CaffeNet) 57.1 72.1 .3\n YOLO 63.4 75.0 3.2\n Table2:ModelcombinationexperimentsonVOC2007.We\n examinetheeffectofcombiningvariousmodelswiththebestver\nsionofFastR-CNN.OtherversionsofFastR-CNNprovideonly\n asmallbenefitwhileYOLOprovidesasignificantperformance\n boost.\nVOC2012test mAP aero bike bird boat bottle bus car cat chair cow table dog horse mbikepersonplant sheep sofa train tv\n MR CNN MORE DATA[11] 73.9 85.5 82.9 76.6 57.8 62.7 79.4 77.2 86.6 55.0 79.1 62.2 87.0 83.4 84.7 78.9 45.3 73.4 65.8 80.3 74.0\n HyperNet VGG\n HyperNet SP\n 71.4 84.2 78.5 73.6 55.6 53.7 78.7 79.8 87.7 49.6 74.9 52.1 86.0 81.7 83.3 81.8 48.6 73.5 59.4 79.9 65.7\n 71.3 84.1 78.3 73.3 55.5 53.6 78.6 79.6 87.5 49.5 74.9 52.1 85.6 81.6 83.2 81.6 48.4 73.2 59.3 79.7 65.6\n Fast R-CNN + YOLO\n 70.7\n MR CNN\n S\n 83.4\n 78.5\n 73.5\n 55.8\n 43.4\n 79.1\n 73.1\n 89.4\n 49.4\n 75.5\n 57.0\n 87.5\n 80.9\n 81.0\n 74.7\n 41.8\n 71.5\n 68.5\n 82.1\n 67.2\n CNN[11] 70.7 85.0 79.6 71.5 55.3 57.7 76.0 73.9 84.6 50.5 74.3 61.7 85.5 79.9 81.7 76.4 41.0 69.0 61.2 77.7 72.1\n Faster R-CNN [28] 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\n DEEP ENS COCO 70.1 84.0 79.4 71.6 51.9 51.1 74.1 72.1 88.6 48.3 73.4 57.8 86.1 80.0 80.7 70.4 46.6 69.6 68.8 75.9 71.4\n NoC[29] 68.8 82.8 79.0 71.6 52.3 53.7 74.1 69.0 84.9 46.9 74.3 53.1 85.0 81.3 79.5 72.2 38.9 72.4 59.5 76.7 68.1\n Fast R-CNN [14] 68.4 82.3 78.4 70.8 52.3 38.7 77.8 71.6 89.3 44.2 73.0 55.0 87.5 80.5 80.8 72.0 35.1 68.3 65.7 80.4 64.2\n UMICH FGS STRUCT 66.4 82.9 76.1 64.1 44.6 49.4 70.3 71.2 84.6 42.7 68.6 55.8 82.7 77.1 79.9 68.7 41.4 69.0 60.0 72.0 66.2\n NUS NIN C2000[7] 63.8 80.2 73.8 61.9 43.7 43.0 70.3 67.6 80.7 41.9 69.7 51.7 78.2 75.2 76.9 65.1 38.6 68.3 58.0 68.7 63.3\n BabyLearning [7] 63.2 78.0 74.2 61.3 45.7 42.7 68.2 66.8 80.2 40.6 70.0 49.8 79.0 74.5 77.9 64.0 35.3 67.9 55.7 68.7 62.6\n NUS NIN 62.4 77.9 73.1 62.6 39.5 43.3 69.1 66.4 78.9 39.1 68.1 50.0 77.2 71.3 76.1 64.7 38.4 66.9 56.2 66.9 62.7\n R-CNN VGGBB[13] 62.4 79.6 72.7 61.9 41.2 41.9 65.9 66.4 84.6 38.5 67.2 46.7 82.0 74.8 76.0 65.2 35.6 65.4 54.2 67.4 60.3\n R-CNN VGG[13] 59.2 76.8 70.9 56.6 37.5 36.9 62.9 63.6 81.1 35.7 64.3 43.9 80.4 71.6 74.0 60.0 30.8 63.4 52.0 63.5 58.7\n YOLO 57.9 77.0 67.2\n 57.7\n 38.3\n 22.7\n 68.3\n 55.9\n 81.4\n 36.2\n 60.8\n 48.5\n 77.2\n 72.3\n 71.3\n 63.5\n 28.9\n 50.8\n Feature Edit [33] 56.3 74.6 69.1 54.4 39.1 33.1 65.2 62.7 69.7 30.8 56.0 44.6 70.0 64.4 71.1 60.2 33.3 61.3 46.4 61.7 57.8\n R-CNN BB[13] 53.3 71.8 65.8 52.0 34.1 32.6 59.6 60.0 69.8 27.6 52.0 41.7 69.6 61.3 68.3 57.8 29.6 57.8 40.9 59.3 54.1\n SDS [16] 50.7 69.7 58.4 48.5 28.3 28.8 61.3 57.5 70.8 24.1 50.7 35.9 64.9 59.1 65.8 57.1 26.0 58.8 38.6 58.9 50.7\n R-CNN [13] 49.6 68.1 63.8 46.1 29.4 27.9 56.6 57.0 65.9 26.5 48.7 39.5 66.2 57.3 65.4 53.2 26.2 54.5 38.1 50.6 51.6\n 52.2\n 54.8\n 73.9\n Table 3: PASCAL VOC 2012 Leaderboard. YOLO compared with the full comp4 (outside data allowed) public leaderboard as of\n November 6th, 2015. Mean average precision and per-class average precision are shown for a variety of detection methods. YOLO is the\n only real-time detector. Fast R-CNN + YOLO is the forth highest scoring method, with a 2.3% boost over Fast R-CNN.\n mAPincreases by 3.2% to 75.0%. We also tried combining\n the top Fast R-CNN model with several other versions of\n Fast R-CNN. Those ensembles produced small increases in\n mAPbetween .3 and .6%, see Table 2 for details.\n The boost from YOLO is not simply a byproduct of\n model ensembling since there is little benefit from combin\ning different versions of Fast R-CNN. Rather, it is precisely\n because YOLO makes different kinds of mistakes at test\n time that it is so effective at boosting Fast R-CNN’s per\nformance.\n Unfortunately, this combination doesn’t benefit from the\n speed of YOLO since we run each model seperately and\n then combine the results. However, since YOLO is so fast\n it doesn’t add any significant computational time compared\n to Fast R-CNN.\n 4.4. VOC 2012 Results\n On the VOC 2012 test set, YOLO scores 57.9% mAP.\n This is lower than the current state of the art, closer to\n the original R-CNN using VGG-16, see Table 3. Our sys\ntem struggles with small objects compared to its closest\n competitors. On categories like bottle, sheep, and\n tv/monitor YOLO scores 8-10% lower than R-CNN or\n Feature Edit. However, on other categories like cat and\n train YOLOachieves higher performance.\n Our combined Fast R-CNN + YOLOmodelisoneof the\n highest performing detection methods. Fast R-CNN gets\n a 2.3% improvement from the combination with YOLO,\n boosting it 5 spots up on the public leaderboard.\n 4.5. Generalizability: Person Detection in Artwork\n Academic datasets for object detection draw the training\n and testing data from the same distribution. In real-world\n applications it is hard to predict all possible use cases and\n the test data can diverge from what the system has seen be\nfore [3]. We compare YOLO to other detection systems on\n the Picasso Dataset [12] and the People-Art Dataset [3], two\n datasets for testing person detection on artwork.\n Figure 5 shows comparative performance between\n YOLOandother detection methods. For reference, we give\n VOC 2007 detection AP on person where all models are\n trained only on VOC 2007 data. On Picasso models are\n trained on VOC 2012 while on People-Art they are trained\n on VOC2010.\n R-CNN has high AP on VOC 2007. However, R-CNN\n drops off considerably when applied to artwork. R-CNN\n uses Selective Search for bounding box proposals which is\n tuned for natural images. The classifier step in R-CNN only\n sees small regions and needs good proposals.\n DPM maintains its AP well when applied to artwork.\n Prior work theorizes that DPM performs well because it has\n strong spatial models of the shape and layout of objects.\n Though DPM doesn’t degrade as much as R-CNN, it starts\n from a lower AP.\n YOLO has good performance on VOC 2007 and its AP\n degrades less than other methods when applied to artwork.\n Like DPM, YOLO models the size and shape of objects,\n as well as relationships between objects and where objects\n commonly appear. Artwork and natural images are very\n different on a pixel level but they are similar in terms of\n the size and shape of objects, thus YOLO can still predict\n good bounding boxes and detections.\n 5. Real-Time Detection In The Wild\n YOLOis a fast, accurate object detector, making it ideal\n for computer vision applications. We connect YOLO to a\n webcam and verify that it maintains real-time performance,\nHumans\n YOLO\n DPM\n Poselets\n RCNN\n D&T\n (a) Picasso Dataset precision-recall curves.\n Picasso\n VOC2007\n AP AP BestF1\n People-Art\n AP\n YOLO\n R-CNN\n DPM\n Poselets [2]\n D&T[4]\n 59.2 53.3\n 54.2 10.4\n 43.2 37.8\n 36.5 17.8\n1.9\n 0.590\n 0.226\n 0.458\n 0.271\n 0.051\n 45\n 26\n 32\n (b) Quantitative results on the VOC 2007, Picasso, and People-Art Datasets.\n The Picasso Dataset evaluates on both AP and best F1 score.\n Figure 5: Generalization results on Picasso and People-Art datasets.\n Figure 6: Qualitative Results. YOLO running on sample artwork and natural images from the internet. It is mostly accurate although it\n does think one person is an airplane.\n including the time to fetch images from the camera and dis\nplay the detections.\n The resulting system is interactive and engaging. While\n YOLO processes images individually, when attached to a\n webcam it functions like a tracking system, detecting ob\njects as they move around and change in appearance. A\n demo of the system and the source code can be found on\n our project website: http://pjreddie.com/yolo/.\n 6. Conclusion\n We introduce YOLO, a unified model for object detec\ntion. Our model is simple to construct and can be trained\n directly on full images. Unlike classifier-based approaches,\n YOLOistrainedonalossfunction that directly corresponds\n to detection performance and the entire model is trained\n jointly.\n Fast YOLO is the fastest general-purpose object detec\ntor in the literature and YOLO pushes the state-of-the-art in\n real-time object detection. YOLO also generalizes well to\n new domains making it ideal for applications that rely on\n fast, robust object detection.\n Acknowledgements: This work is partially supported by\n ONRN00014-13-1-0720, NSFIIS-1338054, and The Allen\n Distinguished Investigator Award.\nReferences\n [1] M. B. Blaschko and C. H. Lampert. Learning to localize ob\njects with structured output regression. In Computer Vision\nECCV2008, pages 2–15. Springer, 2008. 4\n [2] L. Bourdev and J. Malik. Poselets: Body part detectors\n trained using 3d human pose annotations. In International\n Conference on Computer Vision (ICCV), 2009. 8\n [3] H. Cai, Q. Wu, T. Corradi, and P. Hall. The cross\ndepiction problem: Computer vision algorithms for recog\nnising objects in artwork and in photographs. arXiv preprint\n arXiv:1505.00110, 2015. 7\n [4] N. Dalal and B. Triggs. Histograms of oriented gradients for\n human detection. In Computer Vision and Pattern Recogni\ntion, 2005. CVPR 2005. IEEE Computer Society Conference\n on, volume 1, pages 886–893. IEEE, 2005. 4, 8\n [5] T. Dean, M. Ruzon, M. Segal, J. Shlens, S. Vijaya\nnarasimhan, J. Yagnik, et al. Fast, accurate detection of\n 100,000 object classes on a single machine. In Computer\n Vision and Pattern Recognition (CVPR), 2013 IEEE Confer\nence on, pages 1814–1821. IEEE, 2013. 5\n [6] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang,\n E. Tzeng, and T. Darrell. Decaf: A deep convolutional acti\nvation feature for generic visual recognition. arXiv preprint\n arXiv:1310.1531, 2013. 4\n [7] J. Dong, Q. Chen, S. Yan, and A. Yuille. Towards unified\n object detection and semantic segmentation. In Computer\n Vision–ECCV 2014, pages 299–314. Springer, 2014. 7\n [8] D. Erhan, C. Szegedy, A. Toshev, and D. Anguelov. Scalable\n object detection using deep neural networks. In Computer\n Vision and Pattern Recognition (CVPR), 2014 IEEE Confer\nence on, pages 2155–2162. IEEE, 2014. 5, 6\n [9] M. Everingham, S. M. A. Eslami, L. Van Gool, C. K. I.\n Williams, J. Winn, and A. Zisserman. The pascal visual ob\nject classes challenge: A retrospective. International Journal\n of Computer Vision, 111(1):98–136, Jan. 2015. 2\n [10] P.F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ra\nmanan. Object detection with discriminatively trained part\n based models. IEEE Transactions on Pattern Analysis and\n Machine Intelligence, 32(9):1627–1645, 2010. 1, 4\n [11] S. Gidaris and N. Komodakis. Object detection via a multi\nregion & semantic segmentation-aware CNN model. CoRR,\n abs/1505.01749, 2015. 7\n [12] S. Ginosar, D. Haas, T. Brown, and J. Malik. Detecting peo\nple in cubist art. In Computer Vision-ECCV 2014 Workshops,\n pages 101–116. Springer, 2014. 7\n [13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea\nture hierarchies for accurate object detection and semantic\n segmentation. In Computer Vision and Pattern Recognition\n (CVPR), 2014 IEEE Conference on, pages 580–587. IEEE,\n 2014. 1, 4, 7\n [14] R. B. Girshick. Fast R-CNN. CoRR, abs/1504.08083, 2015.\n 2, 5, 6, 7\n [15] S. Gould, T. Gao, and D. Koller. Region-based segmenta\ntion and object detection. In Advances in neural information\n processing systems, pages 655–663, 2009. 4\n [16] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Simul\ntaneous detection and segmentation. In Computer Vision\nECCV2014, pages 297–312. Springer, 2014. 7\n [17] K.He,X.Zhang,S.Ren,andJ.Sun. Spatialpyramidpooling\n in deep convolutional networks for visual recognition. arXiv\n preprint arXiv:1406.4729, 2014. 5\n [18] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\n R. R. Salakhutdinov. Improving neural networks by pre\nventing co-adaptation of feature detectors. arXiv preprint\n arXiv:1207.0580, 2012. 4\n [19] D.Hoiem,Y.Chodpathumwan,andQ.Dai. Diagnosingerror\n in object detectors. In Computer Vision–ECCV 2012, pages\n 340–353. Springer, 2012. 6\n [20] K. Lenc and A. Vedaldi. R-cnn minus r. arXiv preprint\n arXiv:1506.06981, 2015. 5, 6\n [21] R. Lienhart and J. Maydt. An extended set of haar-like fea\ntures for rapid object detection. In Image Processing. 2002.\n Proceedings. 2002 International Conference on, volume 1,\n pages I–900. IEEE, 2002. 4\n [22] M. Lin, Q. Chen, and S. Yan. Network in network. CoRR,\n abs/1312.4400, 2013. 2\n [23] D. G. Lowe. Object recognition from local scale-invariant\n features. In Computer vision, 1999. The proceedings of the\n seventh IEEE international conference on, volume 2, pages\n 1150–1157. Ieee, 1999. 4\n [24] D. Mishkin.\n val.\n Models accuracy on imagenet 2012\n https://github.com/BVLC/caffe/wiki/\n Models-accuracy-on-ImageNet-2012-val. Ac\ncessed: 2015-10-2. 3\n [25] C. P. Papageorgiou, M. Oren, and T. Poggio. A general\n framework for object detection. In Computer vision, 1998.\n sixth international conference on, pages 555–562. IEEE,\n 1998. 4\n [26] J. Redmon. Darknet: Open source neural networks in c.\n http://pjreddie.com/darknet/, 2013–2016. 3\n [27] J. RedmonandA.Angelova. Real-timegraspdetection using\n convolutional neural networks. CoRR, abs/1412.3128, 2014.\n 5\n [28] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: To\nwards real-time object detection with region proposal net\nworks. arXiv preprint arXiv:1506.01497, 2015. 5, 6, 7\n [29] S. Ren, K. He, R. B. Girshick, X. Zhang, and J. Sun. Object\n detection networks on convolutional feature maps. CoRR,\n abs/1504.06066, 2015. 3, 7\n [30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,\n S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,\n A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual\n Recognition Challenge. International Journal of Computer\n Vision (IJCV), 2015. 3\n [31] M. A. Sadeghi and D. Forsyth. 30hz object detection with\n dpm v5. In Computer Vision–ECCV 2014, pages 65–79.\n Springer, 2014. 5, 6\n [32] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,\n and Y. LeCun. Overfeat: Integrated recognition, localiza\ntion and detection using convolutional networks. CoRR,\n abs/1312.6229, 2013. 4, 5\n[33] Z.ShenandX.Xue. Domoredropoutsinpool5featuremaps\n for better object detection. arXiv preprint arXiv:1409.6911,\n 2014. 7\n [34] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,\n D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.\n Going deeper with convolutions. CoRR, abs/1409.4842,\n 2014. 2\n [35] J. R. Uijlings, K. E. van de Sande, T. Gevers, and A. W.\n Smeulders. Selective search for object recognition. Inter\nnational journal of computer vision, 104(2):154–171, 2013.\n 4\n [36] P. Viola and M. Jones. Robust real-time object detection.\n International Journal of Computer Vision, 4:34–47, 2001. 4\n [37] P. Viola and M. J. Jones. Robust real-time face detection.\n International journal of computer vision, 57(2):137–154,\n 2004. 5\n [38] J. Yan, Z. Lei, L. Wen, and S. Z. Li. The fastest deformable\n part model for object detection. In Computer Vision and Pat\ntern Recognition (CVPR), 2014 IEEE Conference on, pages\n 2497–2504. IEEE, 2014. 5, 6\n [39] C. L. Zitnick and P. Doll´ar. Edge boxes: Locating object pro\nposals from edges. In Computer Vision–ECCV 2014, pages\n 391–405. Springer, 2014. 4\nYou Only Look Once:\n Unified, Real-Time Object Detection\n Joseph Redmon , Santosh Divvala , Ross Girshick , Ali Farhadi\n University of Washington , Allen Institute for AI , Facebook AI Research\n http://pjreddie.com/yolo/\n Abstract\n arXiv:1506.02640v5  [cs.CV]  9 May 2016\n We present YOLO, a new approach to object detection.\n Prior work onobject detection repurposes classifiers to per\nform detection. Instead, we frame object detection as a re\ngression problem to spatially separated bounding boxes and\n associated class probabilities. A single neural network pre\ndicts bounding boxes and class probabilities directly from\n full images in one evaluation. Since the whole detection\n pipeline is a single network, it can be optimized end-to-end\n directly on detection performance.\n 1. Resize image.\n 2. Run convolutional network.\n 3. Non-max suppression.\n Person: 0.64\n Horse: 0.28\n Dog: 0.30\n Figure 1: The YOLO Detection System. Processing images\n with YOLO is simple and straightforward. Our system (1) resizes\n the input image to 448 448, (2) runs a single convolutional net\nwork on the image, and (3) thresholds the resulting detections by\n the model’s confidence.\n Our unified architecture is extremely fast. Our base\n YOLO model processes images in real-time at 45 frames\n per second. A smaller version of the network, Fast YOLO,\n processes an astounding 155 frames per second while\n still achieving double the mAP of other real-time detec\ntors. Compared to state-of-the-art detection systems, YOLO\n makes more localization errors but is less likely to predict\n false positives on background. Finally, YOLO learns very\n general representations of objects. It outperforms other de\ntection methods, including DPM and R-CNN, when gener\nalizing from natural images to other domains like artwork.\n 1. Introduction\n Humans glance at an image and instantly know what ob\njects are in the image, where they are, and how they inter\nact. The human visual system is fast and accurate, allow\ning us to perform complex tasks like driving with little con\nscious thought. Fast, accurate algorithms for object detec\ntion would allow computers to drive cars without special\nized sensors, enable assistive devices to convey real-time\n scene information to human users, and unlock the potential\n for general purpose, responsive robotic systems.\n Current detection systems repurpose classifiers to per\nform detection. To detect an object, these systems take a\n classifier for that object and evaluate it at various locations\n and scales in a test image. Systems like deformable parts\n models (DPM) use a sliding window approach where the\n classifier is run at evenly spaced locations over the entire\n image [10].\n Morerecent approaches like R-CNN use region proposal\n methods to first generate potential bounding boxes in an im\nage and then run a classifier on these proposed boxes. After\n classification, post-processing is used to refine the bound\ning boxes, eliminate duplicate detections, and rescore the\n boxes based on other objects in the scene [13]. These com\nplex pipelines are slow and hard to optimize because each\n individual component must be trained separately.\n Wereframe object detection as a single regression prob\nlem, straight from image pixels to bounding box coordi\nnates and class probabilities. Using our system, you only\n look once (YOLO) at an image to predict what objects are\n present and where they are.\n YOLO is refreshingly simple: see Figure 1. A sin\ngle convolutional network simultaneously predicts multi\nple bounding boxes and class probabilities for those boxes.\n YOLO trains on full images and directly optimizes detec\ntion performance. This unified model has several benefits\n over traditional methods of object detection.\n First, YOLO is extremely fast. Since we frame detection\n as a regression problem we don’t need a complex pipeline.\n We simply run our neural network on a new image at test\n time to predict detections. Our base network runs at 45\n frames per second with no batch processing on a Titan X\n GPU and a fast version runs at more than 150 fps. This\n means we can process streaming video in real-time with\n less than 25 milliseconds of latency. Furthermore, YOLO\n achieves more than twice the mean average precision of\n other real-time systems. For a demo of our system running\n in real-time on a webcam please see our project webpage:\n http://pjreddie.com/yolo/.\n Second, YOLO reasons globally about the image when\n 1\nmaking predictions. Unlike sliding window and region\n proposal-based techniques, YOLO sees the entire image\n during training and test time so it implicitly encodes contex\ntual information about classes as well as their appearance.\n Fast R-CNN, a top detection method [14], mistakes back\nground patches in an image for objects because it can’t see\n the larger context. YOLO makes less than half the number\n of background errors compared to Fast R-CNN.\n Third, YOLO learns generalizable representations of ob\njects. When trained on natural images and tested on art\nwork, YOLO outperforms top detection methods like DPM\n and R-CNN by a wide margin. Since YOLO is highly gen\neralizable it is less likely to break down when applied to\n new domains or unexpected inputs.\n YOLOstilllags behind state-of-the-art detection systems\n in accuracy. While it can quickly identify objects in im\nages it struggles to precisely localize some objects, espe\ncially small ones. We examine these tradeoffs further in our\n experiments.\n All of our training and testing code is open source. A\n variety of pretrained models are also available to download.\n 2. Unified Detection\n We unify the separate components of object detection\n into a single neural network. Our network uses features\n from the entire image to predict each bounding box. It also\n predicts all bounding boxes across all classes for an im\nage simultaneously. This means our network reasons glob\nally about the full image and all the objects in the image.\n The YOLO design enables end-to-end training and real\ntime speeds while maintaining high average precision.\n Our system divides the input image into an S S grid.\n If the center of an object falls into a grid cell, that grid cell\n is responsible for detecting that object.\n Each grid cell predicts B bounding boxes and confidence\n scores for those boxes. These confidence scores reflect how\n confident the model is that the box contains an object and\n also how accurate it thinks the box is that it predicts. For\nmally we define confidence as Pr(Object) IOUtruth\n pred . If no\n object exists in that cell, the confidence scores should be\n zero. Otherwise we want the confidence score to equal the\n intersection over union (IOU) between the predicted box\n and the ground truth.\n Each bounding box consists of 5 predictions: x, y, w, h,\n and confidence. The (xy) coordinates represent the center\n of the box relative to the bounds of the grid cell. The width\n and height are predicted relative to the whole image. Finally\n the confidence prediction represents the IOU between the\n predicted box and any ground truth box.\n Each grid cell also predicts C conditional class proba\nbilities, Pr(ClassiObject). These probabilities are condi\ntioned on the grid cell containing an object. We only predict\n one set of class probabilities per grid cell, regardless of the\n number of boxes B.\n At test time we multiply the conditional class probabili\nties and the individual box confidence predictions,\n Pr(ClassiObject) Pr(Object) IOU truth\n pred = Pr(Classi) IOU truth\n pred\n (1)\n which gives us class-specific confidence scores for each\n box. These scores encode both the probability of that class\n appearing in the box and how well the predicted box fits the\n object.\n S × S grid on input\n Bounding boxes + confidence\n Class probability map\n Final detections\n Figure 2: The Model. Our system models detection as a regres\nsion problem. It divides the image into an S S grid and for each\n grid cell predicts B bounding boxes, confidence for those boxes,\n and C class probabilities. These predictions are encoded as an\n S S (B 5+C)tensor.\n For evaluating YOLO on PASCAL VOC, we use S = 7,\n B =2. PASCAL VOC has 20 labelled classes so C = 20.\n Our final prediction is a 7 7 30 tensor.\n 2.1. Network Design\n We implement this model as a convolutional neural net\nwork and evaluate it on the PASCAL VOC detection dataset\n [9]. The initial convolutional layers of the network extract\n features from the image while the fully connected layers\n predict the output probabilities and coordinates.\n Our network architecture is inspired by the GoogLeNet\n model for image classification [34]. Our network has 24\n convolutional layers followed by 2 fully connected layers.\n Instead of the inception modules used by GoogLeNet, we\n simply use 1 1reduction layers followed by 3 3 convo\nlutional layers, similar to Lin et al [22]. The full network is\n shown in Figure 3.\n We also train a fast version of YOLO designed to push\n the boundaries of fast object detection. Fast YOLO uses a\n neural network with fewer convolutional layers (9 instead\n of 24) and fewer filters in those layers. Other than the size\n of the network, all training and testing parameters are the\n same between YOLO and Fast YOLO.\n448\n 7\n 7\n 448\n 112\n 3\n 3\n 3\n 112\n 192\n Conv. Layer\n 7x7x64-s-2\n Maxpool Layer\n 2x2-s-2\n 56\n 3\n 3\n 56\n Conv. Layer\n 3x3x192\n Maxpool Layer\n 2x2-s-2\n 256\n 28\n 3\n 3\n 28\n Conv. Layers\n 1x1x128\n 3x3x256\n 1x1x256\n 3x3x512\n Maxpool Layer\n 2x2-s-2\n 512\n 14\n 3\n 3\n 14\n Conv. Layers\n 1x1x256\n 3x3x512\n 1x1x512\n 1024\n 7\n 3\n 3\n 7\n 1024\n Conv. Layers\n 1x1x512\n 3x3x1024\n 3x3x1024\n 3x3x1024-s-2\n 7\n 7\n Conv. Layers\n 3x3x1024\n 3x3x1024\n 1024\n 4096\n Conn. Layer\n 7\n 7\n 30\n Conn. Layer\n } \n× 4\n 3x3x1024\n Maxpool Layer\n 2x2-s-2\n } \n× 2\n Figure 3: The Architecture. Our detection network has 24 convolutional layers followed by 2 fully connected layers. Alternating 1 1\n convolutional layers reduce the features space from preceding layers. We pretrain the convolutional layers on the ImageNet classification\n task at half the resolution (224 224 input image) and then double the resolution for detection.\n The final output of our network is the 7 7 30 tensor\n of predictions.\n 2.2. Training\n We pretrain our convolutional layers on the ImageNet\n 1000-class competition dataset [30]. For pretraining we use\n the first 20 convolutional layers from Figure 3 followed by a\n average-pooling layer and a fully connected layer. We train\n this network for approximately a week and achieve a single\n crop top-5 accuracy of 88% on the ImageNet 2012 valida\ntion set, comparable to the GoogLeNet models in Caffe’s\n Model Zoo [24]. We use the Darknet framework for all\n training and inference [26].\n We then convert the model to perform detection. Ren et\n al. show that adding both convolutional and connected lay\ners to pretrained networks can improve performance [29].\n Following their example, we add four convolutional lay\ners and two fully connected layers with randomly initialized\n weights. Detection often requires fine-grained visual infor\nmation so we increase the input resolution of the network\n from 224 224to 448 448.\n Our final layer predicts both class probabilities and\n bounding box coordinates. We normalize the bounding box\n width and height by the image width and height so that they\n fall between 0 and 1. We parametrize the bounding box x\n and y coordinates to be offsets of a particular grid cell loca\ntion so they are also bounded between 0 and 1.\n Weuse alinear activation function for the final layer and\n all other layers use the following leaky rectified linear acti\nvation:\n (x) = x\n if x > 0\n 01x otherwise\n (2)\n model. We use sum-squared error because it is easy to op\ntimize, however it does not perfectly align with our goal of\n maximizing average precision. It weights localization er\nror equally with classification error which may not be ideal.\n Also, in every image many grid cells do not contain any\n object. This pushes the “confidence” scores of those cells\n towards zero, often overpowering the gradient from cells\n that do contain objects. This can lead to model instability,\n causing training to diverge early on.\n To remedy this, we increase the loss from bounding box\n coordinate predictions and decrease the loss from confi\ndence predictions for boxes that don’t contain objects. We\n use two parameters, coord and noobj to accomplish this. We\n set coord = 5 and noobj = 5.\n Sum-squared error also equally weights errors in large\n boxes and small boxes. Our error metric should reflect that\n small deviations in large boxes matter less than in small\n boxes. To partially address this we predict the square root\n of the bounding box width and height instead of the width\n and height directly.\n YOLO predicts multiple bounding boxes per grid cell.\n At training time we only want one bounding box predictor\n to be responsible for each object. We assign one predictor\n to be “responsible” for predicting an object based on which\n prediction has the highest current IOU with the ground\n truth. This leads to specialization between the bounding box\n predictors. Each predictor gets better at predicting certain\n sizes, aspect ratios, or classes of object, improving overall\n recall.\n During training we optimize the following, multi-part\n We optimize for sum-squared error in the output of our\nlossfunction:\n coord\n S2\n i=0\n B\n j=0\n 1obj\n ij (xi xi)2+(yi yi)2\n + coord\n S2\n i=0\n B\n j=0\n 1obj\n ij wi wi\n 2+ hi hi\n 2\n +\n S2\n i=0\n B\n j=0\n 1obj\n ij Ci Ci\n 2\n + noobj\n S2\n i=0\n B\n j=0\n 1noobj\n ij Ci Ci\n 2\n +\n S2\n i=0\n 1obj\n i\n c classes\n (pi(c) pi(c))2 (3)\n where1obj\n i denotes ifobjectappears incell iand1obj\n ij de\nnotes that thejthboundingboxpredictor incell i is“re\nsponsible”forthatprediction.\n Notethat thelossfunctiononlypenalizesclassification\n errorifanobjectispresentinthatgridcell(hencethecon\nditionalclassprobabilitydiscussedearlier). Italsoonlype\nnalizesboundingboxcoordinateerror if thatpredictor is\n “responsible”forthegroundtruthbox(i.e. hasthehighest\n IOUofanypredictorinthatgridcell).\n Wetrainthenetworkforabout135epochsonthetrain\ningandvalidationdatasetsfromPASCALVOC2007and\n 2012.Whentestingon2012wealsoincludetheVOC2007\n testdatafor training. Throughout trainingweuseabatch\n sizeof64,amomentumof09andadecayof00005.\n Our learningrateschedule isas follows: For thefirst\n epochsweslowlyraisethelearningratefrom10 3to10 2.\n Ifwestartatahighlearningrateourmodeloftendiverges\n duetounstablegradients.Wecontinuetrainingwith10 2\n for75epochs, then10 3 for30epochs, andfinally10 4\n for30epochs.\n Toavoidoverfittingweusedropoutandextensivedata\n augmentation.Adropout layerwithrate=.5afterthefirst\n connectedlayerpreventsco-adaptationbetweenlayers[18].\n For dataaugmentationwe introduce randomscalingand\n translationsofupto20%of theoriginal imagesize. We\n alsorandomlyadjusttheexposureandsaturationoftheim\nagebyuptoafactorof15intheHSVcolorspace.\n 2.3.Inference\n Justlikeintraining,predictingdetectionsforatestimage\n onlyrequiresonenetworkevaluation.OnPASCALVOCthe\n networkpredicts98boundingboxesper imageandclass\n probabilitiesforeachbox. YOLOisextremelyfastat test\n timesinceitonlyrequiresasinglenetworkevaluation,un\nlikeclassifier-basedmethods.\n Thegriddesignenforcesspatialdiversityinthebound\ningboxpredictions. Often it isclearwhichgridcell an\n objectfallsintoandthenetworkonlypredictsoneboxfor\n eachobject. However, somelargeobjectsorobjectsnear\n theborderofmultiplecellscanbewelllocalizedbymulti\nplecells.Non-maximalsuppressioncanbeusedtofixthese\n multipledetections.Whilenotcritical toperformanceasit\n isforR-CNNorDPM,non-maximal suppressionadds2\n3%inmAP.\n 2.4.LimitationsofYOLO\n YOLOimposesstrongspatial constraintsonbounding\n boxpredictionssinceeachgridcellonlypredictstwoboxes\n andcanonlyhaveoneclass. Thisspatial constraint lim\nits thenumberofnearbyobjects thatourmodel canpre\ndict.Ourmodelstruggleswithsmallobjectsthatappearin\n groups,suchasflocksofbirds.\n Sinceourmodel learnstopredictboundingboxesfrom\n data, itstrugglestogeneralizetoobjectsinneworunusual\n aspect ratiosorconfigurations. Ourmodelalsousesrela\ntivelycoarsefeaturesforpredictingboundingboxessince\n ourarchitecturehasmultipledownsamplinglayersfromthe\n inputimage.\n Finally,whilewetrainonalossfunctionthatapproxi\nmatesdetectionperformance,ourlossfunctiontreatserrors\n thesame insmallboundingboxesversus largebounding\n boxes.Asmallerrorinalargeboxisgenerallybenignbuta\n smallerrorinasmallboxhasamuchgreatereffectonIOU.\n Ourmainsourceoferrorisincorrectlocalizations.\n 3.ComparisontoOtherDetectionSystems\n Objectdetectionisacoreproblemincomputervision.\n Detectionpipelinesgenerallystart byextractinga set of\n robust features frominput images (Haar [25], SIFT[23],\n HOG[4], convolutional features [6]). Then, classifiers\n [36, 21, 13, 10]or localizers [1, 32]areusedtoidentify\n objectsinthefeaturespace. Theseclassifiersor localizers\n areruneitherinslidingwindowfashionoverthewholeim\nageoronsomesubsetofregionsintheimage[35,15,39].\n WecomparetheYOLOdetectionsystemtoseveraltopde\ntectionframeworks,highlightingkeysimilaritiesanddiffer\nences.\n Deformablepartsmodels. Deformablepartsmodels\n (DPM)useaslidingwindowapproachtoobjectdetection\n [10].DPMusesadisjointpipelinetoextractstaticfeatures,\n classifyregions, predictboundingboxes forhighscoring\n regions,etc.Oursystemreplacesallofthesedisparateparts\n withasingleconvolutionalneuralnetwork. Thenetwork\n performsfeatureextraction,boundingboxprediction,non\nmaximalsuppression,andcontextualreasoningallconcur\nrently. Insteadofstaticfeatures, thenetworktrainsthefea\nturesin-lineandoptimizesthemforthedetectiontask.Our\n unifiedarchitectureleadstoafaster,moreaccuratemodel\n thanDPM.\n R-CNN.R-CNNanditsvariantsuseregionproposalsin\nsteadofslidingwindowstofindobjectsinimages.Selective\nSearch [35] generates potential bounding boxes, a convolu\ntional network extracts features, an SVM scores the boxes, a\n linear model adjusts the bounding boxes, and non-max sup\npression eliminates duplicate detections. Each stage of this\n complex pipeline must be precisely tuned independently\n and the resulting system is very slow, taking more than 40\n seconds per image at test time [14].\n YOLO shares some similarities with R-CNN. Each grid\n cell proposes potential bounding boxes and scores those\n boxes using convolutional features. However, our system\n puts spatial constraints on the grid cell proposals which\n helps mitigate multiple detections of the same object. Our\n system also proposes far fewer bounding boxes, only 98\n per image compared to about 2000 from Selective Search.\n Finally, our system combines these individual components\n into a single, jointly optimized model.\n Other Fast Detectors Fast and Faster R-CNN focus on\n speeding up the R-CNN framework by sharing computa\ntion and using neural networks to propose regions instead\n of Selective Search [14] [28]. While they offer speed and\n accuracy improvements over R-CNN, both still fall short of\n real-time performance.\n Many research efforts focus on speeding up the DPM\n pipeline [31] [38] [5]. They speed up HOG computation,\n use cascades, and push computation to GPUs. However,\n only 30Hz DPM [31] actually runs in real-time.\n Instead of trying to optimize individual components of\n a large detection pipeline, YOLO throws out the pipeline\n entirely and is fast by design.\n Detectors for single classes like faces or people can be\n highly optimized since they have to deal with much less\n variation [37]. YOLO is a general purpose detector that\n learns to detect a variety of objects simultaneously.\n Deep MultiBox. Unlike R-CNN, Szegedy et al. train a\n convolutional neural network to predict regions of interest\n [8] instead of using Selective Search. MultiBox can also\n perform single object detection by replacing the confidence\n prediction with a single class prediction. However, Multi\nBox cannot perform general object detection and is still just\n a piece in a larger detection pipeline, requiring further im\nage patch classification. Both YOLO and MultiBox use a\n convolutional network to predict bounding boxes in an im\nage but YOLO is a complete detection system.\n OverFeat. Sermanet et al. train a convolutional neural\n network to perform localization and adapt that localizer to\n perform detection [32]. OverFeat efficiently performs slid\ning window detection but it is still a disjoint system. Over\nFeat optimizes for localization, not detection performance.\n Like DPM, the localizer only sees local information when\n making a prediction. OverFeat cannot reason about global\n context and thus requires significant post-processing to pro\nduce coherent detections.\n MultiGrasp. Our work is similar in design to work on\n grasp detection by Redmon et al [27]. Our grid approach to\n bounding box prediction is based on the MultiGrasp system\n for regression to grasps. However, grasp detection is a much\n simpler task than object detection. MultiGrasp only needs\n to predict a single graspable region for an image containing\n one object. It doesn’t have to estimate the size, location,\n or boundaries of the object or predict it’s class, only find a\n region suitable for grasping. YOLO predicts both bounding\n boxes and class probabilities for multiple objects of multi\nple classes in an image.\n 4. Experiments\n First we compare YOLO with other real-time detection\n systems on PASCAL VOC 2007. To understand the differ\nences between YOLO and R-CNN variants we explore the\n errors on VOC 2007 made by YOLO and Fast R-CNN, one\n of the highest performing versions of R-CNN [14]. Based\n on the different error profiles we show that YOLO can be\n used to rescore Fast R-CNN detections and reduce the er\nrors from background false positives, giving a significant\n performance boost. We also present VOC 2012 results and\n compare mAP to current state-of-the-art methods. Finally,\n weshowthat YOLOgeneralizes to new domains better than\n other detectors on two artwork datasets.\n 4.1. Comparison to Other Real-Time Systems\n Many research efforts in object detection focus on mak\ning standard detection pipelines fast. [5] [38] [31] [14] [17]\n [28] However, only Sadeghi et al. actually produce a de\ntection system that runs in real-time (30 frames per second\n or better) [31]. We compare YOLO to their GPU imple\nmentation of DPM which runs either at 30Hz or 100Hz.\n While the other efforts don’t reach the real-time milestone\n we also compare their relative mAP and speed to examine\n the accuracy-performance tradeoffs available in object de\ntection systems.\n Fast YOLO is the fastest object detection method on\n PASCAL; as far as we know, it is the fastest extant object\n detector. With 527% mAP, it is more than twice as accurate\n as prior work on real-time detection. YOLO pushes mAP to\n 634%while still maintaining real-time performance.\n Wealso train YOLO using VGG-16. This model is more\n accurate but also significantly slower than YOLO. It is use\nful for comparison to other detection systems that rely on\n VGG-16 but since it is slower than real-time the rest of the\n paper focuses on our faster models.\n Fastest DPM effectively speeds up DPM without sacri\nf\n icing much mAP but it still misses real-time performance\n by a factor of 2 [38]. It also is limited by DPM’s relatively\n low accuracy on detection compared to neural network ap\nproaches.\n R-CNN minus R replaces Selective Search with static\n bounding box proposals [20]. While it is much faster than\nReal-TimeDetectors Train mAP FPS\n 100HzDPM[31] 2007 16.0 100\n 30HzDPM[31] 2007 26.1 30\n FastYOLO 2007+2012 52.7 155\n YOLO 2007+2012 63.4 45\n LessThanReal-Time\n FastestDPM[38] 2007 30.4 15\n R-CNNMinusR[20] 2007 53.5 6\n FastR-CNN[14] 2007+2012 70.0 0.5\n FasterR-CNNVGG-16[28] 2007+2012 73.2 7\n FasterR-CNNZF[28] 2007+2012 62.1 18\n YOLOVGG-16 2007+2012 66.4 21\n Table1:Real-TimeSystemsonPASCALVOC2007.Compar\ningtheperformanceandspeedof fastdetectors. FastYOLOis\n thefastestdetectoronrecordforPASCALVOCdetectionandis\n still twiceasaccurateasanyother real-timedetector. YOLOis\n 10mAPmoreaccuratethanthefastversionwhilestillwellabove\n real-timeinspeed.\n R-CNN,itstillfallsshortofreal-timeandtakesasignificant\n accuracyhitfromnothavinggoodproposals.\n FastR-CNNspeedsuptheclassificationstageofR-CNN\n but itstillreliesonselectivesearchwhichcantakearound\n 2secondsper imagetogenerateboundingboxproposals.\n ThusithashighmAPbutat05fpsit isstillfarfromreal\ntime.\n TherecentFasterR-CNNreplacesselectivesearchwith\n aneural network toproposeboundingboxes, similar to\n Szegedyetal. [8] Inour tests, theirmostaccuratemodel\n achieves7fpswhileasmaller, lessaccurateone runsat\n 18fps. TheVGG-16versionofFasterR-CNNis10mAP\n higherbut isalso6timesslower thanYOLO.TheZeiler\nFergusFasterR-CNNisonly2.5timesslowerthanYOLO\n butisalsolessaccurate.\n 4.2.VOC2007ErrorAnalysis\n TofurtherexaminethedifferencesbetweenYOLOand\n state-of-the-artdetectors,welookatadetailedbreakdown\n of resultsonVOC2007. WecompareYOLOtoFastR\nCNNsinceFastR-CNNisoneof thehighestperforming\n detectorsonPASCALandit’sdetectionsarepubliclyavail\nable.\n WeusethemethodologyandtoolsofHoiemetal. [19]\n Foreachcategoryat test timewelookat thetopNpredic\ntionsforthatcategory. Eachpredictioniseithercorrector\n itisclassifiedbasedonthetypeoferror:\n Correct:correctclassandIOU>5\n Localization:correctclass, 1<IOU<5\n Similar:classissimilar,IOU>1\n Correct: 71.6% Correct: 65.5%\n Loc: 8.6%\n Sim: 4.3%\n Other: 1.9%\n Background: 13.6%\n Loc: 19.0%\n Sim: 6.75%\n Other: 4.0%\n Background: 4.75%\n Fast R-CNN YOLO\n Figure4: ErrorAnalysis: FastR-CNNvs. YOLOThese\n chartsshowthepercentageoflocalizationandbackgrounderrors\n inthetopNdetectionsforvariouscategories(N=#objectsinthat\n category).\n Other:classiswrong,IOU>1\n Background: IOU<1foranyobject\n Figure4showsthebreakdownofeacherror typeaver\nagedacrossall20classes.\n YOLOstrugglestolocalizeobjectscorrectly. Localiza\ntionerrorsaccountformoreofYOLO’serrorsthanallother\n sourcescombined. FastR-CNNmakesmuchfewer local\nizationerrorsbut farmorebackgrounderrors. 13.6%of\n it’stopdetectionsarefalsepositivesthatdon’tcontainany\n objects. FastR-CNNisalmost3xmore likelytopredict\n backgrounddetectionsthanYOLO.\n 4.3.CombiningFastR-CNNandYOLO\n YOLOmakesfarfewerbackgroundmistakesthanFast\n R-CNN.ByusingYOLOtoeliminatebackgrounddetec\ntionsfromFastR-CNNwegetasignificantboostinperfor\nmance. ForeveryboundingboxthatR-CNNpredictswe\n checktoseeifYOLOpredictsasimilarbox. Ifitdoes,we\n give thatpredictionaboostbasedontheprobabilitypre\ndictedbyYOLOandtheoverlapbetweenthetwoboxes.\n ThebestFastR-CNNmodelachievesamAPof71.8%\n ontheVOC2007testset.WhencombinedwithYOLO,its\n mAP Combined Gain\n FastR-CNN 71.8-\nFastR-CNN(2007data) 66.9 72.4 .6\n FastR-CNN(VGG-M) 59.2 72.4 .6\n FastR-CNN(CaffeNet) 57.1 72.1 .3\n YOLO 63.4 75.0 3.2\n Table2:ModelcombinationexperimentsonVOC2007.We\n examinetheeffectofcombiningvariousmodelswiththebestver\nsionofFastR-CNN.OtherversionsofFastR-CNNprovideonly\n asmallbenefitwhileYOLOprovidesasignificantperformance\n boost.\nVOC2012test mAP aero bike bird boat bottle bus car cat chair cow table dog horse mbikepersonplant sheep sofa train tv\n MR CNN MORE DATA[11] 73.9 85.5 82.9 76.6 57.8 62.7 79.4 77.2 86.6 55.0 79.1 62.2 87.0 83.4 84.7 78.9 45.3 73.4 65.8 80.3 74.0\n HyperNet VGG\n HyperNet SP\n 71.4 84.2 78.5 73.6 55.6 53.7 78.7 79.8 87.7 49.6 74.9 52.1 86.0 81.7 83.3 81.8 48.6 73.5 59.4 79.9 65.7\n 71.3 84.1 78.3 73.3 55.5 53.6 78.6 79.6 87.5 49.5 74.9 52.1 85.6 81.6 83.2 81.6 48.4 73.2 59.3 79.7 65.6\n Fast R-CNN + YOLO\n 70.7\n MR CNN\n S\n 83.4\n 78.5\n 73.5\n 55.8\n 43.4\n 79.1\n 73.1\n 89.4\n 49.4\n 75.5\n 57.0\n 87.5\n 80.9\n 81.0\n 74.7\n 41.8\n 71.5\n 68.5\n 82.1\n 67.2\n CNN[11] 70.7 85.0 79.6 71.5 55.3 57.7 76.0 73.9 84.6 50.5 74.3 61.7 85.5 79.9 81.7 76.4 41.0 69.0 61.2 77.7 72.1\n Faster R-CNN [28] 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\n DEEP ENS COCO 70.1 84.0 79.4 71.6 51.9 51.1 74.1 72.1 88.6 48.3 73.4 57.8 86.1 80.0 80.7 70.4 46.6 69.6 68.8 75.9 71.4\n NoC[29] 68.8 82.8 79.0 71.6 52.3 53.7 74.1 69.0 84.9 46.9 74.3 53.1 85.0 81.3 79.5 72.2 38.9 72.4 59.5 76.7 68.1\n Fast R-CNN [14] 68.4 82.3 78.4 70.8 52.3 38.7 77.8 71.6 89.3 44.2 73.0 55.0 87.5 80.5 80.8 72.0 35.1 68.3 65.7 80.4 64.2\n UMICH FGS STRUCT 66.4 82.9 76.1 64.1 44.6 49.4 70.3 71.2 84.6 42.7 68.6 55.8 82.7 77.1 79.9 68.7 41.4 69.0 60.0 72.0 66.2\n NUS NIN C2000[7] 63.8 80.2 73.8 61.9 43.7 43.0 70.3 67.6 80.7 41.9 69.7 51.7 78.2 75.2 76.9 65.1 38.6 68.3 58.0 68.7 63.3\n BabyLearning [7] 63.2 78.0 74.2 61.3 45.7 42.7 68.2 66.8 80.2 40.6 70.0 49.8 79.0 74.5 77.9 64.0 35.3 67.9 55.7 68.7 62.6\n NUS NIN 62.4 77.9 73.1 62.6 39.5 43.3 69.1 66.4 78.9 39.1 68.1 50.0 77.2 71.3 76.1 64.7 38.4 66.9 56.2 66.9 62.7\n R-CNN VGGBB[13] 62.4 79.6 72.7 61.9 41.2 41.9 65.9 66.4 84.6 38.5 67.2 46.7 82.0 74.8 76.0 65.2 35.6 65.4 54.2 67.4 60.3\n R-CNN VGG[13] 59.2 76.8 70.9 56.6 37.5 36.9 62.9 63.6 81.1 35.7 64.3 43.9 80.4 71.6 74.0 60.0 30.8 63.4 52.0 63.5 58.7\n YOLO 57.9 77.0 67.2\n 57.7\n 38.3\n 22.7\n 68.3\n 55.9\n 81.4\n 36.2\n 60.8\n 48.5\n 77.2\n 72.3\n 71.3\n 63.5\n 28.9\n 50.8\n Feature Edit [33] 56.3 74.6 69.1 54.4 39.1 33.1 65.2 62.7 69.7 30.8 56.0 44.6 70.0 64.4 71.1 60.2 33.3 61.3 46.4 61.7 57.8\n R-CNN BB[13] 53.3 71.8 65.8 52.0 34.1 32.6 59.6 60.0 69.8 27.6 52.0 41.7 69.6 61.3 68.3 57.8 29.6 57.8 40.9 59.3 54.1\n SDS [16] 50.7 69.7 58.4 48.5 28.3 28.8 61.3 57.5 70.8 24.1 50.7 35.9 64.9 59.1 65.8 57.1 26.0 58.8 38.6 58.9 50.7\n R-CNN [13] 49.6 68.1 63.8 46.1 29.4 27.9 56.6 57.0 65.9 26.5 48.7 39.5 66.2 57.3 65.4 53.2 26.2 54.5 38.1 50.6 51.6\n 52.2\n 54.8\n 73.9\n Table 3: PASCAL VOC 2012 Leaderboard. YOLO compared with the full comp4 (outside data allowed) public leaderboard as of\n November 6th, 2015. Mean average precision and per-class average precision are shown for a variety of detection methods. YOLO is the\n only real-time detector. Fast R-CNN + YOLO is the forth highest scoring method, with a 2.3% boost over Fast R-CNN.\n mAPincreases by 3.2% to 75.0%. We also tried combining\n the top Fast R-CNN model with several other versions of\n Fast R-CNN. Those ensembles produced small increases in\n mAPbetween .3 and .6%, see Table 2 for details.\n The boost from YOLO is not simply a byproduct of\n model ensembling since there is little benefit from combin\ning different versions of Fast R-CNN. Rather, it is precisely\n because YOLO makes different kinds of mistakes at test\n time that it is so effective at boosting Fast R-CNN’s per\nformance.\n Unfortunately, this combination doesn’t benefit from the\n speed of YOLO since we run each model seperately and\n then combine the results. However, since YOLO is so fast\n it doesn’t add any significant computational time compared\n to Fast R-CNN.\n 4.4. VOC 2012 Results\n On the VOC 2012 test set, YOLO scores 57.9% mAP.\n This is lower than the current state of the art, closer to\n the original R-CNN using VGG-16, see Table 3. Our sys\ntem struggles with small objects compared to its closest\n competitors. On categories like bottle, sheep, and\n tv/monitor YOLO scores 8-10% lower than R-CNN or\n Feature Edit. However, on other categories like cat and\n train YOLOachieves higher performance.\n Our combined Fast R-CNN + YOLOmodelisoneof the\n highest performing detection methods. Fast R-CNN gets\n a 2.3% improvement from the combination with YOLO,\n boosting it 5 spots up on the public leaderboard.\n 4.5. Generalizability: Person Detection in Artwork\n Academic datasets for object detection draw the training\n and testing data from the same distribution. In real-world\n applications it is hard to predict all possible use cases and\n the test data can diverge from what the system has seen be\nfore [3]. We compare YOLO to other detection systems on\n the Picasso Dataset [12] and the People-Art Dataset [3], two\n datasets for testing person detection on artwork.\n Figure 5 shows comparative performance between\n YOLOandother detection methods. For reference, we give\n VOC 2007 detection AP on person where all models are\n trained only on VOC 2007 data. On Picasso models are\n trained on VOC 2012 while on People-Art they are trained\n on VOC2010.\n R-CNN has high AP on VOC 2007. However, R-CNN\n drops off considerably when applied to artwork. R-CNN\n uses Selective Search for bounding box proposals which is\n tuned for natural images. The classifier step in R-CNN only\n sees small regions and needs good proposals.\n DPM maintains its AP well when applied to artwork.\n Prior work theorizes that DPM performs well because it has\n strong spatial models of the shape and layout of objects.\n Though DPM doesn’t degrade as much as R-CNN, it starts\n from a lower AP.\n YOLO has good performance on VOC 2007 and its AP\n degrades less than other methods when applied to artwork.\n Like DPM, YOLO models the size and shape of objects,\n as well as relationships between objects and where objects\n commonly appear. Artwork and natural images are very\n different on a pixel level but they are similar in terms of\n the size and shape of objects, thus YOLO can still predict\n good bounding boxes and detections.\n 5. Real-Time Detection In The Wild\n YOLOis a fast, accurate object detector, making it ideal\n for computer vision applications. We connect YOLO to a\n webcam and verify that it maintains real-time performance,\nHumans\n YOLO\n DPM\n Poselets\n RCNN\n D&T\n (a) Picasso Dataset precision-recall curves.\n Picasso\n VOC2007\n AP AP BestF1\n People-Art\n AP\n YOLO\n R-CNN\n DPM\n Poselets [2]\n D&T[4]\n 59.2 53.3\n 54.2 10.4\n 43.2 37.8\n 36.5 17.8\n1.9\n 0.590\n 0.226\n 0.458\n 0.271\n 0.051\n 45\n 26\n 32\n (b) Quantitative results on the VOC 2007, Picasso, and People-Art Datasets.\n The Picasso Dataset evaluates on both AP and best F1 score.\n Figure 5: Generalization results on Picasso and People-Art datasets.\n Figure 6: Qualitative Results. YOLO running on sample artwork and natural images from the internet. It is mostly accurate although it\n does think one person is an airplane.\n including the time to fetch images from the camera and dis\nplay the detections.\n The resulting system is interactive and engaging. While\n YOLO processes images individually, when attached to a\n webcam it functions like a tracking system, detecting ob\njects as they move around and change in appearance. A\n demo of the system and the source code can be found on\n our project website: http://pjreddie.com/yolo/.\n 6. Conclusion\n We introduce YOLO, a unified model for object detec\ntion. Our model is simple to construct and can be trained\n directly on full images. Unlike classifier-based approaches,\n YOLOistrainedonalossfunction that directly corresponds\n to detection performance and the entire model is trained\n jointly.\n Fast YOLO is the fastest general-purpose object detec\ntor in the literature and YOLO pushes the state-of-the-art in\n real-time object detection. YOLO also generalizes well to\n new domains making it ideal for applications that rely on\n fast, robust object detection.\n Acknowledgements: This work is partially supported by\n ONRN00014-13-1-0720, NSFIIS-1338054, and The Allen\n Distinguished Investigator Award.\nReferences\n [1] M. B. Blaschko and C. H. Lampert. Learning to localize ob\njects with structured output regression. In Computer Vision\nECCV2008, pages 2–15. Springer, 2008. 4\n [2] L. Bourdev and J. Malik. Poselets: Body part detectors\n trained using 3d human pose annotations. In International\n Conference on Computer Vision (ICCV), 2009. 8\n [3] H. Cai, Q. Wu, T. Corradi, and P. Hall. The cross\ndepiction problem: Computer vision algorithms for recog\nnising objects in artwork and in photographs. arXiv preprint\n arXiv:1505.00110, 2015. 7\n [4] N. Dalal and B. Triggs. Histograms of oriented gradients for\n human detection. In Computer Vision and Pattern Recogni\ntion, 2005. CVPR 2005. IEEE Computer Society Conference\n on, volume 1, pages 886–893. IEEE, 2005. 4, 8\n [5] T. Dean, M. Ruzon, M. Segal, J. Shlens, S. Vijaya\nnarasimhan, J. Yagnik, et al. Fast, accurate detection of\n 100,000 object classes on a single machine. In Computer\n Vision and Pattern Recognition (CVPR), 2013 IEEE Confer\nence on, pages 1814–1821. IEEE, 2013. 5\n [6] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang,\n E. Tzeng, and T. Darrell. Decaf: A deep convolutional acti\nvation feature for generic visual recognition. arXiv preprint\n arXiv:1310.1531, 2013. 4\n [7] J. Dong, Q. Chen, S. Yan, and A. Yuille. Towards unified\n object detection and semantic segmentation. In Computer\n Vision–ECCV 2014, pages 299–314. Springer, 2014. 7\n [8] D. Erhan, C. Szegedy, A. Toshev, and D. Anguelov. Scalable\n object detection using deep neural networks. In Computer\n Vision and Pattern Recognition (CVPR), 2014 IEEE Confer\nence on, pages 2155–2162. IEEE, 2014. 5, 6\n [9] M. Everingham, S. M. A. Eslami, L. Van Gool, C. K. I.\n Williams, J. Winn, and A. Zisserman. The pascal visual ob\nject classes challenge: A retrospective. International Journal\n of Computer Vision, 111(1):98–136, Jan. 2015. 2\n [10] P.F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ra\nmanan. Object detection with discriminatively trained part\n based models. IEEE Transactions on Pattern Analysis and\n Machine Intelligence, 32(9):1627–1645, 2010. 1, 4\n [11] S. Gidaris and N. Komodakis. Object detection via a multi\nregion & semantic segmentation-aware CNN model. CoRR,\n abs/1505.01749, 2015. 7\n [12] S. Ginosar, D. Haas, T. Brown, and J. Malik. Detecting peo\nple in cubist art. In Computer Vision-ECCV 2014 Workshops,\n pages 101–116. Springer, 2014. 7\n [13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea\nture hierarchies for accurate object detection and semantic\n segmentation. In Computer Vision and Pattern Recognition\n (CVPR), 2014 IEEE Conference on, pages 580–587. IEEE,\n 2014. 1, 4, 7\n [14] R. B. Girshick. Fast R-CNN. CoRR, abs/1504.08083, 2015.\n 2, 5, 6, 7\n [15] S. Gould, T. Gao, and D. Koller. Region-based segmenta\ntion and object detection. In Advances in neural information\n processing systems, pages 655–663, 2009. 4\n [16] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Simul\ntaneous detection and segmentation. In Computer Vision\nECCV2014, pages 297–312. Springer, 2014. 7\n [17] K.He,X.Zhang,S.Ren,andJ.Sun. Spatialpyramidpooling\n in deep convolutional networks for visual recognition. arXiv\n preprint arXiv:1406.4729, 2014. 5\n [18] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\n R. R. Salakhutdinov. Improving neural networks by pre\nventing co-adaptation of feature detectors. arXiv preprint\n arXiv:1207.0580, 2012. 4\n [19] D.Hoiem,Y.Chodpathumwan,andQ.Dai. Diagnosingerror\n in object detectors. In Computer Vision–ECCV 2012, pages\n 340–353. Springer, 2012. 6\n [20] K. Lenc and A. Vedaldi. R-cnn minus r. arXiv preprint\n arXiv:1506.06981, 2015. 5, 6\n [21] R. Lienhart and J. Maydt. An extended set of haar-like fea\ntures for rapid object detection. In Image Processing. 2002.\n Proceedings. 2002 International Conference on, volume 1,\n pages I–900. IEEE, 2002. 4\n [22] M. Lin, Q. Chen, and S. Yan. Network in network. CoRR,\n abs/1312.4400, 2013. 2\n [23] D. G. Lowe. Object recognition from local scale-invariant\n features. In Computer vision, 1999. The proceedings of the\n seventh IEEE international conference on, volume 2, pages\n 1150–1157. Ieee, 1999. 4\n [24] D. Mishkin.\n val.\n Models accuracy on imagenet 2012\n https://github.com/BVLC/caffe/wiki/\n Models-accuracy-on-ImageNet-2012-val. Ac\ncessed: 2015-10-2. 3\n [25] C. P. Papageorgiou, M. Oren, and T. Poggio. A general\n framework for object detection. In Computer vision, 1998.\n sixth international conference on, pages 555–562. IEEE,\n 1998. 4\n [26] J. Redmon. Darknet: Open source neural networks in c.\n http://pjreddie.com/darknet/, 2013–2016. 3\n [27] J. RedmonandA.Angelova. Real-timegraspdetection using\n convolutional neural networks. CoRR, abs/1412.3128, 2014.\n 5\n [28] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: To\nwards real-time object detection with region proposal net\nworks. arXiv preprint arXiv:1506.01497, 2015. 5, 6, 7\n [29] S. Ren, K. He, R. B. Girshick, X. Zhang, and J. Sun. Object\n detection networks on convolutional feature maps. CoRR,\n abs/1504.06066, 2015. 3, 7\n [30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,\n S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,\n A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual\n Recognition Challenge. International Journal of Computer\n Vision (IJCV), 2015. 3\n [31] M. A. Sadeghi and D. Forsyth. 30hz object detection with\n dpm v5. In Computer Vision–ECCV 2014, pages 65–79.\n Springer, 2014. 5, 6\n [32] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,\n and Y. LeCun. Overfeat: Integrated recognition, localiza\ntion and detection using convolutional networks. CoRR,\n abs/1312.6229, 2013. 4, 5\n[33] Z.ShenandX.Xue. Domoredropoutsinpool5featuremaps\n for better object detection. arXiv preprint arXiv:1409.6911,\n 2014. 7\n [34] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,\n D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.\n Going deeper with convolutions. CoRR, abs/1409.4842,\n 2014. 2\n [35] J. R. Uijlings, K. E. van de Sande, T. Gevers, and A. W.\n Smeulders. Selective search for object recognition. Inter\nnational journal of computer vision, 104(2):154–171, 2013.\n 4\n [36] P. Viola and M. Jones. Robust real-time object detection.\n International Journal of Computer Vision, 4:34–47, 2001. 4\n [37] P. Viola and M. J. Jones. Robust real-time face detection.\n International journal of computer vision, 57(2):137–154,\n 2004. 5\n [38] J. Yan, Z. Lei, L. Wen, and S. Z. Li. The fastest deformable\n part model for object detection. In Computer Vision and Pat\ntern Recognition (CVPR), 2014 IEEE Conference on, pages\n 2497–2504. IEEE, 2014. 5, 6\n [39] C. L. Zitnick and P. Doll´ar. Edge boxes: Locating object pro\nposals from edges. In Computer Vision–ECCV 2014, pages\n 391–405. Springer, 2014. 4\nYou Only Look Once:\n Unified, Real-Time Object Detection\n Joseph Redmon , Santosh Divvala , Ross Girshick , Ali Farhadi\n University of Washington , Allen Institute for AI , Facebook AI Research\n http://pjreddie.com/yolo/\n Abstract\n arXiv:1506.02640v5  [cs.CV]  9 May 2016\n We present YOLO, a new approach to object detection.\n Prior work onobject detection repurposes classifiers to per\nform detection. Instead, we frame object detection as a re\ngression problem to spatially separated bounding boxes and\n associated class probabilities. A single neural network pre\ndicts bounding boxes and class probabilities directly from\n full images in one evaluation. Since the whole detection\n pipeline is a single network, it can be optimized end-to-end\n directly on detection performance.\n 1. Resize image.\n 2. Run convolutional network.\n 3. Non-max suppression.\n Person: 0.64\n Horse: 0.28\n Dog: 0.30\n Figure 1: The YOLO Detection System. Processing images\n with YOLO is simple and straightforward. Our system (1) resizes\n the input image to 448 448, (2) runs a single convolutional net\nwork on the image, and (3) thresholds the resulting detections by\n the model’s confidence.\n Our unified architecture is extremely fast. Our base\n YOLO model processes images in real-time at 45 frames\n per second. A smaller version of the network, Fast YOLO,\n processes an astounding 155 frames per second while\n still achieving double the mAP of other real-time detec\ntors. Compared to state-of-the-art detection systems, YOLO\n makes more localization errors but is less likely to predict\n false positives on background. Finally, YOLO learns very\n general representations of objects. It outperforms other de\ntection methods, including DPM and R-CNN, when gener\nalizing from natural images to other domains like artwork.\n 1. Introduction\n Humans glance at an image and instantly know what ob\njects are in the image, where they are, and how they inter\nact. The human visual system is fast and accurate, allow\ning us to perform complex tasks like driving with little con\nscious thought. Fast, accurate algorithms for object detec\ntion would allow computers to drive cars without special\nized sensors, enable assistive devices to convey real-time\n scene information to human users, and unlock the potential\n for general purpose, responsive robotic systems.\n Current detection systems repurpose classifiers to per\nform detection. To detect an object, these systems take a\n classifier for that object and evaluate it at various locations\n and scales in a test image. Systems like deformable parts\n models (DPM) use a sliding window approach where the\n classifier is run at evenly spaced locations over the entire\n image [10].\n Morerecent approaches like R-CNN use region proposal\n methods to first generate potential bounding boxes in an im\nage and then run a classifier on these proposed boxes. After\n classification, post-processing is used to refine the bound\ning boxes, eliminate duplicate detections, and rescore the\n boxes based on other objects in the scene [13]. These com\nplex pipelines are slow and hard to optimize because each\n individual component must be trained separately.\n Wereframe object detection as a single regression prob\nlem, straight from image pixels to bounding box coordi\nnates and class probabilities. Using our system, you only\n look once (YOLO) at an image to predict what objects are\n present and where they are.\n YOLO is refreshingly simple: see Figure 1. A sin\ngle convolutional network simultaneously predicts multi\nple bounding boxes and class probabilities for those boxes.\n YOLO trains on full images and directly optimizes detec\ntion performance. This unified model has several benefits\n over traditional methods of object detection.\n First, YOLO is extremely fast. Since we frame detection\n as a regression problem we don’t need a complex pipeline.\n We simply run our neural network on a new image at test\n time to predict detections. Our base network runs at 45\n frames per second with no batch processing on a Titan X\n GPU and a fast version runs at more than 150 fps. This\n means we can process streaming video in real-time with\n less than 25 milliseconds of latency. Furthermore, YOLO\n achieves more than twice the mean average precision of\n other real-time systems. For a demo of our system running\n in real-time on a webcam please see our project webpage:\n http://pjreddie.com/yolo/.\n Second, YOLO reasons globally about the image when\n 1\nmaking predictions. Unlike sliding window and region\n proposal-based techniques, YOLO sees the entire image\n during training and test time so it implicitly encodes contex\ntual information about classes as well as their appearance.\n Fast R-CNN, a top detection method [14], mistakes back\nground patches in an image for objects because it can’t see\n the larger context. YOLO makes less than half the number\n of background errors compared to Fast R-CNN.\n Third, YOLO learns generalizable representations of ob\njects. When trained on natural images and tested on art\nwork, YOLO outperforms top detection methods like DPM\n and R-CNN by a wide margin. Since YOLO is highly gen\neralizable it is less likely to break down when applied to\n new domains or unexpected inputs.\n YOLOstilllags behind state-of-the-art detection systems\n in accuracy. While it can quickly identify objects in im\nages it struggles to precisely localize some objects, espe\ncially small ones. We examine these tradeoffs further in our\n experiments.\n All of our training and testing code is open source. A\n variety of pretrained models are also available to download.\n 2. Unified Detection\n We unify the separate components of object detection\n into a single neural network. Our network uses features\n from the entire image to predict each bounding box. It also\n predicts all bounding boxes across all classes for an im\nage simultaneously. This means our network reasons glob\nally about the full image and all the objects in the image.\n The YOLO design enables end-to-end training and real\ntime speeds while maintaining high average precision.\n Our system divides the input image into an S S grid.\n If the center of an object falls into a grid cell, that grid cell\n is responsible for detecting that object.\n Each grid cell predicts B bounding boxes and confidence\n scores for those boxes. These confidence scores reflect how\n confident the model is that the box contains an object and\n also how accurate it thinks the box is that it predicts. For\nmally we define confidence as Pr(Object) IOUtruth\n pred . If no\n object exists in that cell, the confidence scores should be\n zero. Otherwise we want the confidence score to equal the\n intersection over union (IOU) between the predicted box\n and the ground truth.\n Each bounding box consists of 5 predictions: x, y, w, h,\n and confidence. The (xy) coordinates represent the center\n of the box relative to the bounds of the grid cell. The width\n and height are predicted relative to the whole image. Finally\n the confidence prediction represents the IOU between the\n predicted box and any ground truth box.\n Each grid cell also predicts C conditional class proba\nbilities, Pr(ClassiObject). These probabilities are condi\ntioned on the grid cell containing an object. We only predict\n one set of class probabilities per grid cell, regardless of the\n number of boxes B.\n At test time we multiply the conditional class probabili\nties and the individual box confidence predictions,\n Pr(ClassiObject) Pr(Object) IOU truth\n pred = Pr(Classi) IOU truth\n pred\n (1)\n which gives us class-specific confidence scores for each\n box. These scores encode both the probability of that class\n appearing in the box and how well the predicted box fits the\n object.\n S × S grid on input\n Bounding boxes + confidence\n Class probability map\n Final detections\n Figure 2: The Model. Our system models detection as a regres\nsion problem. It divides the image into an S S grid and for each\n grid cell predicts B bounding boxes, confidence for those boxes,\n and C class probabilities. These predictions are encoded as an\n S S (B 5+C)tensor.\n For evaluating YOLO on PASCAL VOC, we use S = 7,\n B =2. PASCAL VOC has 20 labelled classes so C = 20.\n Our final prediction is a 7 7 30 tensor.\n 2.1. Network Design\n We implement this model as a convolutional neural net\nwork and evaluate it on the PASCAL VOC detection dataset\n [9]. The initial convolutional layers of the network extract\n features from the image while the fully connected layers\n predict the output probabilities and coordinates.\n Our network architecture is inspired by the GoogLeNet\n model for image classification [34]. Our network has 24\n convolutional layers followed by 2 fully connected layers.\n Instead of the inception modules used by GoogLeNet, we\n simply use 1 1reduction layers followed by 3 3 convo\nlutional layers, similar to Lin et al [22]. The full network is\n shown in Figure 3.\n We also train a fast version of YOLO designed to push\n the boundaries of fast object detection. Fast YOLO uses a\n neural network with fewer convolutional layers (9 instead\n of 24) and fewer filters in those layers. Other than the size\n of the network, all training and testing parameters are the\n same between YOLO and Fast YOLO.\n448\n 7\n 7\n 448\n 112\n 3\n 3\n 3\n 112\n 192\n Conv. Layer\n 7x7x64-s-2\n Maxpool Layer\n 2x2-s-2\n 56\n 3\n 3\n 56\n Conv. Layer\n 3x3x192\n Maxpool Layer\n 2x2-s-2\n 256\n 28\n 3\n 3\n 28\n Conv. Layers\n 1x1x128\n 3x3x256\n 1x1x256\n 3x3x512\n Maxpool Layer\n 2x2-s-2\n 512\n 14\n 3\n 3\n 14\n Conv. Layers\n 1x1x256\n 3x3x512\n 1x1x512\n 1024\n 7\n 3\n 3\n 7\n 1024\n Conv. Layers\n 1x1x512\n 3x3x1024\n 3x3x1024\n 3x3x1024-s-2\n 7\n 7\n Conv. Layers\n 3x3x1024\n 3x3x1024\n 1024\n 4096\n Conn. Layer\n 7\n 7\n 30\n Conn. Layer\n } \n× 4\n 3x3x1024\n Maxpool Layer\n 2x2-s-2\n } \n× 2\n Figure 3: The Architecture. Our detection network has 24 convolutional layers followed by 2 fully connected layers. Alternating 1 1\n convolutional layers reduce the features space from preceding layers. We pretrain the convolutional layers on the ImageNet classification\n task at half the resolution (224 224 input image) and then double the resolution for detection.\n The final output of our network is the 7 7 30 tensor\n of predictions.\n 2.2. Training\n We pretrain our convolutional layers on the ImageNet\n 1000-class competition dataset [30]. For pretraining we use\n the first 20 convolutional layers from Figure 3 followed by a\n average-pooling layer and a fully connected layer. We train\n this network for approximately a week and achieve a single\n crop top-5 accuracy of 88% on the ImageNet 2012 valida\ntion set, comparable to the GoogLeNet models in Caffe’s\n Model Zoo [24]. We use the Darknet framework for all\n training and inference [26].\n We then convert the model to perform detection. Ren et\n al. show that adding both convolutional and connected lay\ners to pretrained networks can improve performance [29].\n Following their example, we add four convolutional lay\ners and two fully connected layers with randomly initialized\n weights. Detection often requires fine-grained visual infor\nmation so we increase the input resolution of the network\n from 224 224to 448 448.\n Our final layer predicts both class probabilities and\n bounding box coordinates. We normalize the bounding box\n width and height by the image width and height so that they\n fall between 0 and 1. We parametrize the bounding box x\n and y coordinates to be offsets of a particular grid cell loca\ntion so they are also bounded between 0 and 1.\n Weuse alinear activation function for the final layer and\n all other layers use the following leaky rectified linear acti\nvation:\n (x) = x\n if x > 0\n 01x otherwise\n (2)\n model. We use sum-squared error because it is easy to op\ntimize, however it does not perfectly align with our goal of\n maximizing average precision. It weights localization er\nror equally with classification error which may not be ideal.\n Also, in every image many grid cells do not contain any\n object. This pushes the “confidence” scores of those cells\n towards zero, often overpowering the gradient from cells\n that do contain objects. This can lead to model instability,\n causing training to diverge early on.\n To remedy this, we increase the loss from bounding box\n coordinate predictions and decrease the loss from confi\ndence predictions for boxes that don’t contain objects. We\n use two parameters, coord and noobj to accomplish this. We\n set coord = 5 and noobj = 5.\n Sum-squared error also equally weights errors in large\n boxes and small boxes. Our error metric should reflect that\n small deviations in large boxes matter less than in small\n boxes. To partially address this we predict the square root\n of the bounding box width and height instead of the width\n and height directly.\n YOLO predicts multiple bounding boxes per grid cell.\n At training time we only want one bounding box predictor\n to be responsible for each object. We assign one predictor\n to be “responsible” for predicting an object based on which\n prediction has the highest current IOU with the ground\n truth. This leads to specialization between the bounding box\n predictors. Each predictor gets better at predicting certain\n sizes, aspect ratios, or classes of object, improving overall\n recall.\n During training we optimize the following, multi-part\n We optimize for sum-squared error in the output of our\nlossfunction:\n coord\n S2\n i=0\n B\n j=0\n 1obj\n ij (xi xi)2+(yi yi)2\n + coord\n S2\n i=0\n B\n j=0\n 1obj\n ij wi wi\n 2+ hi hi\n 2\n +\n S2\n i=0\n B\n j=0\n 1obj\n ij Ci Ci\n 2\n + noobj\n S2\n i=0\n B\n j=0\n 1noobj\n ij Ci Ci\n 2\n +\n S2\n i=0\n 1obj\n i\n c classes\n (pi(c) pi(c))2 (3)\n where1obj\n i denotes ifobjectappears incell iand1obj\n ij de\nnotes that thejthboundingboxpredictor incell i is“re\nsponsible”forthatprediction.\n Notethat thelossfunctiononlypenalizesclassification\n errorifanobjectispresentinthatgridcell(hencethecon\nditionalclassprobabilitydiscussedearlier). Italsoonlype\nnalizesboundingboxcoordinateerror if thatpredictor is\n “responsible”forthegroundtruthbox(i.e. hasthehighest\n IOUofanypredictorinthatgridcell).\n Wetrainthenetworkforabout135epochsonthetrain\ningandvalidationdatasetsfromPASCALVOC2007and\n 2012.Whentestingon2012wealsoincludetheVOC2007\n testdatafor training. Throughout trainingweuseabatch\n sizeof64,amomentumof09andadecayof00005.\n Our learningrateschedule isas follows: For thefirst\n epochsweslowlyraisethelearningratefrom10 3to10 2.\n Ifwestartatahighlearningrateourmodeloftendiverges\n duetounstablegradients.Wecontinuetrainingwith10 2\n for75epochs, then10 3 for30epochs, andfinally10 4\n for30epochs.\n Toavoidoverfittingweusedropoutandextensivedata\n augmentation.Adropout layerwithrate=.5afterthefirst\n connectedlayerpreventsco-adaptationbetweenlayers[18].\n For dataaugmentationwe introduce randomscalingand\n translationsofupto20%of theoriginal imagesize. We\n alsorandomlyadjusttheexposureandsaturationoftheim\nagebyuptoafactorof15intheHSVcolorspace.\n 2.3.Inference\n Justlikeintraining,predictingdetectionsforatestimage\n onlyrequiresonenetworkevaluation.OnPASCALVOCthe\n networkpredicts98boundingboxesper imageandclass\n probabilitiesforeachbox. YOLOisextremelyfastat test\n timesinceitonlyrequiresasinglenetworkevaluation,un\nlikeclassifier-basedmethods.\n Thegriddesignenforcesspatialdiversityinthebound\ningboxpredictions. Often it isclearwhichgridcell an\n objectfallsintoandthenetworkonlypredictsoneboxfor\n eachobject. However, somelargeobjectsorobjectsnear\n theborderofmultiplecellscanbewelllocalizedbymulti\nplecells.Non-maximalsuppressioncanbeusedtofixthese\n multipledetections.Whilenotcritical toperformanceasit\n isforR-CNNorDPM,non-maximal suppressionadds2\n3%inmAP.\n 2.4.LimitationsofYOLO\n YOLOimposesstrongspatial constraintsonbounding\n boxpredictionssinceeachgridcellonlypredictstwoboxes\n andcanonlyhaveoneclass. Thisspatial constraint lim\nits thenumberofnearbyobjects thatourmodel canpre\ndict.Ourmodelstruggleswithsmallobjectsthatappearin\n groups,suchasflocksofbirds.\n Sinceourmodel learnstopredictboundingboxesfrom\n data, itstrugglestogeneralizetoobjectsinneworunusual\n aspect ratiosorconfigurations. Ourmodelalsousesrela\ntivelycoarsefeaturesforpredictingboundingboxessince\n ourarchitecturehasmultipledownsamplinglayersfromthe\n inputimage.\n Finally,whilewetrainonalossfunctionthatapproxi\nmatesdetectionperformance,ourlossfunctiontreatserrors\n thesame insmallboundingboxesversus largebounding\n boxes.Asmallerrorinalargeboxisgenerallybenignbuta\n smallerrorinasmallboxhasamuchgreatereffectonIOU.\n Ourmainsourceoferrorisincorrectlocalizations.\n 3.ComparisontoOtherDetectionSystems\n Objectdetectionisacoreproblemincomputervision.\n Detectionpipelinesgenerallystart byextractinga set of\n robust features frominput images (Haar [25], SIFT[23],\n HOG[4], convolutional features [6]). Then, classifiers\n [36, 21, 13, 10]or localizers [1, 32]areusedtoidentify\n objectsinthefeaturespace. Theseclassifiersor localizers\n areruneitherinslidingwindowfashionoverthewholeim\nageoronsomesubsetofregionsintheimage[35,15,39].\n WecomparetheYOLOdetectionsystemtoseveraltopde\ntectionframeworks,highlightingkeysimilaritiesanddiffer\nences.\n Deformablepartsmodels. Deformablepartsmodels\n (DPM)useaslidingwindowapproachtoobjectdetection\n [10].DPMusesadisjointpipelinetoextractstaticfeatures,\n classifyregions, predictboundingboxes forhighscoring\n regions,etc.Oursystemreplacesallofthesedisparateparts\n withasingleconvolutionalneuralnetwork. Thenetwork\n performsfeatureextraction,boundingboxprediction,non\nmaximalsuppression,andcontextualreasoningallconcur\nrently. Insteadofstaticfeatures, thenetworktrainsthefea\nturesin-lineandoptimizesthemforthedetectiontask.Our\n unifiedarchitectureleadstoafaster,moreaccuratemodel\n thanDPM.\n R-CNN.R-CNNanditsvariantsuseregionproposalsin\nsteadofslidingwindowstofindobjectsinimages.Selective\nSearch [35] generates potential bounding boxes, a convolu\ntional network extracts features, an SVM scores the boxes, a\n linear model adjusts the bounding boxes, and non-max sup\npression eliminates duplicate detections. Each stage of this\n complex pipeline must be precisely tuned independently\n and the resulting system is very slow, taking more than 40\n seconds per image at test time [14].\n YOLO shares some similarities with R-CNN. Each grid\n cell proposes potential bounding boxes and scores those\n boxes using convolutional features. However, our system\n puts spatial constraints on the grid cell proposals which\n helps mitigate multiple detections of the same object. Our\n system also proposes far fewer bounding boxes, only 98\n per image compared to about 2000 from Selective Search.\n Finally, our system combines these individual components\n into a single, jointly optimized model.\n Other Fast Detectors Fast and Faster R-CNN focus on\n speeding up the R-CNN framework by sharing computa\ntion and using neural networks to propose regions instead\n of Selective Search [14] [28]. While they offer speed and\n accuracy improvements over R-CNN, both still fall short of\n real-time performance.\n Many research efforts focus on speeding up the DPM\n pipeline [31] [38] [5]. They speed up HOG computation,\n use cascades, and push computation to GPUs. However,\n only 30Hz DPM [31] actually runs in real-time.\n Instead of trying to optimize individual components of\n a large detection pipeline, YOLO throws out the pipeline\n entirely and is fast by design.\n Detectors for single classes like faces or people can be\n highly optimized since they have to deal with much less\n variation [37]. YOLO is a general purpose detector that\n learns to detect a variety of objects simultaneously.\n Deep MultiBox. Unlike R-CNN, Szegedy et al. train a\n convolutional neural network to predict regions of interest\n [8] instead of using Selective Search. MultiBox can also\n perform single object detection by replacing the confidence\n prediction with a single class prediction. However, Multi\nBox cannot perform general object detection and is still just\n a piece in a larger detection pipeline, requiring further im\nage patch classification. Both YOLO and MultiBox use a\n convolutional network to predict bounding boxes in an im\nage but YOLO is a complete detection system.\n OverFeat. Sermanet et al. train a convolutional neural\n network to perform localization and adapt that localizer to\n perform detection [32]. OverFeat efficiently performs slid\ning window detection but it is still a disjoint system. Over\nFeat optimizes for localization, not detection performance.\n Like DPM, the localizer only sees local information when\n making a prediction. OverFeat cannot reason about global\n context and thus requires significant post-processing to pro\nduce coherent detections.\n MultiGrasp. Our work is similar in design to work on\n grasp detection by Redmon et al [27]. Our grid approach to\n bounding box prediction is based on the MultiGrasp system\n for regression to grasps. However, grasp detection is a much\n simpler task than object detection. MultiGrasp only needs\n to predict a single graspable region for an image containing\n one object. It doesn’t have to estimate the size, location,\n or boundaries of the object or predict it’s class, only find a\n region suitable for grasping. YOLO predicts both bounding\n boxes and class probabilities for multiple objects of multi\nple classes in an image.\n 4. Experiments\n First we compare YOLO with other real-time detection\n systems on PASCAL VOC 2007. To understand the differ\nences between YOLO and R-CNN variants we explore the\n errors on VOC 2007 made by YOLO and Fast R-CNN, one\n of the highest performing versions of R-CNN [14]. Based\n on the different error profiles we show that YOLO can be\n used to rescore Fast R-CNN detections and reduce the er\nrors from background false positives, giving a significant\n performance boost. We also present VOC 2012 results and\n compare mAP to current state-of-the-art methods. Finally,\n weshowthat YOLOgeneralizes to new domains better than\n other detectors on two artwork datasets.\n 4.1. Comparison to Other Real-Time Systems\n Many research efforts in object detection focus on mak\ning standard detection pipelines fast. [5] [38] [31] [14] [17]\n [28] However, only Sadeghi et al. actually produce a de\ntection system that runs in real-time (30 frames per second\n or better) [31]. We compare YOLO to their GPU imple\nmentation of DPM which runs either at 30Hz or 100Hz.\n While the other efforts don’t reach the real-time milestone\n we also compare their relative mAP and speed to examine\n the accuracy-performance tradeoffs available in object de\ntection systems.\n Fast YOLO is the fastest object detection method on\n PASCAL; as far as we know, it is the fastest extant object\n detector. With 527% mAP, it is more than twice as accurate\n as prior work on real-time detection. YOLO pushes mAP to\n 634%while still maintaining real-time performance.\n Wealso train YOLO using VGG-16. This model is more\n accurate but also significantly slower than YOLO. It is use\nful for comparison to other detection systems that rely on\n VGG-16 but since it is slower than real-time the rest of the\n paper focuses on our faster models.\n Fastest DPM effectively speeds up DPM without sacri\nf\n icing much mAP but it still misses real-time performance\n by a factor of 2 [38]. It also is limited by DPM’s relatively\n low accuracy on detection compared to neural network ap\nproaches.\n R-CNN minus R replaces Selective Search with static\n bounding box proposals [20]. While it is much faster than\nReal-TimeDetectors Train mAP FPS\n 100HzDPM[31] 2007 16.0 100\n 30HzDPM[31] 2007 26.1 30\n FastYOLO 2007+2012 52.7 155\n YOLO 2007+2012 63.4 45\n LessThanReal-Time\n FastestDPM[38] 2007 30.4 15\n R-CNNMinusR[20] 2007 53.5 6\n FastR-CNN[14] 2007+2012 70.0 0.5\n FasterR-CNNVGG-16[28] 2007+2012 73.2 7\n FasterR-CNNZF[28] 2007+2012 62.1 18\n YOLOVGG-16 2007+2012 66.4 21\n Table1:Real-TimeSystemsonPASCALVOC2007.Compar\ningtheperformanceandspeedof fastdetectors. FastYOLOis\n thefastestdetectoronrecordforPASCALVOCdetectionandis\n still twiceasaccurateasanyother real-timedetector. YOLOis\n 10mAPmoreaccuratethanthefastversionwhilestillwellabove\n real-timeinspeed.\n R-CNN,itstillfallsshortofreal-timeandtakesasignificant\n accuracyhitfromnothavinggoodproposals.\n FastR-CNNspeedsuptheclassificationstageofR-CNN\n but itstillreliesonselectivesearchwhichcantakearound\n 2secondsper imagetogenerateboundingboxproposals.\n ThusithashighmAPbutat05fpsit isstillfarfromreal\ntime.\n TherecentFasterR-CNNreplacesselectivesearchwith\n aneural network toproposeboundingboxes, similar to\n Szegedyetal. [8] Inour tests, theirmostaccuratemodel\n achieves7fpswhileasmaller, lessaccurateone runsat\n 18fps. TheVGG-16versionofFasterR-CNNis10mAP\n higherbut isalso6timesslower thanYOLO.TheZeiler\nFergusFasterR-CNNisonly2.5timesslowerthanYOLO\n butisalsolessaccurate.\n 4.2.VOC2007ErrorAnalysis\n TofurtherexaminethedifferencesbetweenYOLOand\n state-of-the-artdetectors,welookatadetailedbreakdown\n of resultsonVOC2007. WecompareYOLOtoFastR\nCNNsinceFastR-CNNisoneof thehighestperforming\n detectorsonPASCALandit’sdetectionsarepubliclyavail\nable.\n WeusethemethodologyandtoolsofHoiemetal. [19]\n Foreachcategoryat test timewelookat thetopNpredic\ntionsforthatcategory. Eachpredictioniseithercorrector\n itisclassifiedbasedonthetypeoferror:\n Correct:correctclassandIOU>5\n Localization:correctclass, 1<IOU<5\n Similar:classissimilar,IOU>1\n Correct: 71.6% Correct: 65.5%\n Loc: 8.6%\n Sim: 4.3%\n Other: 1.9%\n Background: 13.6%\n Loc: 19.0%\n Sim: 6.75%\n Other: 4.0%\n Background: 4.75%\n Fast R-CNN YOLO\n Figure4: ErrorAnalysis: FastR-CNNvs. YOLOThese\n chartsshowthepercentageoflocalizationandbackgrounderrors\n inthetopNdetectionsforvariouscategories(N=#objectsinthat\n category).\n Other:classiswrong,IOU>1\n Background: IOU<1foranyobject\n Figure4showsthebreakdownofeacherror typeaver\nagedacrossall20classes.\n YOLOstrugglestolocalizeobjectscorrectly. Localiza\ntionerrorsaccountformoreofYOLO’serrorsthanallother\n sourcescombined. FastR-CNNmakesmuchfewer local\nizationerrorsbut farmorebackgrounderrors. 13.6%of\n it’stopdetectionsarefalsepositivesthatdon’tcontainany\n objects. FastR-CNNisalmost3xmore likelytopredict\n backgrounddetectionsthanYOLO.\n 4.3.CombiningFastR-CNNandYOLO\n YOLOmakesfarfewerbackgroundmistakesthanFast\n R-CNN.ByusingYOLOtoeliminatebackgrounddetec\ntionsfromFastR-CNNwegetasignificantboostinperfor\nmance. ForeveryboundingboxthatR-CNNpredictswe\n checktoseeifYOLOpredictsasimilarbox. Ifitdoes,we\n give thatpredictionaboostbasedontheprobabilitypre\ndictedbyYOLOandtheoverlapbetweenthetwoboxes.\n ThebestFastR-CNNmodelachievesamAPof71.8%\n ontheVOC2007testset.WhencombinedwithYOLO,its\n mAP Combined Gain\n FastR-CNN 71.8-\nFastR-CNN(2007data) 66.9 72.4 .6\n FastR-CNN(VGG-M) 59.2 72.4 .6\n FastR-CNN(CaffeNet) 57.1 72.1 .3\n YOLO 63.4 75.0 3.2\n Table2:ModelcombinationexperimentsonVOC2007.We\n examinetheeffectofcombiningvariousmodelswiththebestver\nsionofFastR-CNN.OtherversionsofFastR-CNNprovideonly\n asmallbenefitwhileYOLOprovidesasignificantperformance\n boost.\nVOC2012test mAP aero bike bird boat bottle bus car cat chair cow table dog horse mbikepersonplant sheep sofa train tv\n MR CNN MORE DATA[11] 73.9 85.5 82.9 76.6 57.8 62.7 79.4 77.2 86.6 55.0 79.1 62.2 87.0 83.4 84.7 78.9 45.3 73.4 65.8 80.3 74.0\n HyperNet VGG\n HyperNet SP\n 71.4 84.2 78.5 73.6 55.6 53.7 78.7 79.8 87.7 49.6 74.9 52.1 86.0 81.7 83.3 81.8 48.6 73.5 59.4 79.9 65.7\n 71.3 84.1 78.3 73.3 55.5 53.6 78.6 79.6 87.5 49.5 74.9 52.1 85.6 81.6 83.2 81.6 48.4 73.2 59.3 79.7 65.6\n Fast R-CNN + YOLO\n 70.7\n MR CNN\n S\n 83.4\n 78.5\n 73.5\n 55.8\n 43.4\n 79.1\n 73.1\n 89.4\n 49.4\n 75.5\n 57.0\n 87.5\n 80.9\n 81.0\n 74.7\n 41.8\n 71.5\n 68.5\n 82.1\n 67.2\n CNN[11] 70.7 85.0 79.6 71.5 55.3 57.7 76.0 73.9 84.6 50.5 74.3 61.7 85.5 79.9 81.7 76.4 41.0 69.0 61.2 77.7 72.1\n Faster R-CNN [28] 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\n DEEP ENS COCO 70.1 84.0 79.4 71.6 51.9 51.1 74.1 72.1 88.6 48.3 73.4 57.8 86.1 80.0 80.7 70.4 46.6 69.6 68.8 75.9 71.4\n NoC[29] 68.8 82.8 79.0 71.6 52.3 53.7 74.1 69.0 84.9 46.9 74.3 53.1 85.0 81.3 79.5 72.2 38.9 72.4 59.5 76.7 68.1\n Fast R-CNN [14] 68.4 82.3 78.4 70.8 52.3 38.7 77.8 71.6 89.3 44.2 73.0 55.0 87.5 80.5 80.8 72.0 35.1 68.3 65.7 80.4 64.2\n UMICH FGS STRUCT 66.4 82.9 76.1 64.1 44.6 49.4 70.3 71.2 84.6 42.7 68.6 55.8 82.7 77.1 79.9 68.7 41.4 69.0 60.0 72.0 66.2\n.....\n"};